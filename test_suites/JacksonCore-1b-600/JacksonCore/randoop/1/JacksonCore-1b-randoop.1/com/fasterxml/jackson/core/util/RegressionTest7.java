package com.fasterxml.jackson.core.util;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest7 {

    public static boolean debug = false;

    @Test
    public void test3501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3501");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        com.fasterxml.jackson.core.Version version90 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.JsonLocation jsonLocation91 = uTF8StreamJsonParser84.getTokenLocation();
        boolean boolean92 = uTF8StreamJsonParser84.hasCurrentToken();
        java.lang.String str94 = uTF8StreamJsonParser84.getValueAsString("");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(version90);
        org.junit.Assert.assertNotNull(jsonLocation91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
    }

    @Test
    public void test3502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3502");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        boolean boolean93 = uTF8StreamJsonParser84.isClosed();
        java.lang.String str94 = uTF8StreamJsonParser84.getText();
        com.fasterxml.jackson.core.Version version95 = uTF8StreamJsonParser84.version();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(str94);
        org.junit.Assert.assertNotNull(version95);
    }

    @Test
    public void test3503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3503");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.setCurrentLength(63);
        int int80 = textBuffer76.getCurrentSegmentSize();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 63 + "'", int80 == 63);
    }

    @Test
    public void test3504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3504");
        com.fasterxml.jackson.core.io.IOContext iOContext0 = null;
        java.io.InputStream inputStream1 = null;
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream7 = new com.fasterxml.jackson.core.io.MergedStream(iOContext0, inputStream1, byteArray4, 0, (int) '#');
        long long9 = mergedStream7.skip((long) (short) 1);
        int int10 = mergedStream7.available();
        mergedStream7.mark((int) (short) 1);
        long long14 = mergedStream7.skip((long) (short) 10);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray21 = new char[] { 'a', ' ', '#', '4' };
        int int23 = serializedString16.appendUnquoted(charArray21, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString25 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray30 = new char[] { 'a', ' ', '#', '4' };
        int int32 = serializedString25.appendUnquoted(charArray30, 0);
        boolean boolean33 = serializedString16.equals((java.lang.Object) serializedString25);
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int42 = serializedString35.appendQuotedUTF8(byteArray40, 0);
        char[] charArray43 = serializedString35.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString45 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int52 = serializedString45.appendQuotedUTF8(byteArray50, 0);
        int int54 = serializedString35.appendUnquotedUTF8(byteArray50, (int) (short) -1);
        int int56 = serializedString25.appendQuotedUTF8(byteArray50, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int59 = mergedStream7.read(byteArray50, 63, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 34 + "'", int10 == 34);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
    }

    @Test
    public void test3505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3505");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter23 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator24 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.beforeObjectEntries(jsonGenerator24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(indenter23);
    }

    @Test
    public void test3506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3506");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec88 = uTF8StreamJsonParser84.getCodec();
        // The following exception was thrown during execution in test generation
        try {
            long long90 = uTF8StreamJsonParser84.nextLongValue(1L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(objectCodec88);
    }

    @Test
    public void test3507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3507");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.getTextBuffer();
        boolean boolean78 = textBuffer76.hasTextAsCharacters();
        java.lang.String str79 = textBuffer76.contentsAsString();
        textBuffer76.append('a');
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNull(charArray77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
    }

    @Test
    public void test3508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3508");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        double double88 = uTF8StreamJsonParser84.getValueAsDouble((double) 63);
        char[] charArray89 = uTF8StreamJsonParser84.getTextCharacters();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Boolean boolean90 = uTF8StreamJsonParser84.nextBooleanValue();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 63.0d + "'", double88 == 63.0d);
        org.junit.Assert.assertNull(charArray89);
    }

    @Test
    public void test3509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3509");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getFeatureMask();
        java.lang.String str87 = uTF8StreamJsonParser84.getValueAsString("?");
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "?" + "'", str87, "?");
        org.junit.Assert.assertNotNull(jsonLocation88);
    }

    @Test
    public void test3510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3510");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        java.lang.String str89 = uTF8StreamJsonParser84.getCurrentName();
        boolean boolean90 = uTF8StreamJsonParser84.getValueAsBoolean();
        int int91 = uTF8StreamJsonParser84.getTokenLineNr();
        java.lang.String str93 = uTF8StreamJsonParser84.getValueAsString("[Source: #; line: 1, column: 1]");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "[Source: hi!; line: 52, column: 1]" + "'", str89, "[Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "[Source: #; line: 1, column: 1]" + "'", str93, "[Source: #; line: 1, column: 1]");
    }

    @Test
    public void test3511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3511");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.ObjectCodec objectCodec90 = uTF8StreamJsonParser84.getCodec();
        // The following exception was thrown during execution in test generation
        try {
            int int91 = uTF8StreamJsonParser84.getIntValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(objectCodec90);
    }

    @Test
    public void test3512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3512");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray2 = serializedString1.asQuotedChars();
        int int3 = serializedString1.charLength();
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 47 + "'", int3 == 47);
    }

    @Test
    public void test3513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3513");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        com.fasterxml.jackson.core.ObjectCodec objectCodec92 = null;
        uTF8StreamJsonParser84.setCodec(objectCodec92);
        com.fasterxml.jackson.core.JsonLocation jsonLocation94 = uTF8StreamJsonParser84.getTokenLocation();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertNotNull(jsonLocation94);
    }

    @Test
    public void test3514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3514");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonToken jsonToken88 = uTF8StreamJsonParser84.getCurrentToken();
        uTF8StreamJsonParser84.clearCurrentToken();
        uTF8StreamJsonParser84.overrideCurrentName("[Source: #; line: 1, column: 1]");
        double double93 = uTF8StreamJsonParser84.getValueAsDouble((double) 10L);
        int int94 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext95 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonLocation jsonLocation96 = uTF8StreamJsonParser84.getCurrentLocation();
        java.lang.Object obj97 = uTF8StreamJsonParser84.getObjectId();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(jsonToken88);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 10.0d + "'", double93 == 10.0d);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNotNull(jsonReadContext95);
        org.junit.Assert.assertNotNull(jsonLocation96);
        org.junit.Assert.assertNull(obj97);
    }

    @Test
    public void test3515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3515");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        char[] charArray89 = uTF8StreamJsonParser84.getTextCharacters();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str90 = uTF8StreamJsonParser84.nextTextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNull(charArray89);
    }

    @Test
    public void test3516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3516");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        java.lang.Object obj89 = uTF8StreamJsonParser84.getObjectId();
        boolean boolean90 = uTF8StreamJsonParser84.hasCurrentToken();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNull(obj89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test3517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3517");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getValueAsInt();
        java.lang.Object obj86 = uTF8StreamJsonParser84.getObjectId();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNull(obj86);
    }

    @Test
    public void test3518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3518");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec88 = uTF8StreamJsonParser84.getCodec();
        char[] charArray89 = uTF8StreamJsonParser84.getTextCharacters();
        int int90 = uTF8StreamJsonParser84.getTokenColumnNr();
        com.fasterxml.jackson.core.Version version91 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.ObjectCodec objectCodec92 = uTF8StreamJsonParser84.getCodec();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(objectCodec88);
        org.junit.Assert.assertNull(charArray89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertNotNull(version91);
        org.junit.Assert.assertNull(objectCodec92);
    }

    @Test
    public void test3519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3519");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        boolean boolean89 = uTF8StreamJsonParser84.hasTextCharacters();
        java.lang.String str90 = uTF8StreamJsonParser84.getValueAsString();
        long long92 = uTF8StreamJsonParser84.getValueAsLong(72L);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 72L + "'", long92 == 72L);
    }

    @Test
    public void test3520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3520");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        com.fasterxml.jackson.core.Version version90 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.JsonLocation jsonLocation91 = uTF8StreamJsonParser84.getTokenLocation();
        long long92 = uTF8StreamJsonParser84.getValueAsLong();
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext93 = uTF8StreamJsonParser84.getParsingContext();
        boolean boolean94 = uTF8StreamJsonParser84.hasCurrentToken();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(version90);
        org.junit.Assert.assertNotNull(jsonLocation91);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 0L + "'", long92 == 0L);
        org.junit.Assert.assertNotNull(jsonReadContext93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test3521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3521");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString47 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int54 = serializedString47.appendQuotedUTF8(byteArray52, 0);
        char[] charArray55 = serializedString47.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString57 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int64 = serializedString57.appendQuotedUTF8(byteArray62, 0);
        int int66 = serializedString47.appendUnquotedUTF8(byteArray62, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter67 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString47);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter68 = defaultPrettyPrinter67._objectIndenter;
        defaultPrettyPrinter44.indentObjectsWith(indenter68);
        defaultPrettyPrinter21._objectIndenter = indenter68;
        defaultPrettyPrinter21.spacesInObjectEntries(false);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(indenter68);
    }

    @Test
    public void test3522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3522");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        java.lang.String str80 = textBuffer76.toString();
        boolean boolean81 = textBuffer76.hasTextAsCharacters();
        char[] charArray82 = textBuffer76.finishCurrentSegment();
        java.lang.String str83 = textBuffer76.toString();
        boolean boolean84 = textBuffer76.hasTextAsCharacters();
        textBuffer76.releaseBuffers();
        char[] charArray86 = textBuffer76.finishCurrentSegment();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "a" + "'", str80, "a");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "a" + "'", str83, "a");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(charArray86);
    }

    @Test
    public void test3523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3523");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        java.lang.Object obj89 = uTF8StreamJsonParser84.getObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: ");
        java.lang.String str92 = uTF8StreamJsonParser84.getValueAsString();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger93 = uTF8StreamJsonParser84.getBigIntegerValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNull(obj89);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str91, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNull(str92);
    }

    @Test
    public void test3524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3524");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        boolean boolean93 = uTF8StreamJsonParser84.canReadObjectId();
        // The following exception was thrown during execution in test generation
        try {
            byte byte94 = uTF8StreamJsonParser84.getByteValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test3525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3525");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int27 = serializedString20.appendQuotedUTF8(byteArray25, 0);
        char[] charArray28 = serializedString20.asQuotedChars();
        boolean boolean29 = serializedString1.equals((java.lang.Object) serializedString20);
        com.fasterxml.jackson.core.io.SerializedString serializedString31 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int38 = serializedString31.appendQuotedUTF8(byteArray36, 0);
        byte[] byteArray39 = serializedString31.asUnquotedUTF8();
        int int41 = serializedString20.appendQuotedUTF8(byteArray39, (int) '#');
        java.lang.String str42 = serializedString20.getValue();
        java.lang.String str43 = serializedString20.getValue();
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str42, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str43, "com.fasterxml.jackson.core.JsonParseException: ");
    }

    @Test
    public void test3526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3526");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonToken jsonToken88 = uTF8StreamJsonParser84.getCurrentToken();
        uTF8StreamJsonParser84.clearCurrentToken();
        uTF8StreamJsonParser84.overrideCurrentName("[Source: #; line: 1, column: 1]");
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger92 = uTF8StreamJsonParser84.getBigIntegerValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(jsonToken88);
    }

    @Test
    public void test3527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3527");
        // The following exception was thrown during execution in test generation
        try {
            double double1 = com.fasterxml.jackson.core.io.NumberInput.parseDouble("com.fasterxml.jackson.core.JsonParseException: hi!\n at [Source: /; line: 0, column: 0]");
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"com.fasterxml.jackson.core.JsonParseException: hi!? at [Source: /; line: 0, column: 0]\"");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
    }

    @Test
    public void test3528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3528");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        java.lang.String str80 = textBuffer76.toString();
        char[] charArray81 = textBuffer76.getCurrentSegment();
        textBuffer76.resetWithEmpty();
        // The following exception was thrown during execution in test generation
        try {
            double double83 = textBuffer76.contentsAsDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: empty String");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "a" + "'", str80, "a");
        org.junit.Assert.assertNotNull(charArray81);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray81), "a
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray81), "a
    }

    @Test
    public void test3529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3529");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        com.fasterxml.jackson.core.ObjectCodec objectCodec87 = uTF8StreamJsonParser84.getCodec();
        java.lang.String str89 = uTF8StreamJsonParser84.getValueAsString("");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertNull(objectCodec87);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
    }

    @Test
    public void test3530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3530");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.getTextBuffer();
        textBuffer76.resetWithEmpty();
        java.lang.String str79 = textBuffer76.contentsAsString();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNull(charArray77);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
    }

    @Test
    public void test3531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3531");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext91 = uTF8StreamJsonParser84.getParsingContext();
        boolean boolean92 = uTF8StreamJsonParser84.isClosed();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNotNull(jsonStreamContext91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test3532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3532");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        boolean boolean88 = uTF8StreamJsonParser84.isClosed();
        boolean boolean89 = uTF8StreamJsonParser84.getValueAsBoolean();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray90 = uTF8StreamJsonParser84.getBinaryValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test3533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3533");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        java.lang.String str80 = textBuffer76.toString();
        boolean boolean81 = textBuffer76.hasTextAsCharacters();
        char[] charArray82 = textBuffer76.finishCurrentSegment();
        java.lang.String str83 = textBuffer76.toString();
        textBuffer76.resetWithEmpty();
        textBuffer76.append("com.fasterxml.jackson.core.JsonParseException: hi!\n at [Source: /; line: 0, column: 0]", 0, (int) ' ');
        char[] charArray89 = textBuffer76.contentsAsArray();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "a" + "'", str80, "a");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "a" + "'", str83, "a");
        org.junit.Assert.assertNotNull(charArray89);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray89), "com.fasterxml.jackson.core.JsonP");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray89), "com.fasterxml.jackson.core.JsonP");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray89), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P]");
    }

    @Test
    public void test3534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3534");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter24 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter25 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter lf2SpacesIndenter27 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter lf2SpacesIndenter29 = lf2SpacesIndenter27.withLinefeed("[Source: hi!; line: 52, column: 1]");
        defaultPrettyPrinter25.indentObjectsWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) lf2SpacesIndenter27);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter31 = defaultPrettyPrinter25.createInstance();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter24);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter25);
        org.junit.Assert.assertNotNull(lf2SpacesIndenter29);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter31);
    }

    @Test
    public void test3535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3535");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        boolean boolean85 = uTF8StreamJsonParser84.hasTextCharacters();
        char[] charArray86 = uTF8StreamJsonParser84.getTextCharacters();
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext87 = uTF8StreamJsonParser84.getParsingContext();
        // The following exception was thrown during execution in test generation
        try {
            int int89 = uTF8StreamJsonParser84.nextIntValue((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(charArray86);
        org.junit.Assert.assertNotNull(jsonReadContext87);
    }

    @Test
    public void test3536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3536");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonParseException: ");
        com.fasterxml.jackson.core.SerializableString serializableString2 = null;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter1, serializableString2);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter4 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter1);
        com.fasterxml.jackson.core.SerializableString serializableString5 = defaultPrettyPrinter4._rootSeparator;
        com.fasterxml.jackson.core.io.SerializedString serializedString7 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray12 = new char[] { 'a', ' ', '#', '4' };
        int int14 = serializedString7.appendUnquoted(charArray12, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray21 = new char[] { 'a', ' ', '#', '4' };
        int int23 = serializedString16.appendUnquoted(charArray21, 0);
        boolean boolean24 = serializedString7.equals((java.lang.Object) serializedString16);
        com.fasterxml.jackson.core.io.SerializedString serializedString26 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int33 = serializedString26.appendQuotedUTF8(byteArray31, 0);
        char[] charArray34 = serializedString26.asQuotedChars();
        boolean boolean35 = serializedString7.equals((java.lang.Object) serializedString26);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter36 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter4, (com.fasterxml.jackson.core.SerializableString) serializedString7);
        boolean boolean37 = defaultPrettyPrinter36._spacesInObjectEntries;
        org.junit.Assert.assertNotNull(serializableString5);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test3537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3537");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        com.fasterxml.jackson.core.Base64Variant base64Variant89 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray90 = uTF8StreamJsonParser84.getBinaryValue(base64Variant89);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
    }

    @Test
    public void test3538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3538");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        com.fasterxml.jackson.core.ObjectCodec objectCodec87 = uTF8StreamJsonParser84.getCodec();
        java.lang.String str88 = uTF8StreamJsonParser84.getValueAsString();
        boolean boolean89 = uTF8StreamJsonParser84.isClosed();
        uTF8StreamJsonParser84.overrideCurrentName("com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertNull(objectCodec87);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(version92);
    }

    @Test
    public void test3539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3539");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextLength();
        boolean boolean86 = uTF8StreamJsonParser84.canReadTypeId();
        com.fasterxml.jackson.core.Version version87 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.io.SerializedString serializedString89 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray90 = serializedString89.asQuotedChars();
        byte[] byteArray91 = serializedString89.asQuotedUTF8();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean92 = uTF8StreamJsonParser84.nextFieldName((com.fasterxml.jackson.core.SerializableString) serializedString89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(version87);
        org.junit.Assert.assertNotNull(charArray90);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray90), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray90), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray90), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
    }

    @Test
    public void test3540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3540");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextLength();
        boolean boolean86 = uTF8StreamJsonParser84.canReadTypeId();
        boolean boolean87 = uTF8StreamJsonParser84.requiresCustomCodec();
        com.fasterxml.jackson.core.JsonToken jsonToken88 = uTF8StreamJsonParser84.getLastClearedToken();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(jsonToken88);
    }

    @Test
    public void test3541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3541");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 0, (byte) 0 };
        int int17 = serializedString1.appendUnquotedUTF8(byteArray15, (int) (short) -1);
        com.fasterxml.jackson.core.io.SerializedString serializedString19 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int26 = serializedString19.appendQuotedUTF8(byteArray24, 0);
        char[] charArray27 = serializedString19.asQuotedChars();
        int int28 = serializedString19.charLength();
        char[] charArray29 = serializedString19.asQuotedChars();
        int int31 = serializedString1.appendUnquoted(charArray29, (int) (short) 10);
        java.lang.String str32 = serializedString1.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray39 = new char[] { 'a', ' ', '#', '4' };
        int int41 = serializedString34.appendUnquoted(charArray39, 0);
        java.lang.String str42 = serializedString34.getValue();
        com.fasterxml.jackson.core.JsonLocation jsonLocation44 = null;
        java.lang.Throwable throwable45 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException46 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation44, throwable45);
        boolean boolean47 = serializedString34.equals((java.lang.Object) jsonLocation44);
        byte[] byteArray48 = serializedString34.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString50 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray55 = new char[] { 'a', ' ', '#', '4' };
        int int57 = serializedString50.appendUnquoted(charArray55, 0);
        java.lang.String str58 = serializedString50.getValue();
        com.fasterxml.jackson.core.JsonLocation jsonLocation60 = null;
        java.lang.Throwable throwable61 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException62 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation60, throwable61);
        boolean boolean63 = serializedString50.equals((java.lang.Object) jsonLocation60);
        byte[] byteArray64 = serializedString50.asUnquotedUTF8();
        int int66 = serializedString34.appendQuotedUTF8(byteArray64, 34);
        int int68 = serializedString1.appendUnquotedUTF8(byteArray64, 10);
        java.lang.String str69 = serializedString1.getValue();
        java.nio.ByteBuffer byteBuffer70 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int71 = serializedString1.putUnquotedUTF8(byteBuffer70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 1, 10, -1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 47 + "'", int28 == 47);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str32, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str42, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str58, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str69, "com.fasterxml.jackson.core.JsonParseException: ");
    }

    @Test
    public void test3542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3542");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        boolean boolean89 = uTF8StreamJsonParser84.hasTextCharacters();
        boolean boolean90 = uTF8StreamJsonParser84.isClosed();
        // The following exception was thrown during execution in test generation
        try {
            uTF8StreamJsonParser84.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test3543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3543");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        java.lang.String str80 = textBuffer76.toString();
        boolean boolean81 = textBuffer76.hasTextAsCharacters();
        char[] charArray82 = textBuffer76.finishCurrentSegment();
        java.lang.String str83 = textBuffer76.toString();
        textBuffer76.resetWithEmpty();
        textBuffer76.append("com.fasterxml.jackson.core.JsonParseException: hi!\n at [Source: /; line: 0, column: 0]", 0, (int) ' ');
        textBuffer76.append("[Source: true; line: 0, column: 100]", 0, (int) (byte) 10);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "a" + "'", str80, "a");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "a" + "'", str83, "a");
    }

    @Test
    public void test3544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3544");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.JsonParser jsonParser90 = uTF8StreamJsonParser84.skipChildren();
        com.fasterxml.jackson.core.Version version91 = uTF8StreamJsonParser84.version();
        boolean boolean92 = uTF8StreamJsonParser84.canReadObjectId();
        long long93 = uTF8StreamJsonParser84.getTokenCharacterOffset();
        // The following exception was thrown during execution in test generation
        try {
            double double94 = uTF8StreamJsonParser84.getDoubleValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonParser90);
        org.junit.Assert.assertNotNull(version91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
    }

    @Test
    public void test3545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3545");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        char[] charArray87 = uTF8StreamJsonParser84.getTextCharacters();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray89 = uTF8StreamJsonParser84.getBinaryValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray87);
        org.junit.Assert.assertNull(charArray88);
    }

    @Test
    public void test3546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3546");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        java.lang.String str88 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]\n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.JsonLocation jsonLocation89 = uTF8StreamJsonParser84.getCurrentLocation();
        com.fasterxml.jackson.core.JsonToken jsonToken90 = uTF8StreamJsonParser84.getLastClearedToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation91 = uTF8StreamJsonParser84.getCurrentLocation();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken92 = uTF8StreamJsonParser84.nextToken();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]\n at [Source: hi!; line: 52, column: 1]" + "'", str88, "com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]\n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(jsonLocation89);
        org.junit.Assert.assertNull(jsonToken90);
        org.junit.Assert.assertNotNull(jsonLocation91);
    }

    @Test
    public void test3547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3547");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        java.lang.String str2 = serializedString1.getValue();
        byte[] byteArray3 = serializedString1.asUnquotedUTF8();
        char[] charArray4 = serializedString1.asQuotedChars();
        int int5 = serializedString1.charLength();
        byte[] byteArray6 = serializedString1.asUnquotedUTF8();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str2, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 47 + "'", int5 == 47);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
    }

    @Test
    public void test3548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3548");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter24 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter25 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter21);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter27 = defaultPrettyPrinter25._withSpaces(true);
        boolean boolean28 = defaultPrettyPrinter25._spacesInObjectEntries;
        com.fasterxml.jackson.core.io.SerializedString serializedString30 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int37 = serializedString30.appendQuotedUTF8(byteArray35, 0);
        char[] charArray38 = serializedString30.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString40 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int47 = serializedString40.appendQuotedUTF8(byteArray45, 0);
        int int49 = serializedString30.appendUnquotedUTF8(byteArray45, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter50 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString30);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter51 = defaultPrettyPrinter50.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter52 = defaultPrettyPrinter50.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter53 = defaultPrettyPrinter50.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter54 = defaultPrettyPrinter50.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter lf2SpacesIndenter56 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter lf2SpacesIndenter58 = lf2SpacesIndenter56.withLinefeed("[Source: hi!; line: 52, column: 1]");
        defaultPrettyPrinter54.indentObjectsWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) lf2SpacesIndenter56);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter60 = defaultPrettyPrinter25.withObjectIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) lf2SpacesIndenter56);
        java.lang.String str61 = lf2SpacesIndenter56._lf;
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter24);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter51);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter52);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter53);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter54);
        org.junit.Assert.assertNotNull(lf2SpacesIndenter58);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[Source: hi!; line: 52, column: 1]" + "'", str61, "[Source: hi!; line: 52, column: 1]");
    }

    @Test
    public void test3549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3549");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        int int78 = textBuffer76.getTextOffset();
        int int79 = textBuffer76.getCurrentSegmentSize();
        char[] charArray80 = textBuffer76.contentsAsArray();
        textBuffer76.resetWithEmpty();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(charArray80);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray80), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray80), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray80), "[]");
    }

    @Test
    public void test3550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3550");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withSpacesInObjectEntries();
        com.fasterxml.jackson.core.SerializableString serializableString24 = defaultPrettyPrinter21._rootSeparator;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter25 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.SerializableString serializableString26 = defaultPrettyPrinter21._rootSeparator;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator27 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.beforeObjectEntries(jsonGenerator27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(serializableString24);
        org.junit.Assert.assertNotNull(indenter25);
        org.junit.Assert.assertNotNull(serializableString26);
    }

    @Test
    public void test3551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3551");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        int int94 = uTF8StreamJsonParser84.getValueAsInt((int) '#');
        boolean boolean96 = uTF8StreamJsonParser84.getValueAsBoolean(false);
        java.lang.String str98 = uTF8StreamJsonParser84.getValueAsString("?");
        java.lang.String str99 = uTF8StreamJsonParser84.getCurrentName();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(version92);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 35 + "'", int94 == 35);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "?" + "'", str98, "?");
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "[Source: hi!; line: 52, column: 1]" + "'", str99, "[Source: hi!; line: 52, column: 1]");
    }

    @Test
    public void test3552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3552");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        java.lang.String str9 = serializedString1.getValue();
        com.fasterxml.jackson.core.JsonLocation jsonLocation11 = null;
        java.lang.Throwable throwable12 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException13 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation11, throwable12);
        boolean boolean14 = serializedString1.equals((java.lang.Object) jsonLocation11);
        byte[] byteArray15 = serializedString1.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString17 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray22 = new char[] { 'a', ' ', '#', '4' };
        int int24 = serializedString17.appendUnquoted(charArray22, 0);
        java.lang.String str25 = serializedString17.getValue();
        com.fasterxml.jackson.core.JsonLocation jsonLocation27 = null;
        java.lang.Throwable throwable28 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException29 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation27, throwable28);
        boolean boolean30 = serializedString17.equals((java.lang.Object) jsonLocation27);
        byte[] byteArray31 = serializedString17.asUnquotedUTF8();
        int int33 = serializedString1.appendQuotedUTF8(byteArray31, 34);
        int int34 = serializedString1.charLength();
        char[] charArray35 = serializedString1.asQuotedChars();
        byte[] byteArray36 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int38 = serializedString1.appendQuotedUTF8(byteArray36, 24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str9, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str25, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 47 + "'", int34 == 47);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test3553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3553");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        com.fasterxml.jackson.core.ObjectCodec objectCodec87 = uTF8StreamJsonParser84.getCodec();
        java.lang.String str88 = uTF8StreamJsonParser84.getValueAsString();
        boolean boolean89 = uTF8StreamJsonParser84.isClosed();
        boolean boolean90 = uTF8StreamJsonParser84.getValueAsBoolean();
        boolean boolean92 = uTF8StreamJsonParser84.getValueAsBoolean(true);
        int int93 = uTF8StreamJsonParser84.getTextOffset();
        boolean boolean94 = uTF8StreamJsonParser84.hasCurrentToken();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertNull(objectCodec87);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test3554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3554");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding15 = iOContext12.getEncoding();
        boolean boolean16 = iOContext12.isResourceManaged();
        com.fasterxml.jackson.core.io.SerializedString serializedString18 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray19 = serializedString18.asQuotedChars();
        byte[] byteArray20 = serializedString18.asQuotedUTF8();
        // The following exception was thrown during execution in test generation
        try {
            iOContext12.releaseBase64Buffer(byteArray20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Trying to release buffer not owned by the context");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNull(jsonEncoding15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
    }

    @Test
    public void test3555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3555");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        com.fasterxml.jackson.core.JsonToken jsonToken89 = uTF8StreamJsonParser84.getLastClearedToken();
        // The following exception was thrown during execution in test generation
        try {
            float float90 = uTF8StreamJsonParser84.getFloatValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNull(jsonToken89);
    }

    @Test
    public void test3556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3556");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        java.lang.String str89 = uTF8StreamJsonParser84.getCurrentName();
        com.fasterxml.jackson.core.JsonToken jsonToken90 = uTF8StreamJsonParser84.getLastClearedToken();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "[Source: hi!; line: 52, column: 1]" + "'", str89, "[Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNull(jsonToken90);
    }

    @Test
    public void test3557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3557");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        char[] charArray25 = new char[] { '#', '#', 'a', 'a', ' ', '#' };
        boolean boolean29 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray25, (int) (byte) -1, 0, true);
        int int31 = serializedString1.appendUnquoted(charArray25, (-1));
        byte[] byteArray32 = serializedString1.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray39 = new char[] { 'a', ' ', '#', '4' };
        int int41 = serializedString34.appendUnquoted(charArray39, 0);
        java.lang.String str42 = serializedString34.getValue();
        com.fasterxml.jackson.core.JsonLocation jsonLocation44 = null;
        java.lang.Throwable throwable45 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException46 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation44, throwable45);
        boolean boolean47 = serializedString34.equals((java.lang.Object) jsonLocation44);
        byte[] byteArray48 = serializedString34.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString50 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray55 = new char[] { 'a', ' ', '#', '4' };
        int int57 = serializedString50.appendUnquoted(charArray55, 0);
        java.lang.String str58 = serializedString50.getValue();
        com.fasterxml.jackson.core.JsonLocation jsonLocation60 = null;
        java.lang.Throwable throwable61 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException62 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation60, throwable61);
        boolean boolean63 = serializedString50.equals((java.lang.Object) jsonLocation60);
        byte[] byteArray64 = serializedString50.asUnquotedUTF8();
        int int66 = serializedString34.appendQuotedUTF8(byteArray64, 34);
        int int67 = serializedString34.charLength();
        com.fasterxml.jackson.core.io.SerializedString serializedString69 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray70 = serializedString69.asUnquotedUTF8();
        java.lang.String str71 = serializedString69.toString();
        char[] charArray72 = serializedString69.asQuotedChars();
        int int74 = serializedString34.appendQuoted(charArray72, 47);
        int int76 = serializedString1.appendUnquoted(charArray72, (int) '#');
        int int77 = serializedString1.charLength();
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "##aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "##aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[#, #, a, a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str42, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str58, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 47 + "'", int67 == 47);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str71, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray72), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray72), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray72), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 47 + "'", int77 == 47);
    }

    @Test
    public void test3558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3558");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        com.fasterxml.jackson.core.Version version90 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.JsonLocation jsonLocation91 = uTF8StreamJsonParser84.getTokenLocation();
        java.lang.String str92 = uTF8StreamJsonParser84.getValueAsString();
        java.lang.Object obj93 = uTF8StreamJsonParser84.getInputSource();
        java.lang.String str95 = uTF8StreamJsonParser84.getValueAsString("");
        com.fasterxml.jackson.core.ObjectCodec objectCodec96 = uTF8StreamJsonParser84.getCodec();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(version90);
        org.junit.Assert.assertNotNull(jsonLocation91);
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertNull(obj93);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertNull(objectCodec96);
    }

    @Test
    public void test3559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3559");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        int int89 = uTF8StreamJsonParser84.getTextOffset();
        double double91 = uTF8StreamJsonParser84.getValueAsDouble((double) 10.0f);
        com.fasterxml.jackson.core.JsonLocation jsonLocation92 = uTF8StreamJsonParser84.getCurrentLocation();
        long long93 = uTF8StreamJsonParser84.getValueAsLong();
        com.fasterxml.jackson.core.JsonLocation jsonLocation94 = uTF8StreamJsonParser84.getTokenLocation();
        java.io.Writer writer95 = null;
        int int96 = uTF8StreamJsonParser84.releaseBuffered(writer95);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 10.0d + "'", double91 == 10.0d);
        org.junit.Assert.assertNotNull(jsonLocation92);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
        org.junit.Assert.assertNotNull(jsonLocation94);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
    }

    @Test
    public void test3560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3560");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString47 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int54 = serializedString47.appendQuotedUTF8(byteArray52, 0);
        char[] charArray55 = serializedString47.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString57 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int64 = serializedString57.appendQuotedUTF8(byteArray62, 0);
        int int66 = serializedString47.appendUnquotedUTF8(byteArray62, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter67 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString47);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter68 = defaultPrettyPrinter67._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int77 = serializedString70.appendQuotedUTF8(byteArray75, 0);
        char[] charArray78 = serializedString70.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString80 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int87 = serializedString80.appendQuotedUTF8(byteArray85, 0);
        int int89 = serializedString70.appendUnquotedUTF8(byteArray85, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter90 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString70);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter91 = defaultPrettyPrinter90._objectIndenter;
        defaultPrettyPrinter67.indentObjectsWith(indenter91);
        defaultPrettyPrinter44._objectIndenter = indenter91;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter94 = defaultPrettyPrinter21.withArrayIndenter(indenter91);
        int int95 = defaultPrettyPrinter94._nesting;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator96 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter94.writeStartObject(jsonGenerator96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(indenter68);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(indenter91);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
    }

    @Test
    public void test3561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3561");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.ObjectCodec objectCodec58 = null;
        java.io.OutputStream outputStream59 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString61 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray66 = new char[] { 'a', ' ', '#', '4' };
        int int68 = serializedString61.appendUnquoted(charArray66, 0);
        java.lang.String str69 = serializedString61.getValue();
        char[] charArray70 = serializedString61.asQuotedChars();
        byte[] byteArray71 = serializedString61.asUnquotedUTF8();
        byte[] byteArray72 = serializedString61.asUnquotedUTF8();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator75 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext12, 0, objectCodec58, outputStream59, byteArray72, 0, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str69, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray70);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray70), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray70), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray70), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
    }

    @Test
    public void test3562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3562");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter24 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter25 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter26 = defaultPrettyPrinter25.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter27 = defaultPrettyPrinter25.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator28 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter27.writeRootValueSeparator(jsonGenerator28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter24);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter25);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter26);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter27);
    }

    @Test
    public void test3563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3563");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        com.fasterxml.jackson.core.ObjectCodec objectCodec87 = uTF8StreamJsonParser84.getCodec();
        java.lang.String str88 = uTF8StreamJsonParser84.getValueAsString();
        boolean boolean89 = uTF8StreamJsonParser84.isClosed();
        com.fasterxml.jackson.core.JsonToken jsonToken90 = uTF8StreamJsonParser84.getLastClearedToken();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertNull(objectCodec87);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNull(jsonToken90);
    }

    @Test
    public void test3564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3564");
        // The following exception was thrown during execution in test generation
        try {
            long long1 = com.fasterxml.jackson.core.io.NumberInput.parseLong("?");
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"?\"");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
    }

    @Test
    public void test3565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3565");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        com.fasterxml.jackson.core.ObjectCodec objectCodec87 = uTF8StreamJsonParser84.getCodec();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext88 = uTF8StreamJsonParser84.getParsingContext();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertNull(objectCodec87);
        org.junit.Assert.assertNotNull(jsonStreamContext88);
    }

    @Test
    public void test3566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3566");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        boolean boolean87 = uTF8StreamJsonParser84.isClosed();
        com.fasterxml.jackson.core.JsonParser jsonParser89 = uTF8StreamJsonParser84.setFeatureMask(24);
        java.lang.String str90 = uTF8StreamJsonParser84.getCurrentName();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(jsonParser89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "[Source: hi!; line: 52, column: 1]" + "'", str90, "[Source: hi!; line: 52, column: 1]");
    }

    @Test
    public void test3567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3567");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding27 = iOContext12.getEncoding();
        com.fasterxml.jackson.core.io.IOContext iOContext28 = null;
        java.io.InputStream inputStream29 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString31 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray36 = new char[] { 'a', ' ', '#', '4' };
        int int38 = serializedString31.appendUnquoted(charArray36, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString40 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray45 = new char[] { 'a', ' ', '#', '4' };
        int int47 = serializedString40.appendUnquoted(charArray45, 0);
        boolean boolean48 = serializedString31.equals((java.lang.Object) serializedString40);
        com.fasterxml.jackson.core.io.SerializedString serializedString50 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int57 = serializedString50.appendQuotedUTF8(byteArray55, 0);
        char[] charArray58 = serializedString50.asQuotedChars();
        boolean boolean59 = serializedString31.equals((java.lang.Object) serializedString50);
        char[] charArray60 = serializedString31.asQuotedChars();
        byte[] byteArray61 = serializedString31.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext28, inputStream29, byteArray61, (int) (byte) 100, (int) (short) 100);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper67 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray61, 1, 72);
        com.fasterxml.jackson.core.io.SerializedString serializedString69 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray74 = new char[] { 'a', ' ', '#', '4' };
        int int76 = serializedString69.appendUnquoted(charArray74, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString78 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray83 = new char[] { 'a', ' ', '#', '4' };
        int int85 = serializedString78.appendUnquoted(charArray83, 0);
        boolean boolean86 = serializedString69.equals((java.lang.Object) serializedString78);
        com.fasterxml.jackson.core.io.SerializedString serializedString88 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray93 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int95 = serializedString88.appendQuotedUTF8(byteArray93, 0);
        char[] charArray96 = serializedString88.asQuotedChars();
        boolean boolean97 = serializedString69.equals((java.lang.Object) serializedString88);
        char[] charArray98 = serializedString69.asQuotedChars();
        // The following exception was thrown during execution in test generation
        try {
            iOContext12.releaseConcatBuffer(charArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Trying to release buffer not owned by the context");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(jsonEncoding27);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(charArray74);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray74), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray74), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray74), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(charArray83);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray83), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray83), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray83), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
        org.junit.Assert.assertNotNull(charArray96);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray96), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray96), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray96), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertNotNull(charArray98);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray98), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray98), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray98), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test3568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3568");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        int int94 = uTF8StreamJsonParser84.getValueAsInt((int) '#');
        com.fasterxml.jackson.core.JsonLocation jsonLocation95 = uTF8StreamJsonParser84.getTokenLocation();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Boolean boolean96 = uTF8StreamJsonParser84.nextBooleanValue();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(version92);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 35 + "'", int94 == 35);
        org.junit.Assert.assertNotNull(jsonLocation95);
    }

    @Test
    public void test3569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3569");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.FormatSchema formatSchema93 = null;
        boolean boolean94 = uTF8StreamJsonParser84.canUseSchema(formatSchema93);
        com.fasterxml.jackson.core.Base64Variant base64Variant95 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray96 = uTF8StreamJsonParser84.getBinaryValue(base64Variant95);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(version92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test3570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3570");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = defaultPrettyPrinter1._withSpaces(false);
        com.fasterxml.jackson.core.io.SerializedString serializedString5 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray10 = new char[] { 'a', ' ', '#', '4' };
        int int12 = serializedString5.appendUnquoted(charArray10, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString14 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray19 = new char[] { 'a', ' ', '#', '4' };
        int int21 = serializedString14.appendUnquoted(charArray19, 0);
        boolean boolean22 = serializedString5.equals((java.lang.Object) serializedString14);
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        boolean boolean33 = serializedString5.equals((java.lang.Object) serializedString24);
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int42 = serializedString35.appendQuotedUTF8(byteArray40, 0);
        byte[] byteArray43 = serializedString35.asUnquotedUTF8();
        int int45 = serializedString24.appendQuotedUTF8(byteArray43, (int) '#');
        java.lang.String str46 = serializedString24.getValue();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter47 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter1, (com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.io.SerializedString serializedString49 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray54 = new char[] { 'a', ' ', '#', '4' };
        int int56 = serializedString49.appendUnquoted(charArray54, 0);
        byte[] byteArray63 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 0, (byte) 0 };
        int int65 = serializedString49.appendUnquotedUTF8(byteArray63, (int) (short) -1);
        byte[] byteArray66 = serializedString49.asUnquotedUTF8();
        int int68 = serializedString24.appendUnquotedUTF8(byteArray66, 0);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter3);
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str46, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[10, 1, 10, -1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 47 + "'", int68 == 47);
    }

    @Test
    public void test3571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3571");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        java.lang.String str80 = textBuffer76.toString();
        boolean boolean81 = textBuffer76.hasTextAsCharacters();
        char[] charArray82 = textBuffer76.finishCurrentSegment();
        java.lang.String str83 = textBuffer76.toString();
        textBuffer76.resetWithEmpty();
        textBuffer76.append("com.fasterxml.jackson.core.JsonParseException: hi!\n at [Source: /; line: 0, column: 0]", 0, (int) ' ');
        char[] charArray89 = textBuffer76.finishCurrentSegment();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "a" + "'", str80, "a");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "a" + "'", str83, "a");
        org.junit.Assert.assertNotNull(charArray89);
    }

    @Test
    public void test3572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3572");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext91 = uTF8StreamJsonParser84.getParsingContext();
        java.lang.String str92 = uTF8StreamJsonParser84.getCurrentName();
        com.fasterxml.jackson.core.Base64Variant base64Variant93 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray94 = uTF8StreamJsonParser84.getBinaryValue(base64Variant93);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNotNull(jsonStreamContext91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "[Source: hi!; line: 52, column: 1]" + "'", str92, "[Source: hi!; line: 52, column: 1]");
    }

    @Test
    public void test3573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3573");
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext2 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext5 = jsonReadContext2.createChildArrayContext((int) (short) 1, 10);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler6 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString8 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray13 = new char[] { 'a', ' ', '#', '4' };
        int int15 = serializedString8.appendUnquoted(charArray13, 0);
        java.lang.String str16 = serializedString8.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler6, (java.lang.Object) serializedString8, false);
        byte[] byteArray19 = null;
        iOContext18.releaseReadIOBuffer(byteArray19);
        com.fasterxml.jackson.core.io.SerializedString serializedString22 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int29 = serializedString22.appendQuotedUTF8(byteArray27, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper32 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext18, byteArray27, 1, (int) (short) 1);
        com.fasterxml.jackson.core.JsonLocation jsonLocation33 = jsonReadContext5.getStartLocation((java.lang.Object) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int42 = serializedString35.appendQuotedUTF8(byteArray40, 0);
        char[] charArray43 = serializedString35.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString45 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int52 = serializedString45.appendQuotedUTF8(byteArray50, 0);
        int int54 = serializedString35.appendUnquotedUTF8(byteArray50, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter55 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString35);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter56 = defaultPrettyPrinter55._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString58 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int65 = serializedString58.appendQuotedUTF8(byteArray63, 0);
        char[] charArray66 = serializedString58.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString68 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int75 = serializedString68.appendQuotedUTF8(byteArray73, 0);
        int int77 = serializedString58.appendUnquotedUTF8(byteArray73, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter78 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString58);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter79 = defaultPrettyPrinter78._objectIndenter;
        defaultPrettyPrinter55.indentObjectsWith(indenter79);
        defaultPrettyPrinter55.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter83 = defaultPrettyPrinter55.withoutSpacesInObjectEntries();
        boolean boolean84 = jsonLocation33.equals((java.lang.Object) defaultPrettyPrinter55);
        boolean boolean85 = defaultPrettyPrinter55._spacesInObjectEntries;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator86 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter55.writeArrayValueSeparator(jsonGenerator86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(jsonReadContext2);
        org.junit.Assert.assertNotNull(jsonReadContext5);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str16, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(jsonLocation33);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(indenter56);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(indenter79);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test3574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3574");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        com.fasterxml.jackson.core.ObjectCodec objectCodec87 = uTF8StreamJsonParser84.getCodec();
        java.lang.String str88 = uTF8StreamJsonParser84.getValueAsString();
        boolean boolean89 = uTF8StreamJsonParser84.isClosed();
        boolean boolean90 = uTF8StreamJsonParser84.getValueAsBoolean();
        com.fasterxml.jackson.core.Version version91 = uTF8StreamJsonParser84.version();
        double double93 = uTF8StreamJsonParser84.getValueAsDouble((double) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken94 = uTF8StreamJsonParser84.nextToken();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertNull(objectCodec87);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(version91);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 1.0d + "'", double93 == 1.0d);
    }

    @Test
    public void test3575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3575");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        com.fasterxml.jackson.core.Version version90 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.JsonLocation jsonLocation91 = uTF8StreamJsonParser84.getTokenLocation();
        java.lang.String str92 = uTF8StreamJsonParser84.getValueAsString();
        java.lang.Object obj93 = uTF8StreamJsonParser84.getInputSource();
        java.lang.String str95 = uTF8StreamJsonParser84.getValueAsString("");
        com.fasterxml.jackson.core.Base64Variant base64Variant96 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray97 = uTF8StreamJsonParser84.getBinaryValue(base64Variant96);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(version90);
        org.junit.Assert.assertNotNull(jsonLocation91);
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertNull(obj93);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
    }

    @Test
    public void test3576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3576");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.FormatSchema formatSchema93 = null;
        boolean boolean94 = uTF8StreamJsonParser84.canUseSchema(formatSchema93);
        com.fasterxml.jackson.core.JsonParser jsonParser95 = uTF8StreamJsonParser84.skipChildren();
        boolean boolean97 = uTF8StreamJsonParser84.getValueAsBoolean(false);
        boolean boolean98 = uTF8StreamJsonParser84.hasTextCharacters();
        com.fasterxml.jackson.core.ObjectCodec objectCodec99 = uTF8StreamJsonParser84.getCodec();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(version92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(jsonParser95);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertNull(objectCodec99);
    }

    @Test
    public void test3577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3577");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext89 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonParser jsonParser91 = uTF8StreamJsonParser84.setFeatureMask(10);
        int int92 = uTF8StreamJsonParser84.getTokenColumnNr();
        uTF8StreamJsonParser84.clearCurrentToken();
        uTF8StreamJsonParser84.overrideCurrentName("[Source: #; line: 1, column: 1]");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNotNull(jsonStreamContext89);
        org.junit.Assert.assertNotNull(jsonParser91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
    }

    @Test
    public void test3578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3578");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        java.io.Writer writer93 = null;
        int int94 = uTF8StreamJsonParser84.releaseBuffered(writer93);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
    }

    @Test
    public void test3579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3579");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        textBuffer76.setCurrentLength((int) (byte) 0);
        java.lang.String str82 = textBuffer76.toString();
        char[] charArray83 = textBuffer76.emptyAndGetCurrentSegment();
        boolean boolean84 = textBuffer76.hasTextAsCharacters();
        char[] charArray85 = textBuffer76.contentsAsArray();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(charArray83);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray83), "a
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray83), "a
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(charArray85);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray85), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray85), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray85), "[]");
    }

    @Test
    public void test3580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3580");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        textBuffer76.setCurrentLength((int) (byte) 0);
        textBuffer76.ensureNotShared();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
    }

    @Test
    public void test3581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3581");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.FormatSchema formatSchema93 = null;
        boolean boolean94 = uTF8StreamJsonParser84.canUseSchema(formatSchema93);
        com.fasterxml.jackson.core.JsonParser jsonParser95 = uTF8StreamJsonParser84.skipChildren();
        // The following exception was thrown during execution in test generation
        try {
            int int96 = uTF8StreamJsonParser84.getIntValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(version92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(jsonParser95);
    }

    @Test
    public void test3582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3582");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext89 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonParser jsonParser91 = uTF8StreamJsonParser84.setFeatureMask(10);
        com.fasterxml.jackson.core.util.ByteArrayBuilder byteArrayBuilder92 = uTF8StreamJsonParser84._getByteArrayBuilder();
        boolean boolean93 = uTF8StreamJsonParser84.canReadTypeId();
        java.lang.String str95 = uTF8StreamJsonParser84.getValueAsString("hi!");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNotNull(jsonStreamContext89);
        org.junit.Assert.assertNotNull(jsonParser91);
        org.junit.Assert.assertNotNull(byteArrayBuilder92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "hi!" + "'", str95, "hi!");
    }

    @Test
    public void test3583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3583");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec88 = uTF8StreamJsonParser84.getCodec();
        int int89 = uTF8StreamJsonParser84.getTextOffset();
        java.lang.Object obj90 = uTF8StreamJsonParser84.getEmbeddedObject();
        boolean boolean91 = uTF8StreamJsonParser84.hasTextCharacters();
        java.lang.String str93 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.ObjectCodec objectCodec94 = uTF8StreamJsonParser84.getCodec();
        java.lang.Object obj95 = uTF8StreamJsonParser84.getTypeId();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(objectCodec88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str93, "com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNull(objectCodec94);
        org.junit.Assert.assertNull(obj95);
    }

    @Test
    public void test3584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3584");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        char[] charArray89 = uTF8StreamJsonParser84.getTextCharacters();
        int int90 = uTF8StreamJsonParser84.getTextLength();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNull(charArray89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test3585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3585");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        com.fasterxml.jackson.core.io.SerializedString serializedString3 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray8 = new char[] { 'a', ' ', '#', '4' };
        int int10 = serializedString3.appendUnquoted(charArray8, 0);
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 0, (byte) 0 };
        int int19 = serializedString3.appendUnquotedUTF8(byteArray17, (int) (short) -1);
        char[] charArray26 = new char[] { '#', '#', 'a', 'a', ' ', '#' };
        boolean boolean30 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray26, (int) (byte) -1, 0, true);
        int int32 = serializedString3.appendUnquoted(charArray26, 100);
        int int34 = serializedString1.appendUnquoted(charArray26, (int) '#');
        boolean boolean38 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray26, (int) (byte) 1, 0, true);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal39 = com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(charArray26);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 1, 10, -1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "##aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "##aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[#, #, a, a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test3586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3586");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        java.lang.String str80 = textBuffer76.toString();
        char[] charArray81 = textBuffer76.getTextBuffer();
        textBuffer76.setCurrentLength((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            textBuffer76.append("com.fasterxml.jackson.core.JsonParseException: hi!\n at [Source: /; line: 0, column: 0]", (int) 'a', 34);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 131");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "a" + "'", str80, "a");
        org.junit.Assert.assertNotNull(charArray81);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray81), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray81), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray81), "[a]");
    }

    @Test
    public void test3587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3587");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler1 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString3 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray8 = new char[] { 'a', ' ', '#', '4' };
        int int10 = serializedString3.appendUnquoted(charArray8, 0);
        java.lang.String str11 = serializedString3.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext13 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler1, (java.lang.Object) serializedString3, false);
        byte[] byteArray14 = null;
        iOContext13.releaseReadIOBuffer(byteArray14);
        com.fasterxml.jackson.core.io.SerializedString serializedString17 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int24 = serializedString17.appendQuotedUTF8(byteArray22, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper27 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext13, byteArray22, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler28 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString30 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray35 = new char[] { 'a', ' ', '#', '4' };
        int int37 = serializedString30.appendUnquoted(charArray35, 0);
        java.lang.String str38 = serializedString30.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext40 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler28, (java.lang.Object) serializedString30, false);
        byte[] byteArray41 = null;
        iOContext40.releaseReadIOBuffer(byteArray41);
        com.fasterxml.jackson.core.io.SerializedString serializedString44 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int51 = serializedString44.appendQuotedUTF8(byteArray49, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper54 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext40, byteArray49, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper57 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext13, byteArray49, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext58 = null;
        java.io.InputStream inputStream59 = null;
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream65 = new com.fasterxml.jackson.core.io.MergedStream(iOContext58, inputStream59, byteArray62, 0, (int) '#');
        mergedStream65.mark((int) (short) 10);
        mergedStream65.reset();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int77 = serializedString70.appendQuotedUTF8(byteArray75, 0);
        char[] charArray78 = serializedString70.asQuotedChars();
        byte[] byteArray83 = new byte[] { (byte) 10, (byte) 1, (byte) 0, (byte) 100 };
        int int85 = serializedString70.appendUnquotedUTF8(byteArray83, (int) (short) 10);
        com.fasterxml.jackson.core.io.MergedStream mergedStream88 = new com.fasterxml.jackson.core.io.MergedStream(iOContext13, (java.io.InputStream) mergedStream65, byteArray83, (int) ' ', 34);
        com.fasterxml.jackson.core.io.IOContext iOContext90 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) mergedStream88, false);
        int int91 = mergedStream88.available();
        // The following exception was thrown during execution in test generation
        try {
            long long93 = mergedStream88.skip((long) 72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Trying to release buffer not owned by the context");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str11, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str38, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 0]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[10, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2 + "'", int91 == 2);
    }

    @Test
    public void test3588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3588");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        com.fasterxml.jackson.core.Version version89 = uTF8StreamJsonParser84.version();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertNotNull(version89);
    }

    @Test
    public void test3589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3589");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter24 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter25 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter26 = defaultPrettyPrinter25.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter27 = defaultPrettyPrinter25.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter28 = defaultPrettyPrinter27.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter29 = defaultPrettyPrinter28.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter lf2SpacesIndenter31 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter("a");
        defaultPrettyPrinter29.indentArraysWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) lf2SpacesIndenter31);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter24);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter25);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter26);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter27);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter28);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter29);
    }

    @Test
    public void test3590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3590");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        java.lang.String str9 = serializedString1.getValue();
        com.fasterxml.jackson.core.JsonLocation jsonLocation11 = null;
        java.lang.Throwable throwable12 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException13 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation11, throwable12);
        boolean boolean14 = serializedString1.equals((java.lang.Object) jsonLocation11);
        byte[] byteArray15 = serializedString1.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString17 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray22 = new char[] { 'a', ' ', '#', '4' };
        int int24 = serializedString17.appendUnquoted(charArray22, 0);
        java.lang.String str25 = serializedString17.getValue();
        com.fasterxml.jackson.core.JsonLocation jsonLocation27 = null;
        java.lang.Throwable throwable28 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException29 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation27, throwable28);
        boolean boolean30 = serializedString17.equals((java.lang.Object) jsonLocation27);
        byte[] byteArray31 = serializedString17.asUnquotedUTF8();
        int int33 = serializedString1.appendQuotedUTF8(byteArray31, 34);
        int int34 = serializedString1.charLength();
        com.fasterxml.jackson.core.io.SerializedString serializedString36 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray37 = serializedString36.asUnquotedUTF8();
        java.lang.String str38 = serializedString36.toString();
        char[] charArray39 = serializedString36.asQuotedChars();
        int int41 = serializedString1.appendQuoted(charArray39, 47);
        byte[] byteArray42 = serializedString1.asQuotedUTF8();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter43 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        java.lang.String str44 = serializedString1.getValue();
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str9, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str25, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 47 + "'", int34 == 47);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str38, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str44, "com.fasterxml.jackson.core.JsonParseException: ");
    }

    @Test
    public void test3591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3591");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext93 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonToken jsonToken94 = uTF8StreamJsonParser84.getCurrentToken();
        java.lang.String str96 = uTF8StreamJsonParser84.getValueAsString("[Source: true; line: 0, column: 100]");
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(version92);
        org.junit.Assert.assertNotNull(jsonStreamContext93);
        org.junit.Assert.assertNull(jsonToken94);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "[Source: true; line: 0, column: 100]" + "'", str96, "[Source: true; line: 0, column: 100]");
    }

    @Test
    public void test3592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3592");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        int int89 = uTF8StreamJsonParser84.getTextOffset();
        double double91 = uTF8StreamJsonParser84.getValueAsDouble((double) 10.0f);
        com.fasterxml.jackson.core.JsonLocation jsonLocation92 = uTF8StreamJsonParser84.getCurrentLocation();
        long long94 = uTF8StreamJsonParser84.getValueAsLong((long) (byte) 0);
        com.fasterxml.jackson.core.ObjectCodec objectCodec95 = null;
        uTF8StreamJsonParser84.setCodec(objectCodec95);
        com.fasterxml.jackson.core.JsonLocation jsonLocation97 = uTF8StreamJsonParser84.getCurrentLocation();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 10.0d + "'", double91 == 10.0d);
        org.junit.Assert.assertNotNull(jsonLocation92);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 0L + "'", long94 == 0L);
        org.junit.Assert.assertNotNull(jsonLocation97);
    }

    @Test
    public void test3593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3593");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = serializedString20.asUnquotedUTF8();
        int int23 = serializedString1.appendQuotedUTF8(byteArray21, (int) (short) 1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter24 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter25 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter27 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter29 = defaultPrettyPrinter27._withSpaces(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter31 = defaultPrettyPrinter27._withSpaces(false);
        com.fasterxml.jackson.core.io.SerializedString serializedString33 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int40 = serializedString33.appendQuotedUTF8(byteArray38, 0);
        char[] charArray41 = serializedString33.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        int int52 = serializedString33.appendUnquotedUTF8(byteArray48, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter53 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString33);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter54 = defaultPrettyPrinter53._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString56 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int63 = serializedString56.appendQuotedUTF8(byteArray61, 0);
        char[] charArray64 = serializedString56.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString66 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int73 = serializedString66.appendQuotedUTF8(byteArray71, 0);
        int int75 = serializedString56.appendUnquotedUTF8(byteArray71, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter76 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString56);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter77 = defaultPrettyPrinter76._objectIndenter;
        defaultPrettyPrinter53.indentObjectsWith(indenter77);
        defaultPrettyPrinter31._objectIndenter = indenter77;
        defaultPrettyPrinter25._objectIndenter = indenter77;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter lf2SpacesIndenter82 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter("hi!");
        java.lang.String str83 = lf2SpacesIndenter82._lf;
        boolean boolean84 = lf2SpacesIndenter82.isInline();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter lf2SpacesIndenter86 = lf2SpacesIndenter82.withLinefeed("");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter87 = defaultPrettyPrinter25.withArrayIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) lf2SpacesIndenter86);
        boolean boolean88 = lf2SpacesIndenter86.isInline();
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter29);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter31);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(indenter54);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(charArray64);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray64), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray64), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray64), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(indenter77);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "hi!" + "'", str83, "hi!");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(lf2SpacesIndenter86);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test3594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3594");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        int int89 = uTF8StreamJsonParser84.getTextOffset();
        double double91 = uTF8StreamJsonParser84.getValueAsDouble((double) 10.0f);
        com.fasterxml.jackson.core.JsonLocation jsonLocation92 = uTF8StreamJsonParser84.getCurrentLocation();
        boolean boolean93 = uTF8StreamJsonParser84.canReadObjectId();
        int int94 = uTF8StreamJsonParser84.getFeatureMask();
        int int95 = uTF8StreamJsonParser84.getTextLength();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken96 = uTF8StreamJsonParser84.nextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 10.0d + "'", double91 == 10.0d);
        org.junit.Assert.assertNotNull(jsonLocation92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
    }

    @Test
    public void test3595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3595");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        int int89 = uTF8StreamJsonParser84.getTextOffset();
        double double91 = uTF8StreamJsonParser84.getValueAsDouble((double) 10.0f);
        com.fasterxml.jackson.core.JsonLocation jsonLocation92 = uTF8StreamJsonParser84.getCurrentLocation();
        long long93 = uTF8StreamJsonParser84.getValueAsLong();
        com.fasterxml.jackson.core.Version version94 = uTF8StreamJsonParser84.version();
        char[] charArray95 = uTF8StreamJsonParser84.getTextCharacters();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 10.0d + "'", double91 == 10.0d);
        org.junit.Assert.assertNotNull(jsonLocation92);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
        org.junit.Assert.assertNotNull(version94);
        org.junit.Assert.assertNull(charArray95);
    }

    @Test
    public void test3596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3596");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        java.lang.String str80 = textBuffer76.toString();
        char[] charArray81 = textBuffer76.getTextBuffer();
        char[] charArray82 = textBuffer76.getTextBuffer();
        textBuffer76.ensureNotShared();
        java.lang.String str84 = textBuffer76.contentsAsString();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "a" + "'", str80, "a");
        org.junit.Assert.assertNotNull(charArray81);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray81), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray81), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray81), "[a]");
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray82), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray82), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray82), "[a]");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "a" + "'", str84, "a");
    }

    @Test
    public void test3597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3597");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonToken jsonToken88 = uTF8StreamJsonParser84.getCurrentToken();
        uTF8StreamJsonParser84.clearCurrentToken();
        int int90 = uTF8StreamJsonParser84.getTextOffset();
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.FormatSchema formatSchema92 = uTF8StreamJsonParser84.getSchema();
        com.fasterxml.jackson.core.Version version93 = uTF8StreamJsonParser84.version();
        double double94 = uTF8StreamJsonParser84.getValueAsDouble();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(jsonToken88);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNull(formatSchema92);
        org.junit.Assert.assertNotNull(version93);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
    }

    @Test
    public void test3598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3598");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.ObjectCodec objectCodec86 = uTF8StreamJsonParser84.getCodec();
        uTF8StreamJsonParser84.overrideCurrentName("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        java.lang.String str90 = uTF8StreamJsonParser84.getValueAsString("[Source: #; line: 1, column: 1]");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNull(objectCodec86);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "[Source: #; line: 1, column: 1]" + "'", str90, "[Source: #; line: 1, column: 1]");
    }

    @Test
    public void test3599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3599");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        java.lang.String str89 = uTF8StreamJsonParser84.getCurrentName();
        boolean boolean90 = uTF8StreamJsonParser84.getValueAsBoolean();
        int int91 = uTF8StreamJsonParser84.getTokenLineNr();
        // The following exception was thrown during execution in test generation
        try {
            float float92 = uTF8StreamJsonParser84.getFloatValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "[Source: hi!; line: 52, column: 1]" + "'", str89, "[Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
    }

    @Test
    public void test3600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3600");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        java.lang.String str80 = textBuffer76.toString();
        boolean boolean81 = textBuffer76.hasTextAsCharacters();
        char[] charArray82 = textBuffer76.finishCurrentSegment();
        java.lang.String str83 = textBuffer76.toString();
        textBuffer76.resetWithEmpty();
        char[] charArray85 = textBuffer76.expandCurrentSegment();
        char[] charArray86 = textBuffer76.emptyAndGetCurrentSegment();
        textBuffer76.setCurrentLength(35);
        int int89 = textBuffer76.getTextOffset();
        char[] charArray90 = textBuffer76.emptyAndGetCurrentSegment();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "a" + "'", str80, "a");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "a" + "'", str83, "a");
        org.junit.Assert.assertNotNull(charArray85);
        org.junit.Assert.assertNotNull(charArray86);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(charArray90);
    }

    @Test
    public void test3601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3601");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        mergedStream64.mark((int) (short) 10);
        mergedStream64.reset();
        com.fasterxml.jackson.core.io.SerializedString serializedString69 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int76 = serializedString69.appendQuotedUTF8(byteArray74, 0);
        char[] charArray77 = serializedString69.asQuotedChars();
        byte[] byteArray82 = new byte[] { (byte) 10, (byte) 1, (byte) 0, (byte) 100 };
        int int84 = serializedString69.appendUnquotedUTF8(byteArray82, (int) (short) 10);
        com.fasterxml.jackson.core.io.MergedStream mergedStream87 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray82, (int) ' ', 34);
        boolean boolean88 = iOContext12.isResourceManaged();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray89 = iOContext12.allocWriteEncodingBuffer();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[10, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test3602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3602");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler1 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString3 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray8 = new char[] { 'a', ' ', '#', '4' };
        int int10 = serializedString3.appendUnquoted(charArray8, 0);
        java.lang.String str11 = serializedString3.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext13 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler1, (java.lang.Object) serializedString3, false);
        byte[] byteArray14 = null;
        iOContext13.releaseReadIOBuffer(byteArray14);
        com.fasterxml.jackson.core.io.SerializedString serializedString17 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int24 = serializedString17.appendQuotedUTF8(byteArray22, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper27 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext13, byteArray22, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler28 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString30 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray35 = new char[] { 'a', ' ', '#', '4' };
        int int37 = serializedString30.appendUnquoted(charArray35, 0);
        java.lang.String str38 = serializedString30.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext40 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler28, (java.lang.Object) serializedString30, false);
        byte[] byteArray41 = null;
        iOContext40.releaseReadIOBuffer(byteArray41);
        com.fasterxml.jackson.core.io.SerializedString serializedString44 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int51 = serializedString44.appendQuotedUTF8(byteArray49, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper54 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext40, byteArray49, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper57 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext13, byteArray49, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext58 = null;
        java.io.InputStream inputStream59 = null;
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream65 = new com.fasterxml.jackson.core.io.MergedStream(iOContext58, inputStream59, byteArray62, 0, (int) '#');
        long long67 = mergedStream65.skip((long) (short) 1);
        int int68 = mergedStream65.available();
        mergedStream65.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString72 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray73 = serializedString72.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream76 = new com.fasterxml.jackson.core.io.MergedStream(iOContext13, (java.io.InputStream) mergedStream65, byteArray73, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream78 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec79 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer80 = null;
        byte[] byteArray81 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser85 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext13, (int) (short) 1, inputStream78, objectCodec79, bytesToNameCanonicalizer80, byteArray81, (int) (byte) -1, (int) (short) 10, false);
        int int86 = uTF8StreamJsonParser85.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation87 = uTF8StreamJsonParser85.getCurrentLocation();
        java.lang.Throwable throwable88 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException89 = new com.fasterxml.jackson.core.JsonParseException("[Source: true; line: 0, column: 100]", jsonLocation87, throwable88);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str11, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str38, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1L + "'", long67 == 1L);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 34 + "'", int68 == 34);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(jsonLocation87);
    }

    @Test
    public void test3603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3603");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonParseException: ");
        com.fasterxml.jackson.core.SerializableString serializableString2 = null;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter1, serializableString2);
        com.fasterxml.jackson.core.io.SerializedString serializedString5 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int12 = serializedString5.appendQuotedUTF8(byteArray10, 0);
        char[] charArray13 = serializedString5.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString15 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int22 = serializedString15.appendQuotedUTF8(byteArray20, 0);
        int int24 = serializedString5.appendUnquotedUTF8(byteArray20, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter25 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString5);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter26 = defaultPrettyPrinter25._objectIndenter;
        defaultPrettyPrinter3._arrayIndenter = indenter26;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter28 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter3);
        com.fasterxml.jackson.core.io.SerializedString serializedString30 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int37 = serializedString30.appendQuotedUTF8(byteArray35, 0);
        char[] charArray38 = serializedString30.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString40 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int47 = serializedString40.appendQuotedUTF8(byteArray45, 0);
        int int49 = serializedString30.appendUnquotedUTF8(byteArray45, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter50 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString30);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter51 = defaultPrettyPrinter50._objectIndenter;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter52 = defaultPrettyPrinter50.withSpacesInObjectEntries();
        com.fasterxml.jackson.core.SerializableString serializableString53 = defaultPrettyPrinter50._rootSeparator;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter54 = defaultPrettyPrinter50._objectIndenter;
        boolean boolean55 = indenter54.isInline();
        defaultPrettyPrinter3._arrayIndenter = indenter54;
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(indenter26);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(indenter51);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter52);
        org.junit.Assert.assertNotNull(serializableString53);
        org.junit.Assert.assertNotNull(indenter54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test3604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3604");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        char[] charArray19 = serializedString1.asQuotedChars();
        char[] charArray20 = serializedString1.asQuotedChars();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal21 = com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(charArray20);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test3605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3605");
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext2 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        int int3 = jsonReadContext2.getCurrentIndex();
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext6 = jsonReadContext2.createChildArrayContext(0, 0);
        java.lang.String str7 = jsonReadContext6.getCurrentName();
        java.lang.String str8 = jsonReadContext6.getCurrentName();
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler9 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray16 = new char[] { 'a', ' ', '#', '4' };
        int int18 = serializedString11.appendUnquoted(charArray16, 0);
        java.lang.String str19 = serializedString11.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext21 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler9, (java.lang.Object) serializedString11, false);
        byte[] byteArray22 = null;
        iOContext21.releaseReadIOBuffer(byteArray22);
        com.fasterxml.jackson.core.io.SerializedString serializedString25 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int32 = serializedString25.appendQuotedUTF8(byteArray30, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper35 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext21, byteArray30, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler36 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString38 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray43 = new char[] { 'a', ' ', '#', '4' };
        int int45 = serializedString38.appendUnquoted(charArray43, 0);
        java.lang.String str46 = serializedString38.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext48 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler36, (java.lang.Object) serializedString38, false);
        byte[] byteArray49 = null;
        iOContext48.releaseReadIOBuffer(byteArray49);
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int59 = serializedString52.appendQuotedUTF8(byteArray57, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper62 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext48, byteArray57, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper65 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext21, byteArray57, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext66 = null;
        java.io.InputStream inputStream67 = null;
        byte[] byteArray70 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream73 = new com.fasterxml.jackson.core.io.MergedStream(iOContext66, inputStream67, byteArray70, 0, (int) '#');
        long long75 = mergedStream73.skip((long) (short) 1);
        int int76 = mergedStream73.available();
        mergedStream73.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString80 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray81 = serializedString80.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream84 = new com.fasterxml.jackson.core.io.MergedStream(iOContext21, (java.io.InputStream) mergedStream73, byteArray81, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream86 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec87 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer88 = null;
        byte[] byteArray89 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser93 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext21, (int) (short) 1, inputStream86, objectCodec87, bytesToNameCanonicalizer88, byteArray89, (int) (byte) -1, (int) (short) 10, false);
        com.fasterxml.jackson.core.JsonLocation jsonLocation94 = jsonReadContext6.getStartLocation((java.lang.Object) false);
        long long95 = jsonLocation94.getCharOffset();
        org.junit.Assert.assertNotNull(jsonReadContext2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(jsonReadContext6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str19, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str46, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1L + "'", long75 == 1L);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 34 + "'", int76 == 34);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation94);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + (-1L) + "'", long95 == (-1L));
    }

    @Test
    public void test3606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3606");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        boolean boolean81 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray77, 34, (int) '4', false);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test3607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3607");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        char[] charArray89 = uTF8StreamJsonParser84.getTextCharacters();
        java.lang.String str90 = uTF8StreamJsonParser84.getText();
        int int91 = uTF8StreamJsonParser84.getFeatureMask();
        // The following exception was thrown during execution in test generation
        try {
            byte byte92 = uTF8StreamJsonParser84.getByteValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNull(charArray89);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
    }

    @Test
    public void test3608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3608");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.ObjectCodec objectCodec89 = uTF8StreamJsonParser84.getCodec();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNull(objectCodec89);
    }

    @Test
    public void test3609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3609");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        boolean boolean23 = defaultPrettyPrinter21._spacesInObjectEntries;
        defaultPrettyPrinter21._spacesInObjectEntries = true;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator26 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.beforeObjectEntries(jsonGenerator26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test3610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3610");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        int int19 = serializedString10.charLength();
        com.fasterxml.jackson.core.io.SerializedString serializedString21 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray26 = new char[] { 'a', ' ', '#', '4' };
        int int28 = serializedString21.appendUnquoted(charArray26, 0);
        java.lang.String str29 = serializedString21.getValue();
        char[] charArray30 = serializedString21.asQuotedChars();
        byte[] byteArray31 = serializedString21.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString33 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray34 = serializedString33.asUnquotedUTF8();
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext37 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext40 = jsonReadContext37.createChildArrayContext((int) (short) 1, 10);
        boolean boolean41 = jsonReadContext40.inArray();
        boolean boolean42 = serializedString33.equals((java.lang.Object) boolean41);
        char[] charArray43 = serializedString33.asQuotedChars();
        int int45 = serializedString21.appendUnquoted(charArray43, 100);
        int int47 = serializedString10.appendUnquoted(charArray43, (int) 'a');
        com.fasterxml.jackson.core.io.SerializedString serializedString49 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int56 = serializedString49.appendQuotedUTF8(byteArray54, 0);
        int int58 = serializedString10.appendUnquotedUTF8(byteArray54, (int) (byte) -1);
        java.lang.String str59 = serializedString10.toString();
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 47 + "'", int19 == 47);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str29, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonReadContext37);
        org.junit.Assert.assertNotNull(jsonReadContext40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str59, "com.fasterxml.jackson.core.JsonParseException: ");
    }

    @Test
    public void test3611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3611");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        char[] charArray13 = serializedString2.asQuotedChars();
        java.lang.String str14 = serializedString2.toString();
        byte[] byteArray15 = serializedString2.asUnquotedUTF8();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str14, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
    }

    @Test
    public void test3612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3612");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        java.lang.String str80 = textBuffer76.toString();
        char[] charArray81 = textBuffer76.getCurrentSegment();
        int int82 = textBuffer76.getTextOffset();
        int int83 = textBuffer76.getTextOffset();
        textBuffer76.setCurrentLength(35);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "a" + "'", str80, "a");
        org.junit.Assert.assertNotNull(charArray81);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray81), "a
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray81), "a
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
    }

    @Test
    public void test3613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3613");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        java.lang.Object obj89 = uTF8StreamJsonParser84.getObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: ");
        int int93 = uTF8StreamJsonParser84.getValueAsInt(0);
        com.fasterxml.jackson.core.FormatSchema formatSchema94 = null;
        boolean boolean95 = uTF8StreamJsonParser84.canUseSchema(formatSchema94);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNull(obj89);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str91, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test3614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3614");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getValueAsInt();
        int int87 = uTF8StreamJsonParser84.getValueAsInt((int) 'a');
        boolean boolean89 = uTF8StreamJsonParser84.getValueAsBoolean(true);
        double double91 = uTF8StreamJsonParser84.getValueAsDouble((double) 47L);
        boolean boolean92 = uTF8StreamJsonParser84.isClosed();
        java.lang.String str93 = uTF8StreamJsonParser84.getText();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 97 + "'", int87 == 97);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 47.0d + "'", double91 == 47.0d);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNull(str93);
    }

    @Test
    public void test3615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3615");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        java.lang.String str80 = textBuffer76.toString();
        char[] charArray81 = textBuffer76.getCurrentSegment();
        int int82 = textBuffer76.getTextOffset();
        int int83 = textBuffer76.getCurrentSegmentSize();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "a" + "'", str80, "a");
        org.junit.Assert.assertNotNull(charArray81);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray81), "a
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray81), "a
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
    }

    @Test
    public void test3616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3616");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int27 = serializedString20.appendQuotedUTF8(byteArray25, 0);
        char[] charArray28 = serializedString20.asQuotedChars();
        boolean boolean29 = serializedString1.equals((java.lang.Object) serializedString20);
        char[] charArray36 = new char[] { '#', '#', 'a', 'a', ' ', '#' };
        boolean boolean40 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray36, (int) (byte) -1, 0, true);
        int int42 = serializedString20.appendQuoted(charArray36, (int) '#');
        com.fasterxml.jackson.core.io.SerializedString serializedString44 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray49 = new char[] { 'a', ' ', '#', '4' };
        int int51 = serializedString44.appendUnquoted(charArray49, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString53 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray58 = new char[] { 'a', ' ', '#', '4' };
        int int60 = serializedString53.appendUnquoted(charArray58, 0);
        boolean boolean61 = serializedString44.equals((java.lang.Object) serializedString53);
        com.fasterxml.jackson.core.io.SerializedString serializedString63 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray64 = serializedString63.asUnquotedUTF8();
        int int66 = serializedString44.appendQuotedUTF8(byteArray64, (int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString68 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray73 = new char[] { 'a', ' ', '#', '4' };
        int int75 = serializedString68.appendUnquoted(charArray73, 0);
        int int77 = serializedString44.appendUnquoted(charArray73, (int) 'a');
        byte[] byteArray78 = serializedString44.asUnquotedUTF8();
        int int80 = serializedString20.appendQuotedUTF8(byteArray78, 35);
        java.io.OutputStream outputStream81 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int82 = serializedString20.writeQuotedUTF8(outputStream81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "##aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "##aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[#, #, a, a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(charArray73);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray73), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray73), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray73), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
    }

    @Test
    public void test3617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3617");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        char[] charArray25 = new char[] { '#', '#', 'a', 'a', ' ', '#' };
        boolean boolean29 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray25, (int) (byte) -1, 0, true);
        int int31 = serializedString1.appendUnquoted(charArray25, (-1));
        int int32 = serializedString1.charLength();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray39 = new char[] { 'a', ' ', '#', '4' };
        int int41 = serializedString34.appendUnquoted(charArray39, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray48 = new char[] { 'a', ' ', '#', '4' };
        int int50 = serializedString43.appendUnquoted(charArray48, 0);
        boolean boolean51 = serializedString34.equals((java.lang.Object) serializedString43);
        char[] charArray58 = new char[] { '#', '#', 'a', 'a', ' ', '#' };
        boolean boolean62 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray58, (int) (byte) -1, 0, true);
        int int64 = serializedString34.appendUnquoted(charArray58, (-1));
        int int66 = serializedString1.appendUnquoted(charArray58, (int) (byte) 0);
        char[] charArray67 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int69 = serializedString1.appendUnquoted(charArray67, 97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "##aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "##aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[#, #, a, a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 47 + "'", int32 == 47);
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), "##aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), "##aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[#, #, a, a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
    }

    @Test
    public void test3618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3618");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        com.fasterxml.jackson.core.JsonLocation jsonLocation93 = uTF8StreamJsonParser84.getTokenLocation();
        java.lang.Object obj94 = uTF8StreamJsonParser84.getObjectId();
        com.fasterxml.jackson.core.JsonLocation jsonLocation95 = uTF8StreamJsonParser84.getCurrentLocation();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(jsonLocation93);
        org.junit.Assert.assertNull(obj94);
        org.junit.Assert.assertNotNull(jsonLocation95);
    }

    @Test
    public void test3619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3619");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        java.lang.String str9 = serializedString1.getValue();
        com.fasterxml.jackson.core.JsonLocation jsonLocation11 = null;
        java.lang.Throwable throwable12 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException13 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation11, throwable12);
        boolean boolean14 = serializedString1.equals((java.lang.Object) jsonLocation11);
        byte[] byteArray15 = serializedString1.asUnquotedUTF8();
        byte[] byteArray16 = serializedString1.asQuotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString18 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int25 = serializedString18.appendQuotedUTF8(byteArray23, 0);
        char[] charArray26 = serializedString18.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString28 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int35 = serializedString28.appendQuotedUTF8(byteArray33, 0);
        int int37 = serializedString18.appendUnquotedUTF8(byteArray33, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter38 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString18);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter39 = defaultPrettyPrinter38._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString41 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int48 = serializedString41.appendQuotedUTF8(byteArray46, 0);
        char[] charArray49 = serializedString41.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString51 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int58 = serializedString51.appendQuotedUTF8(byteArray56, 0);
        int int60 = serializedString41.appendUnquotedUTF8(byteArray56, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter61 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString41);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter62 = defaultPrettyPrinter61._objectIndenter;
        defaultPrettyPrinter38.indentObjectsWith(indenter62);
        defaultPrettyPrinter38.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter66 = defaultPrettyPrinter38.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter67 = null;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter68 = defaultPrettyPrinter38.withArrayIndenter(indenter67);
        com.fasterxml.jackson.core.SerializableString serializableString69 = defaultPrettyPrinter68._rootSeparator;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter70 = defaultPrettyPrinter68.createInstance();
        boolean boolean71 = serializedString1.equals((java.lang.Object) defaultPrettyPrinter68);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str9, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(indenter39);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(indenter62);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter66);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter68);
        org.junit.Assert.assertNotNull(serializableString69);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test3620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3620");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = defaultPrettyPrinter1._withSpaces(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter5 = defaultPrettyPrinter1._withSpaces(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter7 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonParseException: ");
        com.fasterxml.jackson.core.io.SerializedString serializedString9 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int16 = serializedString9.appendQuotedUTF8(byteArray14, 0);
        char[] charArray17 = serializedString9.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString19 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int26 = serializedString19.appendQuotedUTF8(byteArray24, 0);
        int int28 = serializedString9.appendUnquotedUTF8(byteArray24, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter29 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString9);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter30 = defaultPrettyPrinter29._objectIndenter;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter31 = defaultPrettyPrinter29.withSpacesInObjectEntries();
        com.fasterxml.jackson.core.SerializableString serializableString32 = defaultPrettyPrinter29._rootSeparator;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter33 = defaultPrettyPrinter29._objectIndenter;
        defaultPrettyPrinter7.indentArraysWith(indenter33);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter35 = defaultPrettyPrinter5.withObjectIndenter(indenter33);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter5.beforeObjectEntries(jsonGenerator36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultPrettyPrinter3);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter5);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(indenter30);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter31);
        org.junit.Assert.assertNotNull(serializableString32);
        org.junit.Assert.assertNotNull(indenter33);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter35);
    }

    @Test
    public void test3621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3621");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString47 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int54 = serializedString47.appendQuotedUTF8(byteArray52, 0);
        char[] charArray55 = serializedString47.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString57 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int64 = serializedString57.appendQuotedUTF8(byteArray62, 0);
        int int66 = serializedString47.appendUnquotedUTF8(byteArray62, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter67 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString47);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter68 = defaultPrettyPrinter67._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int77 = serializedString70.appendQuotedUTF8(byteArray75, 0);
        char[] charArray78 = serializedString70.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString80 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int87 = serializedString80.appendQuotedUTF8(byteArray85, 0);
        int int89 = serializedString70.appendUnquotedUTF8(byteArray85, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter90 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString70);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter91 = defaultPrettyPrinter90._objectIndenter;
        defaultPrettyPrinter67.indentObjectsWith(indenter91);
        defaultPrettyPrinter44._objectIndenter = indenter91;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter94 = defaultPrettyPrinter21.withArrayIndenter(indenter91);
        com.fasterxml.jackson.core.SerializableString serializableString95 = defaultPrettyPrinter21._rootSeparator;
        defaultPrettyPrinter21._spacesInObjectEntries = false;
        boolean boolean98 = defaultPrettyPrinter21._spacesInObjectEntries;
        com.fasterxml.jackson.core.SerializableString serializableString99 = defaultPrettyPrinter21._rootSeparator;
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(indenter68);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(indenter91);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter94);
        org.junit.Assert.assertNotNull(serializableString95);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertNotNull(serializableString99);
    }

    @Test
    public void test3622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3622");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        com.fasterxml.jackson.core.ObjectCodec objectCodec87 = uTF8StreamJsonParser84.getCodec();
        java.lang.String str88 = uTF8StreamJsonParser84.getValueAsString();
        boolean boolean89 = uTF8StreamJsonParser84.isClosed();
        boolean boolean90 = uTF8StreamJsonParser84.getValueAsBoolean();
        com.fasterxml.jackson.core.Version version91 = uTF8StreamJsonParser84.version();
        java.lang.String str92 = uTF8StreamJsonParser84.getCurrentName();
        com.fasterxml.jackson.core.Base64Variant base64Variant93 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray94 = uTF8StreamJsonParser84.getBinaryValue(base64Variant93);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertNull(objectCodec87);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(version91);
        org.junit.Assert.assertNull(str92);
    }

    @Test
    public void test3623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3623");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        java.lang.String str88 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]\n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.JsonLocation jsonLocation89 = uTF8StreamJsonParser84.getCurrentLocation();
        long long90 = jsonLocation89.getCharOffset();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]\n at [Source: hi!; line: 52, column: 1]" + "'", str88, "com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]\n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(jsonLocation89);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + (-2L) + "'", long90 == (-2L));
    }

    @Test
    public void test3624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3624");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler1 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString3 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray8 = new char[] { 'a', ' ', '#', '4' };
        int int10 = serializedString3.appendUnquoted(charArray8, 0);
        java.lang.String str11 = serializedString3.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext13 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler1, (java.lang.Object) serializedString3, false);
        byte[] byteArray14 = null;
        iOContext13.releaseReadIOBuffer(byteArray14);
        com.fasterxml.jackson.core.io.SerializedString serializedString17 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int24 = serializedString17.appendQuotedUTF8(byteArray22, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper27 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext13, byteArray22, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler28 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString30 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray35 = new char[] { 'a', ' ', '#', '4' };
        int int37 = serializedString30.appendUnquoted(charArray35, 0);
        java.lang.String str38 = serializedString30.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext40 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler28, (java.lang.Object) serializedString30, false);
        byte[] byteArray41 = null;
        iOContext40.releaseReadIOBuffer(byteArray41);
        com.fasterxml.jackson.core.io.SerializedString serializedString44 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int51 = serializedString44.appendQuotedUTF8(byteArray49, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper54 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext40, byteArray49, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper57 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext13, byteArray49, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext58 = null;
        java.io.InputStream inputStream59 = null;
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream65 = new com.fasterxml.jackson.core.io.MergedStream(iOContext58, inputStream59, byteArray62, 0, (int) '#');
        mergedStream65.mark((int) (short) 10);
        mergedStream65.reset();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int77 = serializedString70.appendQuotedUTF8(byteArray75, 0);
        char[] charArray78 = serializedString70.asQuotedChars();
        byte[] byteArray83 = new byte[] { (byte) 10, (byte) 1, (byte) 0, (byte) 100 };
        int int85 = serializedString70.appendUnquotedUTF8(byteArray83, (int) (short) 10);
        com.fasterxml.jackson.core.io.MergedStream mergedStream88 = new com.fasterxml.jackson.core.io.MergedStream(iOContext13, (java.io.InputStream) mergedStream65, byteArray83, (int) ' ', 34);
        com.fasterxml.jackson.core.io.IOContext iOContext90 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) mergedStream65, false);
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding91 = iOContext90.getEncoding();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray92 = iOContext90.allocWriteEncodingBuffer();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str11, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str38, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 0]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[10, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNull(jsonEncoding91);
    }

    @Test
    public void test3625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3625");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        long long93 = uTF8StreamJsonParser84.getTokenCharacterOffset();
        com.fasterxml.jackson.core.Version version94 = uTF8StreamJsonParser84.version();
        java.lang.String str95 = uTF8StreamJsonParser84.getText();
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.Version version97 = uTF8StreamJsonParser84.version();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken98 = uTF8StreamJsonParser84.nextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
        org.junit.Assert.assertNotNull(version94);
        org.junit.Assert.assertNull(str95);
        org.junit.Assert.assertNotNull(version97);
    }

    @Test
    public void test3626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3626");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        boolean boolean89 = uTF8StreamJsonParser84.hasTextCharacters();
        boolean boolean90 = uTF8StreamJsonParser84.isClosed();
        com.fasterxml.jackson.core.ObjectCodec objectCodec91 = uTF8StreamJsonParser84.getCodec();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(objectCodec91);
    }

    @Test
    public void test3627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3627");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext89 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonParser jsonParser91 = uTF8StreamJsonParser84.setFeatureMask(10);
        int int92 = jsonParser91.getTextLength();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNotNull(jsonStreamContext89);
        org.junit.Assert.assertNotNull(jsonParser91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test3628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3628");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        boolean boolean91 = uTF8StreamJsonParser84.hasTextCharacters();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test3629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3629");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext89 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonParser jsonParser91 = uTF8StreamJsonParser84.setFeatureMask(97);
        com.fasterxml.jackson.core.JsonParser.Feature feature92 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean93 = uTF8StreamJsonParser84.isEnabled(feature92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNotNull(jsonStreamContext89);
        org.junit.Assert.assertNotNull(jsonParser91);
    }

    @Test
    public void test3630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3630");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter24 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter25 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter lf2SpacesIndenter27 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter lf2SpacesIndenter29 = lf2SpacesIndenter27.withLinefeed("[Source: hi!; line: 52, column: 1]");
        defaultPrettyPrinter25.indentObjectsWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) lf2SpacesIndenter27);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter32 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonParseException: ");
        com.fasterxml.jackson.core.SerializableString serializableString33 = null;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter34 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter32, serializableString33);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter35 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter32);
        com.fasterxml.jackson.core.SerializableString serializableString36 = defaultPrettyPrinter35._rootSeparator;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter37 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter25, serializableString36);
        defaultPrettyPrinter25._nesting = 0;
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter24);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter25);
        org.junit.Assert.assertNotNull(lf2SpacesIndenter29);
        org.junit.Assert.assertNotNull(serializableString36);
    }

    @Test
    public void test3631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3631");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int27 = serializedString20.appendQuotedUTF8(byteArray25, 0);
        char[] charArray28 = serializedString20.asQuotedChars();
        boolean boolean29 = serializedString1.equals((java.lang.Object) serializedString20);
        char[] charArray36 = new char[] { '#', '#', 'a', 'a', ' ', '#' };
        boolean boolean40 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray36, (int) (byte) -1, 0, true);
        int int42 = serializedString20.appendQuoted(charArray36, (int) '#');
        char[] charArray43 = serializedString20.asQuotedChars();
        byte[] byteArray44 = serializedString20.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString46 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray51 = new char[] { 'a', ' ', '#', '4' };
        int int53 = serializedString46.appendUnquoted(charArray51, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString55 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray60 = new char[] { 'a', ' ', '#', '4' };
        int int62 = serializedString55.appendUnquoted(charArray60, 0);
        boolean boolean63 = serializedString46.equals((java.lang.Object) serializedString55);
        com.fasterxml.jackson.core.io.SerializedString serializedString65 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray66 = serializedString65.asUnquotedUTF8();
        int int68 = serializedString46.appendQuotedUTF8(byteArray66, (int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray75 = new char[] { 'a', ' ', '#', '4' };
        int int77 = serializedString70.appendUnquoted(charArray75, 0);
        int int79 = serializedString46.appendUnquoted(charArray75, (int) 'a');
        byte[] byteArray80 = serializedString46.asUnquotedUTF8();
        int int82 = serializedString20.appendQuotedUTF8(byteArray80, (int) (short) 100);
        char[] charArray83 = serializedString20.asQuotedChars();
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "##aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "##aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[#, #, a, a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray51), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray51), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray51), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(charArray75);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray75), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray75), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray75), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(charArray83);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray83), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray83), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray83), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test3632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3632");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext89 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonParser jsonParser91 = uTF8StreamJsonParser84.setFeatureMask(97);
        // The following exception was thrown during execution in test generation
        try {
            byte byte92 = jsonParser91.getByteValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNotNull(jsonStreamContext89);
        org.junit.Assert.assertNotNull(jsonParser91);
    }

    @Test
    public void test3633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3633");
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal1 = com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal("[Source: true; line: 0, column: 100]");
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
    }

    @Test
    public void test3634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3634");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext89 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonParser jsonParser91 = uTF8StreamJsonParser84.setFeatureMask(10);
        int int92 = uTF8StreamJsonParser84.getTokenColumnNr();
        double double93 = uTF8StreamJsonParser84.getValueAsDouble();
        char[] charArray94 = uTF8StreamJsonParser84.getTextCharacters();
        // The following exception was thrown during execution in test generation
        try {
            short short95 = uTF8StreamJsonParser84.getShortValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNotNull(jsonStreamContext89);
        org.junit.Assert.assertNotNull(jsonParser91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
        org.junit.Assert.assertNull(charArray94);
    }

    @Test
    public void test3635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3635");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        long long88 = uTF8StreamJsonParser84.getValueAsLong();
        java.lang.String str89 = uTF8StreamJsonParser84.getText();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
        org.junit.Assert.assertNull(str89);
    }

    @Test
    public void test3636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3636");
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal1 = com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
    }

    @Test
    public void test3637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3637");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        java.lang.String str9 = serializedString1.getValue();
        com.fasterxml.jackson.core.JsonLocation jsonLocation11 = null;
        java.lang.Throwable throwable12 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException13 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation11, throwable12);
        boolean boolean14 = serializedString1.equals((java.lang.Object) jsonLocation11);
        byte[] byteArray15 = serializedString1.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString17 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int24 = serializedString17.appendQuotedUTF8(byteArray22, 0);
        char[] charArray25 = serializedString17.asQuotedChars();
        int int26 = serializedString17.charLength();
        char[] charArray27 = serializedString17.asQuotedChars();
        int int29 = serializedString1.appendQuoted(charArray27, (int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString31 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray36 = new char[] { 'a', ' ', '#', '4' };
        int int38 = serializedString31.appendUnquoted(charArray36, 0);
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 0, (byte) 0 };
        int int47 = serializedString31.appendUnquotedUTF8(byteArray45, (int) (short) -1);
        byte[] byteArray48 = serializedString31.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString50 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int57 = serializedString50.appendQuotedUTF8(byteArray55, 0);
        char[] charArray58 = serializedString50.asQuotedChars();
        int int60 = serializedString31.appendQuoted(charArray58, 63);
        int int62 = serializedString1.appendQuoted(charArray58, (int) (short) 10);
        int int63 = serializedString1.charLength();
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str9, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 47 + "'", int26 == 47);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 1, 10, -1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 47 + "'", int63 == 47);
    }

    @Test
    public void test3638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3638");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter24 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter25 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter lf2SpacesIndenter27 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter lf2SpacesIndenter29 = lf2SpacesIndenter27.withLinefeed("[Source: hi!; line: 52, column: 1]");
        defaultPrettyPrinter25.indentObjectsWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) lf2SpacesIndenter27);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter lf2SpacesIndenter32 = lf2SpacesIndenter27.withLinefeed("[Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter24);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter25);
        org.junit.Assert.assertNotNull(lf2SpacesIndenter29);
        org.junit.Assert.assertNotNull(lf2SpacesIndenter32);
    }

    @Test
    public void test3639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3639");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec88 = uTF8StreamJsonParser84.getCodec();
        char[] charArray89 = uTF8StreamJsonParser84.getTextCharacters();
        double double91 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) 10);
        boolean boolean92 = uTF8StreamJsonParser84.isClosed();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(objectCodec88);
        org.junit.Assert.assertNull(charArray89);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 10.0d + "'", double91 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test3640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3640");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        boolean boolean89 = uTF8StreamJsonParser84.hasTextCharacters();
        boolean boolean90 = uTF8StreamJsonParser84.isClosed();
        int int92 = uTF8StreamJsonParser84.getValueAsInt(47);
        long long93 = uTF8StreamJsonParser84.getValueAsLong();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 47 + "'", int92 == 47);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
    }

    @Test
    public void test3641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3641");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        java.lang.String str9 = serializedString1.getValue();
        com.fasterxml.jackson.core.JsonLocation jsonLocation11 = null;
        java.lang.Throwable throwable12 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException13 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation11, throwable12);
        boolean boolean14 = serializedString1.equals((java.lang.Object) jsonLocation11);
        byte[] byteArray15 = serializedString1.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString17 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray22 = new char[] { 'a', ' ', '#', '4' };
        int int24 = serializedString17.appendUnquoted(charArray22, 0);
        java.lang.String str25 = serializedString17.getValue();
        com.fasterxml.jackson.core.JsonLocation jsonLocation27 = null;
        java.lang.Throwable throwable28 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException29 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation27, throwable28);
        boolean boolean30 = serializedString17.equals((java.lang.Object) jsonLocation27);
        byte[] byteArray31 = serializedString17.asUnquotedUTF8();
        int int33 = serializedString1.appendQuotedUTF8(byteArray31, 34);
        int int34 = serializedString1.charLength();
        com.fasterxml.jackson.core.io.SerializedString serializedString36 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray37 = serializedString36.asUnquotedUTF8();
        java.lang.String str38 = serializedString36.toString();
        char[] charArray39 = serializedString36.asQuotedChars();
        int int41 = serializedString1.appendQuoted(charArray39, 47);
        byte[] byteArray42 = serializedString1.asQuotedUTF8();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter43 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator44 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter43.writeStartObject(jsonGenerator44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str9, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str25, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 47 + "'", int34 == 47);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str38, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
    }

    @Test
    public void test3642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3642");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        textBuffer76.setCurrentLength((int) (byte) 0);
        java.lang.String str82 = textBuffer76.toString();
        char[] charArray83 = textBuffer76.emptyAndGetCurrentSegment();
        boolean boolean84 = textBuffer76.hasTextAsCharacters();
        char[] charArray85 = textBuffer76.emptyAndGetCurrentSegment();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(charArray83);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray83), "a
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray83), "a\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(charArray85);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray85), "a
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray85), "a
    }

    @Test
    public void test3643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3643");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        java.lang.String str80 = textBuffer76.toString();
        char[] charArray81 = textBuffer76.getTextBuffer();
        char[] charArray82 = textBuffer76.getTextBuffer();
        textBuffer76.ensureNotShared();
        textBuffer76.resetWithEmpty();
        int int85 = textBuffer76.getCurrentSegmentSize();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "a" + "'", str80, "a");
        org.junit.Assert.assertNotNull(charArray81);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray81), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray81), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray81), "[a]");
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray82), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray82), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray82), "[a]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test3644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3644");
        int int2 = com.fasterxml.jackson.core.io.NumberInput.parseAsInt("", (int) (byte) -1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test3645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3645");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter24 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter25 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter21);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter27 = defaultPrettyPrinter25._withSpaces(true);
        boolean boolean28 = defaultPrettyPrinter25._spacesInObjectEntries;
        com.fasterxml.jackson.core.io.SerializedString serializedString30 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray37 = new char[] { 'a', ' ', '#', '4' };
        int int39 = serializedString32.appendUnquoted(charArray37, 0);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 0, (byte) 0 };
        int int48 = serializedString32.appendUnquotedUTF8(byteArray46, (int) (short) -1);
        char[] charArray55 = new char[] { '#', '#', 'a', 'a', ' ', '#' };
        boolean boolean59 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray55, (int) (byte) -1, 0, true);
        int int61 = serializedString32.appendUnquoted(charArray55, 100);
        int int63 = serializedString30.appendUnquoted(charArray55, (int) '#');
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter64 = defaultPrettyPrinter25.withRootSeparator((com.fasterxml.jackson.core.SerializableString) serializedString30);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter24);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 1, 10, -1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "##aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "##aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[#, #, a, a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter64);
    }

    @Test
    public void test3646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3646");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext89 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonParser jsonParser91 = uTF8StreamJsonParser84.setFeatureMask(97);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray92 = uTF8StreamJsonParser84.getBinaryValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNotNull(jsonStreamContext89);
        org.junit.Assert.assertNotNull(jsonParser91);
    }

    @Test
    public void test3647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3647");
        double double2 = com.fasterxml.jackson.core.io.NumberInput.parseAsDouble("com.fasterxml.jackson.core.JsonParseException: hi!\n at [Source: /; line: 0, column: 0]", (double) (-1));
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
    }

    @Test
    public void test3648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3648");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        int int89 = uTF8StreamJsonParser84.getTextOffset();
        uTF8StreamJsonParser84.overrideCurrentName("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test3649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3649");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        int int10 = serializedString1.charLength();
        char[] charArray11 = serializedString1.asQuotedChars();
        byte[] byteArray12 = serializedString1.asQuotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString14 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray19 = new char[] { 'a', ' ', '#', '4' };
        int int21 = serializedString14.appendUnquoted(charArray19, 0);
        java.lang.String str22 = serializedString14.getValue();
        char[] charArray23 = serializedString14.asQuotedChars();
        byte[] byteArray24 = serializedString14.asUnquotedUTF8();
        int int26 = serializedString1.appendQuotedUTF8(byteArray24, 24);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 47 + "'", int10 == 47);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str22, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
    }

    @Test
    public void test3650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3650");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        long long90 = uTF8StreamJsonParser84.getValueAsLong(0L);
        com.fasterxml.jackson.core.JsonParser jsonParser91 = uTF8StreamJsonParser84.skipChildren();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertNotNull(jsonParser91);
    }

    @Test
    public void test3651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3651");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec88 = uTF8StreamJsonParser84.getCodec();
        char[] charArray89 = uTF8StreamJsonParser84.getTextCharacters();
        int int90 = uTF8StreamJsonParser84.getTokenColumnNr();
        int int91 = uTF8StreamJsonParser84.getFeatureMask();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(objectCodec88);
        org.junit.Assert.assertNull(charArray89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
    }

    @Test
    public void test3652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3652");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext89 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonParser jsonParser91 = uTF8StreamJsonParser84.setFeatureMask(10);
        int int92 = uTF8StreamJsonParser84.getTokenColumnNr();
        double double93 = uTF8StreamJsonParser84.getValueAsDouble();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext94 = uTF8StreamJsonParser84.getParsingContext();
        boolean boolean95 = uTF8StreamJsonParser84.hasTextCharacters();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNotNull(jsonStreamContext89);
        org.junit.Assert.assertNotNull(jsonParser91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
        org.junit.Assert.assertNotNull(jsonStreamContext94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test3653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3653");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        com.fasterxml.jackson.core.Version version90 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.JsonLocation jsonLocation91 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        double double95 = uTF8StreamJsonParser84.getValueAsDouble();
        java.lang.String str96 = uTF8StreamJsonParser84.getCurrentName();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(version90);
        org.junit.Assert.assertNotNull(jsonLocation91);
        org.junit.Assert.assertNotNull(version92);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "[Source: hi!; line: 52, column: 1]" + "'", str96, "[Source: hi!; line: 52, column: 1]");
    }

    @Test
    public void test3654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3654");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.JsonLocation jsonLocation7 = new com.fasterxml.jackson.core.JsonLocation((java.lang.Object) "hi!", 0L, (long) (-1), (int) '4', (int) (byte) 1);
        com.fasterxml.jackson.core.JsonParseException jsonParseException8 = new com.fasterxml.jackson.core.JsonParseException("com.fasterxml.jackson.core.JsonParseException: ", jsonLocation7);
        com.fasterxml.jackson.core.JsonLocation jsonLocation9 = jsonParseException8.getLocation();
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext12 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        int int13 = jsonReadContext12.getCurrentIndex();
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext16 = jsonReadContext12.createChildArrayContext(0, 0);
        boolean boolean17 = jsonLocation9.equals((java.lang.Object) jsonReadContext12);
        com.fasterxml.jackson.core.io.IOContext iOContext19 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonReadContext12, false);
        com.fasterxml.jackson.core.io.SerializedString serializedString21 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray22 = serializedString21.asUnquotedUTF8();
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext25 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext28 = jsonReadContext25.createChildArrayContext((int) (short) 1, 10);
        boolean boolean29 = jsonReadContext28.inArray();
        boolean boolean30 = serializedString21.equals((java.lang.Object) boolean29);
        char[] charArray31 = serializedString21.asQuotedChars();
        // The following exception was thrown during execution in test generation
        try {
            iOContext19.releaseConcatBuffer(charArray31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Trying to release buffer not owned by the context");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(jsonLocation9);
        org.junit.Assert.assertNotNull(jsonReadContext12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(jsonReadContext16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonReadContext25);
        org.junit.Assert.assertNotNull(jsonReadContext28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test3655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3655");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        java.lang.String str9 = serializedString1.getValue();
        com.fasterxml.jackson.core.JsonLocation jsonLocation11 = null;
        java.lang.Throwable throwable12 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException13 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation11, throwable12);
        boolean boolean14 = serializedString1.equals((java.lang.Object) jsonLocation11);
        byte[] byteArray15 = serializedString1.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString17 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray22 = new char[] { 'a', ' ', '#', '4' };
        int int24 = serializedString17.appendUnquoted(charArray22, 0);
        java.lang.String str25 = serializedString17.getValue();
        com.fasterxml.jackson.core.JsonLocation jsonLocation27 = null;
        java.lang.Throwable throwable28 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException29 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation27, throwable28);
        boolean boolean30 = serializedString17.equals((java.lang.Object) jsonLocation27);
        byte[] byteArray31 = serializedString17.asUnquotedUTF8();
        int int33 = serializedString1.appendQuotedUTF8(byteArray31, 34);
        int int34 = serializedString1.charLength();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter35 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.io.SerializedString serializedString37 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray42 = new char[] { 'a', ' ', '#', '4' };
        int int44 = serializedString37.appendUnquoted(charArray42, 0);
        java.lang.String str45 = serializedString37.getValue();
        char[] charArray46 = serializedString37.asQuotedChars();
        byte[] byteArray47 = serializedString37.asUnquotedUTF8();
        int int49 = serializedString1.appendQuotedUTF8(byteArray47, (int) (short) 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString51 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray56 = new char[] { 'a', ' ', '#', '4' };
        int int58 = serializedString51.appendUnquoted(charArray56, 0);
        byte[] byteArray65 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 0, (byte) 0 };
        int int67 = serializedString51.appendUnquotedUTF8(byteArray65, (int) (short) -1);
        com.fasterxml.jackson.core.io.SerializedString serializedString69 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int76 = serializedString69.appendQuotedUTF8(byteArray74, 0);
        char[] charArray77 = serializedString69.asQuotedChars();
        int int78 = serializedString69.charLength();
        char[] charArray79 = serializedString69.asQuotedChars();
        int int81 = serializedString51.appendUnquoted(charArray79, (int) (short) 10);
        byte[] byteArray82 = serializedString51.asUnquotedUTF8();
        // The following exception was thrown during execution in test generation
        try {
            int int84 = serializedString1.appendQuotedUTF8(byteArray82, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str9, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str25, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 47 + "'", int34 == 47);
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str45, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 47 + "'", int49 == 47);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray56), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray56), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray56), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[10, 1, 10, -1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 47 + "'", int78 == 47);
        org.junit.Assert.assertNotNull(charArray79);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray79), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray79), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray79), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
    }

    @Test
    public void test3656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3656");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.JsonToken jsonToken87 = uTF8StreamJsonParser84.getCurrentToken();
        com.fasterxml.jackson.core.FormatSchema formatSchema88 = uTF8StreamJsonParser84.getSchema();
        java.lang.Object obj89 = uTF8StreamJsonParser84.getInputSource();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(jsonToken87);
        org.junit.Assert.assertNull(formatSchema88);
        org.junit.Assert.assertNull(obj89);
    }

    @Test
    public void test3657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3657");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextLength();
        double double86 = uTF8StreamJsonParser84.getValueAsDouble();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d);
    }

    @Test
    public void test3658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3658");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int27 = serializedString20.appendQuotedUTF8(byteArray25, 0);
        char[] charArray28 = serializedString20.asQuotedChars();
        boolean boolean29 = serializedString1.equals((java.lang.Object) serializedString20);
        com.fasterxml.jackson.core.io.SerializedString serializedString31 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int38 = serializedString31.appendQuotedUTF8(byteArray36, 0);
        byte[] byteArray39 = serializedString31.asUnquotedUTF8();
        int int41 = serializedString20.appendQuotedUTF8(byteArray39, (int) '#');
        java.lang.String str42 = serializedString20.getValue();
        int int43 = serializedString20.charLength();
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str42, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 47 + "'", int43 == 47);
    }

    @Test
    public void test3659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3659");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        boolean boolean93 = uTF8StreamJsonParser84.isClosed();
        java.lang.String str94 = uTF8StreamJsonParser84.getText();
        com.fasterxml.jackson.core.JsonParser.Feature feature95 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser jsonParser96 = uTF8StreamJsonParser84.enable(feature95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(str94);
    }

    @Test
    public void test3660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3660");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        java.lang.Object obj88 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int89 = uTF8StreamJsonParser84.getTokenColumnNr();
        java.lang.Object obj90 = uTF8StreamJsonParser84.getTypeId();
        java.lang.Object obj91 = uTF8StreamJsonParser84.getInputSource();
        boolean boolean92 = uTF8StreamJsonParser84.hasTextCharacters();
        uTF8StreamJsonParser84.overrideCurrentName("com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(obj88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }
}

