Order,testID,Case Length,Data
0,17,8420,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0018"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option4 = org.apache.commons.cli.OptionBuilder.create('4');
        option4.setDescription("""");
        org.apache.commons.cli.Options options7 = options2.addOption(option4);
        java.util.Collection collection8 = options2.getOptionGroups();
        org.apache.commons.cli.Options options12 = options2.addOption("""", false, ""arg"");
        java.util.List list13 = options12.getRequiredOptions();
        org.apache.commons.cli.Option option15 = org.apache.commons.cli.OptionBuilder.create(""arg"");
        org.apache.commons.cli.Options options16 = options12.addOption(option15);
        boolean boolean18 = options12.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option22 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup23 = options20.getOptionGroup(option22);
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create('4');
        char char26 = option25.getValueSeparator();
        org.apache.commons.cli.Option option28 = org.apache.commons.cli.OptionBuilder.create('4');
        option28.setDescription("""");
        option25.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup32 = options20.getOptionGroup(option25);
        boolean boolean34 = options20.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser35 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create('4');
        option38.setDescription("""");
        org.apache.commons.cli.Options options41 = options36.addOption(option38);
        org.apache.commons.cli.CommandLine commandLine42 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray44 = commandLine42.getOptionValues(""hi!"");
        java.lang.String str47 = commandLine42.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str49 = commandLine42.getOptionValue(""arg"");
        java.lang.String[] strArray50 = commandLine42.getArgs();
        java.lang.String[] strArray52 = posixParser35.flatten(options41, strArray50, false);
        java.util.Properties properties53 = null;
        org.apache.commons.cli.CommandLine commandLine54 = posixParser19.parse(options20, strArray52, properties53);
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = org.apache.commons.cli.OptionBuilder.create('4');
        option57.setDescription("""");
        org.apache.commons.cli.Options options60 = options55.addOption(option57);
        java.util.Collection collection61 = options55.getOptionGroups();
        org.apache.commons.cli.Options options65 = options55.addOption("""", false, ""arg"");
        org.apache.commons.cli.Options options66 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option68 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup69 = options66.getOptionGroup(option68);
        org.apache.commons.cli.Option option71 = org.apache.commons.cli.OptionBuilder.create('4');
        char char72 = option71.getValueSeparator();
        org.apache.commons.cli.Option option74 = org.apache.commons.cli.OptionBuilder.create('4');
        option74.setDescription("""");
        option71.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup78 = options66.getOptionGroup(option71);
        boolean boolean79 = option71.hasArgName();
        org.apache.commons.cli.Options options80 = options55.addOption(option71);
        java.util.List list81 = options55.helpOptions();
        org.apache.commons.cli.CommandLine commandLine82 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray84 = commandLine82.getOptionValues(""hi!"");
        java.lang.String str87 = commandLine82.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str89 = commandLine82.getOptionValue(""arg"");
        java.lang.String[] strArray90 = commandLine82.getArgs();
        java.lang.String[] strArray92 = posixParser19.flatten(options55, strArray90, false);
        java.util.Properties properties93 = null;
        org.apache.commons.cli.CommandLine commandLine94 = posixParser1.parse(options12, strArray92, properties93);
        java.lang.String[] strArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray97 = posixParser0.flatten(options12, strArray95, true);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option4);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(collection8);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(option15);
        org.junit.Assert.assertNotNull(options16);
        org.junit.Assert.assertTrue(""'"" + boolean18 + ""' != '"" + false + ""'"", boolean18 == false);
        org.junit.Assert.assertNotNull(option22);
        org.junit.Assert.assertNull(optionGroup23);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertTrue(""'"" + char26 + ""' != '"" + '\000' + ""'"", char26 == '\000');
        org.junit.Assert.assertNotNull(option28);
        org.junit.Assert.assertNull(optionGroup32);
        org.junit.Assert.assertTrue(""'"" + boolean34 + ""' != '"" + false + ""'"", boolean34 == false);
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertNull(strArray44);
        org.junit.Assert.assertEquals(""'"" + str47 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str47, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(collection61);
        org.junit.Assert.assertNotNull(options65);
        org.junit.Assert.assertNotNull(option68);
        org.junit.Assert.assertNull(optionGroup69);
        org.junit.Assert.assertNotNull(option71);
        org.junit.Assert.assertTrue(""'"" + char72 + ""' != '"" + '\000' + ""'"", char72 == '\000');
        org.junit.Assert.assertNotNull(option74);
        org.junit.Assert.assertNull(optionGroup78);
        org.junit.Assert.assertTrue(""'"" + boolean79 + ""' != '"" + true + ""'"", boolean79 == true);
        org.junit.Assert.assertNotNull(options80);
        org.junit.Assert.assertNotNull(list81);
        org.junit.Assert.assertNull(strArray84);
        org.junit.Assert.assertEquals(""'"" + str87 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str87, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(commandLine94);"
1,467,8602,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0468"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String[] strArray10 = commandLine7.getArgs();
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser0.parse(options1, strArray10, properties11);
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option15 = org.apache.commons.cli.OptionBuilder.create('4');
        option15.setDescription("""");
        org.apache.commons.cli.Options options18 = options13.addOption(option15);
        java.lang.String str19 = options13.toString();
        org.apache.commons.cli.CommandLine commandLine20 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray22 = commandLine20.getOptionValues(""hi!"");
        java.lang.String str25 = commandLine20.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str27 = commandLine20.getOptionValue(""arg"");
        java.lang.String[] strArray28 = commandLine20.getArgs();
        java.util.Properties properties29 = null;
        org.apache.commons.cli.CommandLine commandLine31 = posixParser0.parse(options13, strArray28, properties29, false);
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create('4');
        option34.setDescription("""");
        org.apache.commons.cli.Options options37 = options32.addOption(option34);
        java.util.Collection collection38 = options32.getOptionGroups();
        org.apache.commons.cli.Options options42 = options32.addOption("""", false, ""arg"");
        java.lang.String str43 = options42.toString();
        java.util.Collection collection44 = options42.getOptionGroups();
        java.util.Collection collection45 = options42.getOptions();
        java.util.Collection collection46 = options42.getOptionGroups();
        org.apache.commons.cli.PosixParser posixParser47 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options48 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option50 = org.apache.commons.cli.OptionBuilder.create('4');
        option50.setDescription("""");
        org.apache.commons.cli.Options options53 = options48.addOption(option50);
        org.apache.commons.cli.CommandLine commandLine54 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray56 = commandLine54.getOptionValues(""hi!"");
        java.lang.String[] strArray57 = commandLine54.getArgs();
        java.util.Properties properties58 = null;
        org.apache.commons.cli.CommandLine commandLine59 = posixParser47.parse(options48, strArray57, properties58);
        org.apache.commons.cli.Options options60 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option62 = org.apache.commons.cli.OptionBuilder.create('4');
        option62.setDescription("""");
        org.apache.commons.cli.Options options65 = options60.addOption(option62);
        java.lang.String str66 = options60.toString();
        org.apache.commons.cli.CommandLine commandLine67 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray69 = commandLine67.getOptionValues(""hi!"");
        java.lang.String str72 = commandLine67.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str74 = commandLine67.getOptionValue(""arg"");
        java.lang.String[] strArray75 = commandLine67.getArgs();
        java.util.Properties properties76 = null;
        org.apache.commons.cli.CommandLine commandLine78 = posixParser47.parse(options60, strArray75, properties76, false);
        java.lang.String str80 = commandLine78.getOptionValue(""[ option: 4  ::  :: [] ]"");
        java.lang.String str82 = commandLine78.getOptionValue(""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"");
        commandLine78.addArg("""");
        java.lang.String[] strArray85 = commandLine78.getArgs();
        java.util.Properties properties86 = null;
        org.apache.commons.cli.CommandLine commandLine87 = posixParser0.parse(options42, strArray85, properties86);
        org.apache.commons.cli.Option option89 = org.apache.commons.cli.OptionBuilder.create('4');
        char char90 = option89.getValueSeparator();
        java.lang.String str91 = option89.getArgName();
        java.util.ListIterator listIterator92 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option89, listIterator92);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertNotNull(option15);
        org.junit.Assert.assertNotNull(options18);
        org.junit.Assert.assertEquals(""'"" + str19 + ""' != '"" + ""[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str19, ""[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(strArray22);
        org.junit.Assert.assertEquals(""'"" + str25 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str25, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertNotNull(options37);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNotNull(options42);
        org.junit.Assert.assertEquals(""'"" + str43 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str43, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNotNull(collection44);
        org.junit.Assert.assertNotNull(collection45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNotNull(option50);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertNull(strArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(commandLine59);
        org.junit.Assert.assertNotNull(option62);
        org.junit.Assert.assertNotNull(options65);
        org.junit.Assert.assertEquals(""'"" + str66 + ""' != '"" + ""[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str66, ""[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(strArray69);
        org.junit.Assert.assertEquals(""'"" + str72 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str72, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(commandLine78);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(commandLine87);
        org.junit.Assert.assertNotNull(option89);
        org.junit.Assert.assertTrue(""'"" + char90 + ""' != '"" + '\000' + ""'"", char90 == '\000');
        org.junit.Assert.assertEquals(""'"" + str91 + ""' != '"" + ""arg"" + ""'"", str91, ""arg"");"
2,444,8285,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0445"");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option2 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup3 = options0.getOptionGroup(option2);
        org.apache.commons.cli.Option option5 = org.apache.commons.cli.OptionBuilder.create('4');
        char char6 = option5.getValueSeparator();
        org.apache.commons.cli.Option option8 = org.apache.commons.cli.OptionBuilder.create('4');
        option8.setDescription("""");
        option5.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup12 = options0.getOptionGroup(option5);
        int int13 = option5.getId();
        org.apache.commons.cli.PosixParser posixParser14 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options15 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option17 = org.apache.commons.cli.OptionBuilder.create('4');
        option17.setDescription("""");
        org.apache.commons.cli.Options options20 = options15.addOption(option17);
        org.apache.commons.cli.PosixParser posixParser21 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create('4');
        option24.setDescription("""");
        org.apache.commons.cli.Options options27 = options22.addOption(option24);
        org.apache.commons.cli.CommandLine commandLine28 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine28.getOptionValues(""hi!"");
        java.lang.String[] strArray31 = commandLine28.getArgs();
        java.util.Properties properties32 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser21.parse(options22, strArray31, properties32);
        org.apache.commons.cli.CommandLine commandLine35 = posixParser14.parse(options20, strArray31, false);
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup39 = options36.getOptionGroup(option38);
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create('4');
        char char42 = option41.getValueSeparator();
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        option44.setDescription("""");
        option41.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup48 = options36.getOptionGroup(option41);
        boolean boolean50 = options36.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser51 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options52 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option54 = org.apache.commons.cli.OptionBuilder.create('4');
        option54.setDescription("""");
        org.apache.commons.cli.Options options57 = options52.addOption(option54);
        org.apache.commons.cli.CommandLine commandLine58 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray60 = commandLine58.getOptionValues(""hi!"");
        java.lang.String[] strArray61 = commandLine58.getArgs();
        java.util.Properties properties62 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser51.parse(options52, strArray61, properties62);
        java.util.Properties properties64 = null;
        org.apache.commons.cli.CommandLine commandLine66 = posixParser14.parse(options36, strArray61, properties64, true);
        org.apache.commons.cli.Options options67 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option69 = org.apache.commons.cli.OptionBuilder.create('4');
        option69.setDescription("""");
        org.apache.commons.cli.Options options72 = options67.addOption(option69);
        java.util.Collection collection73 = options67.getOptions();
        java.lang.String[] strArray74 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser14.parse(options67, strArray74, true);
        org.apache.commons.cli.PosixParser posixParser77 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options78 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option80 = org.apache.commons.cli.OptionBuilder.create('4');
        option80.setDescription("""");
        org.apache.commons.cli.Options options83 = options78.addOption(option80);
        org.apache.commons.cli.CommandLine commandLine84 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray86 = commandLine84.getOptionValues(""hi!"");
        java.lang.String[] strArray87 = commandLine84.getArgs();
        java.util.Properties properties88 = null;
        org.apache.commons.cli.CommandLine commandLine89 = posixParser77.parse(options78, strArray87, properties88);
        java.lang.String[] strArray92 = new java.lang.String[] { ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"", ""hi!"" };
        java.util.Properties properties93 = null;
        org.apache.commons.cli.CommandLine commandLine95 = posixParser14.parse(options78, strArray92, properties93, true);
        boolean boolean96 = option5.equals((java.lang.Object) strArray92);
        char char97 = option5.getValueSeparator();
        boolean boolean98 = option5.hasLongOpt();
        org.junit.Assert.assertNotNull(option2);
        org.junit.Assert.assertNull(optionGroup3);
        org.junit.Assert.assertNotNull(option5);
        org.junit.Assert.assertTrue(""'"" + char6 + ""' != '"" + '\000' + ""'"", char6 == '\000');
        org.junit.Assert.assertNotNull(option8);
        org.junit.Assert.assertNull(optionGroup12);
        org.junit.Assert.assertTrue(""'"" + int13 + ""' != '"" + 52 + ""'"", int13 == 52);
        org.junit.Assert.assertNotNull(option17);
        org.junit.Assert.assertNotNull(options20);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNotNull(options27);
        org.junit.Assert.assertNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertNull(optionGroup39);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertTrue(""'"" + char42 + ""' != '"" + '\000' + ""'"", char42 == '\000');
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertNull(optionGroup48);
        org.junit.Assert.assertTrue(""'"" + boolean50 + ""' != '"" + false + ""'"", boolean50 == false);
        org.junit.Assert.assertNotNull(option54);
        org.junit.Assert.assertNotNull(options57);
        org.junit.Assert.assertNull(strArray60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(commandLine66);
        org.junit.Assert.assertNotNull(option69);
        org.junit.Assert.assertNotNull(options72);
        org.junit.Assert.assertNotNull(collection73);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(option80);
        org.junit.Assert.assertNotNull(options83);
        org.junit.Assert.assertNull(strArray86);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(commandLine89);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(commandLine95);
        org.junit.Assert.assertTrue(""'"" + boolean96 + ""' != '"" + false + ""'"", boolean96 == false);
        org.junit.Assert.assertTrue(""'"" + char97 + ""' != '"" + '\000' + ""'"", char97 == '\000');
        org.junit.Assert.assertTrue(""'"" + boolean98 + ""' != '"" + false + ""'"", boolean98 == false);"
3,262,8282,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0263"");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option2 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup3 = options0.getOptionGroup(option2);
        org.apache.commons.cli.Option option5 = org.apache.commons.cli.OptionBuilder.create('4');
        char char6 = option5.getValueSeparator();
        org.apache.commons.cli.Option option8 = org.apache.commons.cli.OptionBuilder.create('4');
        option8.setDescription("""");
        option5.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup12 = options0.getOptionGroup(option5);
        int int13 = option5.getId();
        org.apache.commons.cli.PosixParser posixParser14 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options15 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option17 = org.apache.commons.cli.OptionBuilder.create('4');
        option17.setDescription("""");
        org.apache.commons.cli.Options options20 = options15.addOption(option17);
        org.apache.commons.cli.PosixParser posixParser21 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create('4');
        option24.setDescription("""");
        org.apache.commons.cli.Options options27 = options22.addOption(option24);
        org.apache.commons.cli.CommandLine commandLine28 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine28.getOptionValues(""hi!"");
        java.lang.String[] strArray31 = commandLine28.getArgs();
        java.util.Properties properties32 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser21.parse(options22, strArray31, properties32);
        org.apache.commons.cli.CommandLine commandLine35 = posixParser14.parse(options20, strArray31, false);
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup39 = options36.getOptionGroup(option38);
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create('4');
        char char42 = option41.getValueSeparator();
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        option44.setDescription("""");
        option41.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup48 = options36.getOptionGroup(option41);
        boolean boolean50 = options36.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser51 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options52 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option54 = org.apache.commons.cli.OptionBuilder.create('4');
        option54.setDescription("""");
        org.apache.commons.cli.Options options57 = options52.addOption(option54);
        org.apache.commons.cli.CommandLine commandLine58 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray60 = commandLine58.getOptionValues(""hi!"");
        java.lang.String[] strArray61 = commandLine58.getArgs();
        java.util.Properties properties62 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser51.parse(options52, strArray61, properties62);
        java.util.Properties properties64 = null;
        org.apache.commons.cli.CommandLine commandLine66 = posixParser14.parse(options36, strArray61, properties64, true);
        org.apache.commons.cli.Options options67 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option69 = org.apache.commons.cli.OptionBuilder.create('4');
        option69.setDescription("""");
        org.apache.commons.cli.Options options72 = options67.addOption(option69);
        java.util.Collection collection73 = options67.getOptions();
        java.lang.String[] strArray74 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser14.parse(options67, strArray74, true);
        org.apache.commons.cli.PosixParser posixParser77 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options78 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option80 = org.apache.commons.cli.OptionBuilder.create('4');
        option80.setDescription("""");
        org.apache.commons.cli.Options options83 = options78.addOption(option80);
        org.apache.commons.cli.CommandLine commandLine84 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray86 = commandLine84.getOptionValues(""hi!"");
        java.lang.String[] strArray87 = commandLine84.getArgs();
        java.util.Properties properties88 = null;
        org.apache.commons.cli.CommandLine commandLine89 = posixParser77.parse(options78, strArray87, properties88);
        java.lang.String[] strArray92 = new java.lang.String[] { ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"", ""hi!"" };
        java.util.Properties properties93 = null;
        org.apache.commons.cli.CommandLine commandLine95 = posixParser14.parse(options78, strArray92, properties93, true);
        boolean boolean96 = option5.equals((java.lang.Object) strArray92);
        char char97 = option5.getValueSeparator();
        java.lang.String str98 = option5.getArgName();
        org.junit.Assert.assertNotNull(option2);
        org.junit.Assert.assertNull(optionGroup3);
        org.junit.Assert.assertNotNull(option5);
        org.junit.Assert.assertTrue(""'"" + char6 + ""' != '"" + '\000' + ""'"", char6 == '\000');
        org.junit.Assert.assertNotNull(option8);
        org.junit.Assert.assertNull(optionGroup12);
        org.junit.Assert.assertTrue(""'"" + int13 + ""' != '"" + 52 + ""'"", int13 == 52);
        org.junit.Assert.assertNotNull(option17);
        org.junit.Assert.assertNotNull(options20);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNotNull(options27);
        org.junit.Assert.assertNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertNull(optionGroup39);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertTrue(""'"" + char42 + ""' != '"" + '\000' + ""'"", char42 == '\000');
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertNull(optionGroup48);
        org.junit.Assert.assertTrue(""'"" + boolean50 + ""' != '"" + false + ""'"", boolean50 == false);
        org.junit.Assert.assertNotNull(option54);
        org.junit.Assert.assertNotNull(options57);
        org.junit.Assert.assertNull(strArray60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(commandLine66);
        org.junit.Assert.assertNotNull(option69);
        org.junit.Assert.assertNotNull(options72);
        org.junit.Assert.assertNotNull(collection73);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(option80);
        org.junit.Assert.assertNotNull(options83);
        org.junit.Assert.assertNull(strArray86);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(commandLine89);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(commandLine95);
        org.junit.Assert.assertTrue(""'"" + boolean96 + ""' != '"" + false + ""'"", boolean96 == false);
        org.junit.Assert.assertTrue(""'"" + char97 + ""' != '"" + '\000' + ""'"", char97 == '\000');
        org.junit.Assert.assertEquals(""'"" + str98 + ""' != '"" + ""arg"" + ""'"", str98, ""arg"");"
4,474,8364,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0475"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option4 = org.apache.commons.cli.OptionBuilder.create('4');
        option4.setDescription("""");
        org.apache.commons.cli.Options options7 = options2.addOption(option4);
        org.apache.commons.cli.PosixParser posixParser8 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option11 = org.apache.commons.cli.OptionBuilder.create('4');
        option11.setDescription("""");
        org.apache.commons.cli.Options options14 = options9.addOption(option11);
        org.apache.commons.cli.CommandLine commandLine15 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray17 = commandLine15.getOptionValues(""hi!"");
        java.lang.String[] strArray18 = commandLine15.getArgs();
        java.util.Properties properties19 = null;
        org.apache.commons.cli.CommandLine commandLine20 = posixParser8.parse(options9, strArray18, properties19);
        org.apache.commons.cli.CommandLine commandLine22 = posixParser1.parse(options7, strArray18, false);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup26 = options23.getOptionGroup(option25);
        org.apache.commons.cli.Option option28 = org.apache.commons.cli.OptionBuilder.create('4');
        char char29 = option28.getValueSeparator();
        org.apache.commons.cli.Option option31 = org.apache.commons.cli.OptionBuilder.create('4');
        option31.setDescription("""");
        option28.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup35 = options23.getOptionGroup(option28);
        boolean boolean37 = options23.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser38 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create('4');
        option41.setDescription("""");
        org.apache.commons.cli.Options options44 = options39.addOption(option41);
        org.apache.commons.cli.CommandLine commandLine45 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray47 = commandLine45.getOptionValues(""hi!"");
        java.lang.String[] strArray48 = commandLine45.getArgs();
        java.util.Properties properties49 = null;
        org.apache.commons.cli.CommandLine commandLine50 = posixParser38.parse(options39, strArray48, properties49);
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser1.parse(options23, strArray48, properties51, true);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        option56.setDescription("""");
        org.apache.commons.cli.Options options59 = options54.addOption(option56);
        java.util.Collection collection60 = options54.getOptionGroups();
        org.apache.commons.cli.Option option62 = org.apache.commons.cli.OptionBuilder.create('4');
        option62.setDescription("""");
        option62.setLongOpt(""hi!"");
        boolean boolean67 = option62.hasArgName();
        org.apache.commons.cli.Options options68 = options54.addOption(option62);
        org.apache.commons.cli.PosixParser posixParser69 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options70 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option72 = org.apache.commons.cli.OptionBuilder.create('4');
        option72.setDescription("""");
        org.apache.commons.cli.Options options75 = options70.addOption(option72);
        org.apache.commons.cli.CommandLine commandLine76 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray78 = commandLine76.getOptionValues(""hi!"");
        java.lang.String str81 = commandLine76.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str83 = commandLine76.getOptionValue(""arg"");
        java.lang.String[] strArray84 = commandLine76.getArgs();
        java.lang.String[] strArray86 = posixParser69.flatten(options75, strArray84, false);
        org.apache.commons.cli.CommandLine commandLine87 = posixParser1.parse(options54, strArray86);
        java.lang.String[] strArray93 = new java.lang.String[] { ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"", ""[ option:  +ARG ::  ]"", ""hi!"", ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"", ""[ option:    :: null ]"" };
        java.util.Properties properties94 = null;
        org.apache.commons.cli.CommandLine commandLine96 = posixParser0.parse(options54, strArray93, properties94, false);
        java.util.Collection collection97 = options54.getOptionGroups();
        org.apache.commons.cli.OptionGroup optionGroup98 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options99 = options54.addOptionGroup(optionGroup98);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option4);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option11);
        org.junit.Assert.assertNotNull(options14);
        org.junit.Assert.assertNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(commandLine20);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertNull(optionGroup26);
        org.junit.Assert.assertNotNull(option28);
        org.junit.Assert.assertTrue(""'"" + char29 + ""' != '"" + '\000' + ""'"", char29 == '\000');
        org.junit.Assert.assertNotNull(option31);
        org.junit.Assert.assertNull(optionGroup35);
        org.junit.Assert.assertTrue(""'"" + boolean37 + ""' != '"" + false + ""'"", boolean37 == false);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNull(strArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNotNull(collection60);
        org.junit.Assert.assertNotNull(option62);
        org.junit.Assert.assertTrue(""'"" + boolean67 + ""' != '"" + true + ""'"", boolean67 == true);
        org.junit.Assert.assertNotNull(options68);
        org.junit.Assert.assertNotNull(option72);
        org.junit.Assert.assertNotNull(options75);
        org.junit.Assert.assertNull(strArray78);
        org.junit.Assert.assertEquals(""'"" + str81 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str81, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(commandLine87);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(commandLine96);
        org.junit.Assert.assertNotNull(collection97);"
5,274,8135,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0275"");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option2 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup3 = options0.getOptionGroup(option2);
        org.apache.commons.cli.Option option5 = org.apache.commons.cli.OptionBuilder.create('4');
        char char6 = option5.getValueSeparator();
        org.apache.commons.cli.Option option8 = org.apache.commons.cli.OptionBuilder.create('4');
        option8.setDescription("""");
        option5.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup12 = options0.getOptionGroup(option5);
        int int13 = option5.getId();
        org.apache.commons.cli.PosixParser posixParser14 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options15 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option17 = org.apache.commons.cli.OptionBuilder.create('4');
        option17.setDescription("""");
        org.apache.commons.cli.Options options20 = options15.addOption(option17);
        org.apache.commons.cli.PosixParser posixParser21 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create('4');
        option24.setDescription("""");
        org.apache.commons.cli.Options options27 = options22.addOption(option24);
        org.apache.commons.cli.CommandLine commandLine28 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine28.getOptionValues(""hi!"");
        java.lang.String[] strArray31 = commandLine28.getArgs();
        java.util.Properties properties32 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser21.parse(options22, strArray31, properties32);
        org.apache.commons.cli.CommandLine commandLine35 = posixParser14.parse(options20, strArray31, false);
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup39 = options36.getOptionGroup(option38);
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create('4');
        char char42 = option41.getValueSeparator();
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        option44.setDescription("""");
        option41.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup48 = options36.getOptionGroup(option41);
        boolean boolean50 = options36.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser51 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options52 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option54 = org.apache.commons.cli.OptionBuilder.create('4');
        option54.setDescription("""");
        org.apache.commons.cli.Options options57 = options52.addOption(option54);
        org.apache.commons.cli.CommandLine commandLine58 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray60 = commandLine58.getOptionValues(""hi!"");
        java.lang.String[] strArray61 = commandLine58.getArgs();
        java.util.Properties properties62 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser51.parse(options52, strArray61, properties62);
        java.util.Properties properties64 = null;
        org.apache.commons.cli.CommandLine commandLine66 = posixParser14.parse(options36, strArray61, properties64, true);
        org.apache.commons.cli.Options options67 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option69 = org.apache.commons.cli.OptionBuilder.create('4');
        option69.setDescription("""");
        org.apache.commons.cli.Options options72 = options67.addOption(option69);
        java.util.Collection collection73 = options67.getOptions();
        java.lang.String[] strArray74 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser14.parse(options67, strArray74, true);
        org.apache.commons.cli.PosixParser posixParser77 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options78 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option80 = org.apache.commons.cli.OptionBuilder.create('4');
        option80.setDescription("""");
        org.apache.commons.cli.Options options83 = options78.addOption(option80);
        org.apache.commons.cli.CommandLine commandLine84 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray86 = commandLine84.getOptionValues(""hi!"");
        java.lang.String[] strArray87 = commandLine84.getArgs();
        java.util.Properties properties88 = null;
        org.apache.commons.cli.CommandLine commandLine89 = posixParser77.parse(options78, strArray87, properties88);
        java.lang.String[] strArray92 = new java.lang.String[] { ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"", ""hi!"" };
        java.util.Properties properties93 = null;
        org.apache.commons.cli.CommandLine commandLine95 = posixParser14.parse(options78, strArray92, properties93, true);
        boolean boolean96 = option5.equals((java.lang.Object) strArray92);
        boolean boolean97 = option5.hasArg();
        org.junit.Assert.assertNotNull(option2);
        org.junit.Assert.assertNull(optionGroup3);
        org.junit.Assert.assertNotNull(option5);
        org.junit.Assert.assertTrue(""'"" + char6 + ""' != '"" + '\000' + ""'"", char6 == '\000');
        org.junit.Assert.assertNotNull(option8);
        org.junit.Assert.assertNull(optionGroup12);
        org.junit.Assert.assertTrue(""'"" + int13 + ""' != '"" + 52 + ""'"", int13 == 52);
        org.junit.Assert.assertNotNull(option17);
        org.junit.Assert.assertNotNull(options20);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNotNull(options27);
        org.junit.Assert.assertNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertNull(optionGroup39);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertTrue(""'"" + char42 + ""' != '"" + '\000' + ""'"", char42 == '\000');
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertNull(optionGroup48);
        org.junit.Assert.assertTrue(""'"" + boolean50 + ""' != '"" + false + ""'"", boolean50 == false);
        org.junit.Assert.assertNotNull(option54);
        org.junit.Assert.assertNotNull(options57);
        org.junit.Assert.assertNull(strArray60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(commandLine66);
        org.junit.Assert.assertNotNull(option69);
        org.junit.Assert.assertNotNull(options72);
        org.junit.Assert.assertNotNull(collection73);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(option80);
        org.junit.Assert.assertNotNull(options83);
        org.junit.Assert.assertNull(strArray86);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(commandLine89);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(commandLine95);
        org.junit.Assert.assertTrue(""'"" + boolean96 + ""' != '"" + false + ""'"", boolean96 == false);
        org.junit.Assert.assertTrue(""'"" + boolean97 + ""' != '"" + false + ""'"", boolean97 == false);"
6,121,8484,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0122"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option6.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken(""[ option: 4  :: null ::  ]"", true);
        posixParser0.burstToken(""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"", false);
        org.apache.commons.cli.Options options42 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup45 = options42.getOptionGroup(option44);
        org.apache.commons.cli.Option option47 = org.apache.commons.cli.OptionBuilder.create('4');
        char char48 = option47.getValueSeparator();
        org.apache.commons.cli.Option option50 = org.apache.commons.cli.OptionBuilder.create('4');
        option50.setDescription("""");
        option47.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup54 = options42.getOptionGroup(option47);
        boolean boolean56 = options42.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        java.util.List list57 = options42.helpOptions();
        java.util.List list58 = options42.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser59 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options60 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option62 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup63 = options60.getOptionGroup(option62);
        org.apache.commons.cli.Option option65 = org.apache.commons.cli.OptionBuilder.create('4');
        char char66 = option65.getValueSeparator();
        org.apache.commons.cli.Option option68 = org.apache.commons.cli.OptionBuilder.create('4');
        option68.setDescription("""");
        option65.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup72 = options60.getOptionGroup(option65);
        boolean boolean74 = options60.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser75 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options76 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option78 = org.apache.commons.cli.OptionBuilder.create('4');
        option78.setDescription("""");
        org.apache.commons.cli.Options options81 = options76.addOption(option78);
        org.apache.commons.cli.CommandLine commandLine82 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray84 = commandLine82.getOptionValues(""hi!"");
        java.lang.String str87 = commandLine82.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str89 = commandLine82.getOptionValue(""arg"");
        java.lang.String[] strArray90 = commandLine82.getArgs();
        java.lang.String[] strArray92 = posixParser75.flatten(options81, strArray90, false);
        java.util.Properties properties93 = null;
        org.apache.commons.cli.CommandLine commandLine94 = posixParser59.parse(options60, strArray92, properties93);
        java.util.List list95 = commandLine94.getArgList();
        java.lang.String[] strArray96 = commandLine94.getArgs();
        java.lang.String[] strArray97 = commandLine94.getArgs();
        java.util.Properties properties98 = null;
        org.apache.commons.cli.CommandLine commandLine99 = posixParser0.parse(options42, strArray97, properties98);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue(""'"" + char7 + ""' != '"" + '\000' + ""'"", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertNull(optionGroup45);
        org.junit.Assert.assertNotNull(option47);
        org.junit.Assert.assertTrue(""'"" + char48 + ""' != '"" + '\000' + ""'"", char48 == '\000');
        org.junit.Assert.assertNotNull(option50);
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertTrue(""'"" + boolean56 + ""' != '"" + false + ""'"", boolean56 == false);
        org.junit.Assert.assertNotNull(list57);
        org.junit.Assert.assertNotNull(list58);
        org.junit.Assert.assertNotNull(option62);
        org.junit.Assert.assertNull(optionGroup63);
        org.junit.Assert.assertNotNull(option65);
        org.junit.Assert.assertTrue(""'"" + char66 + ""' != '"" + '\000' + ""'"", char66 == '\000');
        org.junit.Assert.assertNotNull(option68);
        org.junit.Assert.assertNull(optionGroup72);
        org.junit.Assert.assertTrue(""'"" + boolean74 + ""' != '"" + false + ""'"", boolean74 == false);
        org.junit.Assert.assertNotNull(option78);
        org.junit.Assert.assertNotNull(options81);
        org.junit.Assert.assertNull(strArray84);
        org.junit.Assert.assertEquals(""'"" + str87 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str87, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(commandLine94);
        org.junit.Assert.assertNotNull(list95);
        org.junit.Assert.assertNotNull(strArray96);
        org.junit.Assert.assertNotNull(strArray97);
        org.junit.Assert.assertNotNull(commandLine99);"
7,167,8340,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0168"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptionGroups();
        org.apache.commons.cli.Options options11 = options1.addOption("""", false, ""arg"");
        java.util.List list12 = options11.getRequiredOptions();
        org.apache.commons.cli.Option option14 = org.apache.commons.cli.OptionBuilder.create(""arg"");
        org.apache.commons.cli.Options options15 = options11.addOption(option14);
        boolean boolean17 = options11.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option21 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup22 = options19.getOptionGroup(option21);
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create('4');
        char char25 = option24.getValueSeparator();
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        option27.setDescription("""");
        option24.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup31 = options19.getOptionGroup(option24);
        boolean boolean33 = options19.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser34 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option37 = org.apache.commons.cli.OptionBuilder.create('4');
        option37.setDescription("""");
        org.apache.commons.cli.Options options40 = options35.addOption(option37);
        org.apache.commons.cli.CommandLine commandLine41 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray43 = commandLine41.getOptionValues(""hi!"");
        java.lang.String str46 = commandLine41.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str48 = commandLine41.getOptionValue(""arg"");
        java.lang.String[] strArray49 = commandLine41.getArgs();
        java.lang.String[] strArray51 = posixParser34.flatten(options40, strArray49, false);
        java.util.Properties properties52 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser18.parse(options19, strArray51, properties52);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        option56.setDescription("""");
        org.apache.commons.cli.Options options59 = options54.addOption(option56);
        java.util.Collection collection60 = options54.getOptionGroups();
        org.apache.commons.cli.Options options64 = options54.addOption("""", false, ""arg"");
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option67 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup68 = options65.getOptionGroup(option67);
        org.apache.commons.cli.Option option70 = org.apache.commons.cli.OptionBuilder.create('4');
        char char71 = option70.getValueSeparator();
        org.apache.commons.cli.Option option73 = org.apache.commons.cli.OptionBuilder.create('4');
        option73.setDescription("""");
        option70.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup77 = options65.getOptionGroup(option70);
        boolean boolean78 = option70.hasArgName();
        org.apache.commons.cli.Options options79 = options54.addOption(option70);
        java.util.List list80 = options54.helpOptions();
        org.apache.commons.cli.CommandLine commandLine81 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray83 = commandLine81.getOptionValues(""hi!"");
        java.lang.String str86 = commandLine81.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str88 = commandLine81.getOptionValue(""arg"");
        java.lang.String[] strArray89 = commandLine81.getArgs();
        java.lang.String[] strArray91 = posixParser18.flatten(options54, strArray89, false);
        java.util.Properties properties92 = null;
        org.apache.commons.cli.CommandLine commandLine93 = posixParser0.parse(options11, strArray91, properties92);
        org.apache.commons.cli.OptionGroup optionGroup94 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options95 = options11.addOptionGroup(optionGroup94);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(list12);
        org.junit.Assert.assertNotNull(option14);
        org.junit.Assert.assertNotNull(options15);
        org.junit.Assert.assertTrue(""'"" + boolean17 + ""' != '"" + false + ""'"", boolean17 == false);
        org.junit.Assert.assertNotNull(option21);
        org.junit.Assert.assertNull(optionGroup22);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertTrue(""'"" + char25 + ""' != '"" + '\000' + ""'"", char25 == '\000');
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertNull(optionGroup31);
        org.junit.Assert.assertTrue(""'"" + boolean33 + ""' != '"" + false + ""'"", boolean33 == false);
        org.junit.Assert.assertNotNull(option37);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertNull(strArray43);
        org.junit.Assert.assertEquals(""'"" + str46 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str46, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNotNull(collection60);
        org.junit.Assert.assertNotNull(options64);
        org.junit.Assert.assertNotNull(option67);
        org.junit.Assert.assertNull(optionGroup68);
        org.junit.Assert.assertNotNull(option70);
        org.junit.Assert.assertTrue(""'"" + char71 + ""' != '"" + '\000' + ""'"", char71 == '\000');
        org.junit.Assert.assertNotNull(option73);
        org.junit.Assert.assertNull(optionGroup77);
        org.junit.Assert.assertTrue(""'"" + boolean78 + ""' != '"" + true + ""'"", boolean78 == true);
        org.junit.Assert.assertNotNull(options79);
        org.junit.Assert.assertNotNull(list80);
        org.junit.Assert.assertNull(strArray83);
        org.junit.Assert.assertEquals(""'"" + str86 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str86, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(commandLine93);"
8,333,8331,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0334"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptions();
        boolean boolean9 = options1.hasOption(""arg"");
        java.lang.String[] strArray12 = new java.lang.String[] { ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"", ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"" };
        org.apache.commons.cli.CommandLine commandLine13 = posixParser0.parse(options1, strArray12);
        org.apache.commons.cli.Options options14 = null;
        org.apache.commons.cli.PosixParser posixParser15 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = org.apache.commons.cli.OptionBuilder.create('4');
        option18.setDescription("""");
        org.apache.commons.cli.Options options21 = options16.addOption(option18);
        org.apache.commons.cli.CommandLine commandLine22 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray24 = commandLine22.getOptionValues(""hi!"");
        java.lang.String str27 = commandLine22.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str29 = commandLine22.getOptionValue(""arg"");
        java.lang.String[] strArray30 = commandLine22.getArgs();
        java.lang.String[] strArray32 = posixParser15.flatten(options21, strArray30, false);
        posixParser15.burstToken(""hi!"", true);
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create('4');
        option38.setDescription("""");
        org.apache.commons.cli.Options options41 = options36.addOption(option38);
        java.util.Collection collection42 = options36.getOptionGroups();
        org.apache.commons.cli.Options options46 = options36.addOption("""", false, ""arg"");
        java.util.List list47 = options46.getRequiredOptions();
        org.apache.commons.cli.Option option49 = org.apache.commons.cli.OptionBuilder.create(""arg"");
        org.apache.commons.cli.Options options50 = options46.addOption(option49);
        boolean boolean52 = options46.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        java.util.Collection collection53 = options46.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine54 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray56 = commandLine54.getOptionValues(""hi!"");
        java.lang.String str59 = commandLine54.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str61 = commandLine54.getOptionValue(""arg"");
        java.lang.String[] strArray62 = commandLine54.getArgs();
        java.util.Properties properties63 = null;
        org.apache.commons.cli.CommandLine commandLine65 = posixParser15.parse(options46, strArray62, properties63, true);
        org.apache.commons.cli.Options options66 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option68 = org.apache.commons.cli.OptionBuilder.create('4');
        option68.setDescription("""");
        org.apache.commons.cli.Options options71 = options66.addOption(option68);
        java.util.Collection collection72 = options66.getOptionGroups();
        java.util.Collection collection73 = options66.getOptionGroups();
        java.util.Collection collection74 = options66.getOptionGroups();
        org.apache.commons.cli.PosixParser posixParser75 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options76 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option78 = org.apache.commons.cli.OptionBuilder.create('4');
        option78.setDescription("""");
        org.apache.commons.cli.Options options81 = options76.addOption(option78);
        org.apache.commons.cli.CommandLine commandLine82 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray84 = commandLine82.getOptionValues(""hi!"");
        java.lang.String str87 = commandLine82.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str89 = commandLine82.getOptionValue(""arg"");
        java.lang.String[] strArray90 = commandLine82.getArgs();
        java.lang.String[] strArray92 = posixParser75.flatten(options81, strArray90, false);
        java.util.Properties properties93 = null;
        org.apache.commons.cli.CommandLine commandLine94 = posixParser15.parse(options66, strArray92, properties93);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.CommandLine commandLine95 = posixParser0.parse(options14, strArray92);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertTrue(""'"" + boolean9 + ""' != '"" + false + ""'"", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine13);
        org.junit.Assert.assertNotNull(option18);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNull(strArray24);
        org.junit.Assert.assertEquals(""'"" + str27 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str27, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertNotNull(collection42);
        org.junit.Assert.assertNotNull(options46);
        org.junit.Assert.assertNotNull(list47);
        org.junit.Assert.assertNotNull(option49);
        org.junit.Assert.assertNotNull(options50);
        org.junit.Assert.assertTrue(""'"" + boolean52 + ""' != '"" + false + ""'"", boolean52 == false);
        org.junit.Assert.assertNotNull(collection53);
        org.junit.Assert.assertNull(strArray56);
        org.junit.Assert.assertEquals(""'"" + str59 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str59, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertNotNull(option68);
        org.junit.Assert.assertNotNull(options71);
        org.junit.Assert.assertNotNull(collection72);
        org.junit.Assert.assertNotNull(collection73);
        org.junit.Assert.assertNotNull(collection74);
        org.junit.Assert.assertNotNull(option78);
        org.junit.Assert.assertNotNull(options81);
        org.junit.Assert.assertNull(strArray84);
        org.junit.Assert.assertEquals(""'"" + str87 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str87, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(commandLine94);"
9,169,8249,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0170"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option4 = org.apache.commons.cli.OptionBuilder.create('4');
        option4.setDescription("""");
        org.apache.commons.cli.Options options7 = options2.addOption(option4);
        org.apache.commons.cli.PosixParser posixParser8 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option11 = org.apache.commons.cli.OptionBuilder.create('4');
        option11.setDescription("""");
        org.apache.commons.cli.Options options14 = options9.addOption(option11);
        org.apache.commons.cli.CommandLine commandLine15 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray17 = commandLine15.getOptionValues(""hi!"");
        java.lang.String[] strArray18 = commandLine15.getArgs();
        java.util.Properties properties19 = null;
        org.apache.commons.cli.CommandLine commandLine20 = posixParser8.parse(options9, strArray18, properties19);
        org.apache.commons.cli.CommandLine commandLine22 = posixParser1.parse(options7, strArray18, false);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup26 = options23.getOptionGroup(option25);
        org.apache.commons.cli.Option option28 = org.apache.commons.cli.OptionBuilder.create('4');
        char char29 = option28.getValueSeparator();
        org.apache.commons.cli.Option option31 = org.apache.commons.cli.OptionBuilder.create('4');
        option31.setDescription("""");
        option28.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup35 = options23.getOptionGroup(option28);
        boolean boolean37 = options23.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser38 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create('4');
        option41.setDescription("""");
        org.apache.commons.cli.Options options44 = options39.addOption(option41);
        org.apache.commons.cli.CommandLine commandLine45 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray47 = commandLine45.getOptionValues(""hi!"");
        java.lang.String[] strArray48 = commandLine45.getArgs();
        java.util.Properties properties49 = null;
        org.apache.commons.cli.CommandLine commandLine50 = posixParser38.parse(options39, strArray48, properties49);
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser1.parse(options23, strArray48, properties51, true);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        option56.setDescription("""");
        org.apache.commons.cli.Options options59 = options54.addOption(option56);
        java.util.Collection collection60 = options54.getOptionGroups();
        org.apache.commons.cli.Option option62 = org.apache.commons.cli.OptionBuilder.create('4');
        option62.setDescription("""");
        option62.setLongOpt(""hi!"");
        boolean boolean67 = option62.hasArgName();
        org.apache.commons.cli.Options options68 = options54.addOption(option62);
        org.apache.commons.cli.PosixParser posixParser69 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options70 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option72 = org.apache.commons.cli.OptionBuilder.create('4');
        option72.setDescription("""");
        org.apache.commons.cli.Options options75 = options70.addOption(option72);
        org.apache.commons.cli.CommandLine commandLine76 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray78 = commandLine76.getOptionValues(""hi!"");
        java.lang.String str81 = commandLine76.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str83 = commandLine76.getOptionValue(""arg"");
        java.lang.String[] strArray84 = commandLine76.getArgs();
        java.lang.String[] strArray86 = posixParser69.flatten(options75, strArray84, false);
        org.apache.commons.cli.CommandLine commandLine87 = posixParser1.parse(options54, strArray86);
        java.lang.String[] strArray93 = new java.lang.String[] { ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"", ""[ option:  +ARG ::  ]"", ""hi!"", ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"", ""[ option:    :: null ]"" };
        java.util.Properties properties94 = null;
        org.apache.commons.cli.CommandLine commandLine96 = posixParser0.parse(options54, strArray93, properties94, false);
        org.apache.commons.cli.Option option97 = null;
        java.util.ListIterator listIterator98 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option97, listIterator98);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option4);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option11);
        org.junit.Assert.assertNotNull(options14);
        org.junit.Assert.assertNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(commandLine20);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertNull(optionGroup26);
        org.junit.Assert.assertNotNull(option28);
        org.junit.Assert.assertTrue(""'"" + char29 + ""' != '"" + '\000' + ""'"", char29 == '\000');
        org.junit.Assert.assertNotNull(option31);
        org.junit.Assert.assertNull(optionGroup35);
        org.junit.Assert.assertTrue(""'"" + boolean37 + ""' != '"" + false + ""'"", boolean37 == false);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNull(strArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNotNull(collection60);
        org.junit.Assert.assertNotNull(option62);
        org.junit.Assert.assertTrue(""'"" + boolean67 + ""' != '"" + true + ""'"", boolean67 == true);
        org.junit.Assert.assertNotNull(options68);
        org.junit.Assert.assertNotNull(option72);
        org.junit.Assert.assertNotNull(options75);
        org.junit.Assert.assertNull(strArray78);
        org.junit.Assert.assertEquals(""'"" + str81 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str81, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(commandLine87);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(commandLine96);"
10,115,8217,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0116"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option4 = org.apache.commons.cli.OptionBuilder.create('4');
        option4.setDescription("""");
        org.apache.commons.cli.Options options7 = options2.addOption(option4);
        org.apache.commons.cli.PosixParser posixParser8 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option11 = org.apache.commons.cli.OptionBuilder.create('4');
        option11.setDescription("""");
        org.apache.commons.cli.Options options14 = options9.addOption(option11);
        org.apache.commons.cli.CommandLine commandLine15 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray17 = commandLine15.getOptionValues(""hi!"");
        java.lang.String[] strArray18 = commandLine15.getArgs();
        java.util.Properties properties19 = null;
        org.apache.commons.cli.CommandLine commandLine20 = posixParser8.parse(options9, strArray18, properties19);
        org.apache.commons.cli.CommandLine commandLine22 = posixParser1.parse(options7, strArray18, false);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup26 = options23.getOptionGroup(option25);
        org.apache.commons.cli.Option option28 = org.apache.commons.cli.OptionBuilder.create('4');
        char char29 = option28.getValueSeparator();
        org.apache.commons.cli.Option option31 = org.apache.commons.cli.OptionBuilder.create('4');
        option31.setDescription("""");
        option28.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup35 = options23.getOptionGroup(option28);
        boolean boolean37 = options23.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser38 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create('4');
        option41.setDescription("""");
        org.apache.commons.cli.Options options44 = options39.addOption(option41);
        org.apache.commons.cli.CommandLine commandLine45 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray47 = commandLine45.getOptionValues(""hi!"");
        java.lang.String[] strArray48 = commandLine45.getArgs();
        java.util.Properties properties49 = null;
        org.apache.commons.cli.CommandLine commandLine50 = posixParser38.parse(options39, strArray48, properties49);
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser1.parse(options23, strArray48, properties51, true);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        option56.setDescription("""");
        org.apache.commons.cli.Options options59 = options54.addOption(option56);
        java.util.Collection collection60 = options54.getOptionGroups();
        org.apache.commons.cli.Option option62 = org.apache.commons.cli.OptionBuilder.create('4');
        option62.setDescription("""");
        option62.setLongOpt(""hi!"");
        boolean boolean67 = option62.hasArgName();
        org.apache.commons.cli.Options options68 = options54.addOption(option62);
        org.apache.commons.cli.PosixParser posixParser69 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options70 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option72 = org.apache.commons.cli.OptionBuilder.create('4');
        option72.setDescription("""");
        org.apache.commons.cli.Options options75 = options70.addOption(option72);
        org.apache.commons.cli.CommandLine commandLine76 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray78 = commandLine76.getOptionValues(""hi!"");
        java.lang.String str81 = commandLine76.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str83 = commandLine76.getOptionValue(""arg"");
        java.lang.String[] strArray84 = commandLine76.getArgs();
        java.lang.String[] strArray86 = posixParser69.flatten(options75, strArray84, false);
        org.apache.commons.cli.CommandLine commandLine87 = posixParser1.parse(options54, strArray86);
        java.lang.String[] strArray93 = new java.lang.String[] { ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"", ""[ option:  +ARG ::  ]"", ""hi!"", ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"", ""[ option:    :: null ]"" };
        java.util.Properties properties94 = null;
        org.apache.commons.cli.CommandLine commandLine96 = posixParser0.parse(options54, strArray93, properties94, false);
        org.apache.commons.cli.Option option97 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options98 = options54.addOption(option97);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option4);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option11);
        org.junit.Assert.assertNotNull(options14);
        org.junit.Assert.assertNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(commandLine20);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertNull(optionGroup26);
        org.junit.Assert.assertNotNull(option28);
        org.junit.Assert.assertTrue(""'"" + char29 + ""' != '"" + '\000' + ""'"", char29 == '\000');
        org.junit.Assert.assertNotNull(option31);
        org.junit.Assert.assertNull(optionGroup35);
        org.junit.Assert.assertTrue(""'"" + boolean37 + ""' != '"" + false + ""'"", boolean37 == false);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNull(strArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNotNull(collection60);
        org.junit.Assert.assertNotNull(option62);
        org.junit.Assert.assertTrue(""'"" + boolean67 + ""' != '"" + true + ""'"", boolean67 == true);
        org.junit.Assert.assertNotNull(options68);
        org.junit.Assert.assertNotNull(option72);
        org.junit.Assert.assertNotNull(options75);
        org.junit.Assert.assertNull(strArray78);
        org.junit.Assert.assertEquals(""'"" + str81 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str81, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(commandLine87);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(commandLine96);"
11,20,8225,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0021"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.CommandLine commandLine5 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray7 = commandLine5.getOptionValues(""hi!"");
        java.lang.String str10 = commandLine5.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str12 = commandLine5.getOptionValue(""arg"");
        java.lang.String[] strArray13 = commandLine5.getArgs();
        java.lang.String[] strArray15 = posixParser0.flatten(options1, strArray13, true);
        org.apache.commons.cli.Options options16 = null;
        org.apache.commons.cli.PosixParser posixParser17 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("""");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        org.apache.commons.cli.CommandLine commandLine24 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray26 = commandLine24.getOptionValues(""hi!"");
        java.lang.String str29 = commandLine24.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str31 = commandLine24.getOptionValue(""arg"");
        java.lang.String[] strArray32 = commandLine24.getArgs();
        java.lang.String[] strArray34 = posixParser17.flatten(options23, strArray32, false);
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option37 = org.apache.commons.cli.OptionBuilder.create('4');
        option37.setDescription("""");
        org.apache.commons.cli.Options options40 = options35.addOption(option37);
        java.util.Collection collection41 = options35.getOptionGroups();
        org.apache.commons.cli.Option option43 = org.apache.commons.cli.OptionBuilder.create('4');
        option43.setDescription("""");
        option43.setLongOpt(""hi!"");
        boolean boolean48 = option43.hasArgName();
        org.apache.commons.cli.Options options49 = options35.addOption(option43);
        org.apache.commons.cli.CommandLine commandLine50 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray52 = commandLine50.getOptionValues(""hi!"");
        java.lang.String[] strArray53 = commandLine50.getArgs();
        java.util.Properties properties54 = null;
        org.apache.commons.cli.CommandLine commandLine56 = posixParser17.parse(options35, strArray53, properties54, true);
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        option59.setDescription("""");
        org.apache.commons.cli.Options options62 = options57.addOption(option59);
        java.util.Collection collection63 = options57.getOptionGroups();
        org.apache.commons.cli.Options options67 = options57.addOption("""", false, ""arg"");
        org.apache.commons.cli.Options options68 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option70 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup71 = options68.getOptionGroup(option70);
        org.apache.commons.cli.Option option73 = org.apache.commons.cli.OptionBuilder.create('4');
        char char74 = option73.getValueSeparator();
        org.apache.commons.cli.Option option76 = org.apache.commons.cli.OptionBuilder.create('4');
        option76.setDescription("""");
        option73.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup80 = options68.getOptionGroup(option73);
        boolean boolean81 = option73.hasArgName();
        org.apache.commons.cli.Options options82 = options57.addOption(option73);
        org.apache.commons.cli.CommandLine commandLine83 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray85 = commandLine83.getOptionValues(""hi!"");
        java.lang.String str88 = commandLine83.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str90 = commandLine83.getOptionValue(""arg"");
        java.lang.String[] strArray91 = commandLine83.getArgs();
        java.util.Properties properties92 = null;
        org.apache.commons.cli.CommandLine commandLine93 = posixParser17.parse(options57, strArray91, properties92);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.CommandLine commandLine95 = posixParser0.parse(options16, strArray91, true);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNull(strArray7);
        org.junit.Assert.assertEquals(""'"" + str10 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str10, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNull(strArray26);
        org.junit.Assert.assertEquals(""'"" + str29 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str29, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(option37);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertNotNull(collection41);
        org.junit.Assert.assertNotNull(option43);
        org.junit.Assert.assertTrue(""'"" + boolean48 + ""' != '"" + true + ""'"", boolean48 == true);
        org.junit.Assert.assertNotNull(options49);
        org.junit.Assert.assertNull(strArray52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(commandLine56);
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNotNull(options62);
        org.junit.Assert.assertNotNull(collection63);
        org.junit.Assert.assertNotNull(options67);
        org.junit.Assert.assertNotNull(option70);
        org.junit.Assert.assertNull(optionGroup71);
        org.junit.Assert.assertNotNull(option73);
        org.junit.Assert.assertTrue(""'"" + char74 + ""' != '"" + '\000' + ""'"", char74 == '\000');
        org.junit.Assert.assertNotNull(option76);
        org.junit.Assert.assertNull(optionGroup80);
        org.junit.Assert.assertTrue(""'"" + boolean81 + ""' != '"" + true + ""'"", boolean81 == true);
        org.junit.Assert.assertNotNull(options82);
        org.junit.Assert.assertNull(strArray85);
        org.junit.Assert.assertEquals(""'"" + str88 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str88, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(commandLine93);"
12,414,8196,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0415"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptionGroups();
        org.apache.commons.cli.Options options11 = options1.addOption("""", false, ""arg"");
        java.util.List list12 = options11.getRequiredOptions();
        org.apache.commons.cli.Option option14 = org.apache.commons.cli.OptionBuilder.create(""arg"");
        org.apache.commons.cli.Options options15 = options11.addOption(option14);
        boolean boolean17 = options11.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option21 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup22 = options19.getOptionGroup(option21);
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create('4');
        char char25 = option24.getValueSeparator();
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        option27.setDescription("""");
        option24.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup31 = options19.getOptionGroup(option24);
        boolean boolean33 = options19.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser34 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option37 = org.apache.commons.cli.OptionBuilder.create('4');
        option37.setDescription("""");
        org.apache.commons.cli.Options options40 = options35.addOption(option37);
        org.apache.commons.cli.CommandLine commandLine41 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray43 = commandLine41.getOptionValues(""hi!"");
        java.lang.String str46 = commandLine41.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str48 = commandLine41.getOptionValue(""arg"");
        java.lang.String[] strArray49 = commandLine41.getArgs();
        java.lang.String[] strArray51 = posixParser34.flatten(options40, strArray49, false);
        java.util.Properties properties52 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser18.parse(options19, strArray51, properties52);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        option56.setDescription("""");
        org.apache.commons.cli.Options options59 = options54.addOption(option56);
        java.util.Collection collection60 = options54.getOptionGroups();
        org.apache.commons.cli.Options options64 = options54.addOption("""", false, ""arg"");
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option67 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup68 = options65.getOptionGroup(option67);
        org.apache.commons.cli.Option option70 = org.apache.commons.cli.OptionBuilder.create('4');
        char char71 = option70.getValueSeparator();
        org.apache.commons.cli.Option option73 = org.apache.commons.cli.OptionBuilder.create('4');
        option73.setDescription("""");
        option70.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup77 = options65.getOptionGroup(option70);
        boolean boolean78 = option70.hasArgName();
        org.apache.commons.cli.Options options79 = options54.addOption(option70);
        java.util.List list80 = options54.helpOptions();
        org.apache.commons.cli.CommandLine commandLine81 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray83 = commandLine81.getOptionValues(""hi!"");
        java.lang.String str86 = commandLine81.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str88 = commandLine81.getOptionValue(""arg"");
        java.lang.String[] strArray89 = commandLine81.getArgs();
        java.lang.String[] strArray91 = posixParser18.flatten(options54, strArray89, false);
        java.util.Properties properties92 = null;
        org.apache.commons.cli.CommandLine commandLine93 = posixParser0.parse(options11, strArray91, properties92);
        java.util.Iterator iterator94 = commandLine93.iterator();
        boolean boolean96 = commandLine93.hasOption(""[ option: 4  :: [ option: 4  :: null ] ::  ]"");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(list12);
        org.junit.Assert.assertNotNull(option14);
        org.junit.Assert.assertNotNull(options15);
        org.junit.Assert.assertTrue(""'"" + boolean17 + ""' != '"" + false + ""'"", boolean17 == false);
        org.junit.Assert.assertNotNull(option21);
        org.junit.Assert.assertNull(optionGroup22);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertTrue(""'"" + char25 + ""' != '"" + '\000' + ""'"", char25 == '\000');
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertNull(optionGroup31);
        org.junit.Assert.assertTrue(""'"" + boolean33 + ""' != '"" + false + ""'"", boolean33 == false);
        org.junit.Assert.assertNotNull(option37);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertNull(strArray43);
        org.junit.Assert.assertEquals(""'"" + str46 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str46, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNotNull(collection60);
        org.junit.Assert.assertNotNull(options64);
        org.junit.Assert.assertNotNull(option67);
        org.junit.Assert.assertNull(optionGroup68);
        org.junit.Assert.assertNotNull(option70);
        org.junit.Assert.assertTrue(""'"" + char71 + ""' != '"" + '\000' + ""'"", char71 == '\000');
        org.junit.Assert.assertNotNull(option73);
        org.junit.Assert.assertNull(optionGroup77);
        org.junit.Assert.assertTrue(""'"" + boolean78 + ""' != '"" + true + ""'"", boolean78 == true);
        org.junit.Assert.assertNotNull(options79);
        org.junit.Assert.assertNotNull(list80);
        org.junit.Assert.assertNull(strArray83);
        org.junit.Assert.assertEquals(""'"" + str86 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str86, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(commandLine93);
        org.junit.Assert.assertNotNull(iterator94);
        org.junit.Assert.assertTrue(""'"" + boolean96 + ""' != '"" + false + ""'"", boolean96 == false);"
13,119,8470,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0120"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        org.apache.commons.cli.Option option36 = org.apache.commons.cli.OptionBuilder.create('4');
        boolean boolean37 = option36.isRequired();
        org.apache.commons.cli.Options options38 = options22.addOption(option36);
        java.util.List list39 = options38.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser40 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options41 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option43 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup44 = options41.getOptionGroup(option43);
        org.apache.commons.cli.Option option46 = org.apache.commons.cli.OptionBuilder.create('4');
        char char47 = option46.getValueSeparator();
        org.apache.commons.cli.Option option49 = org.apache.commons.cli.OptionBuilder.create('4');
        option49.setDescription("""");
        option46.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup53 = options41.getOptionGroup(option46);
        boolean boolean55 = options41.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        option59.setDescription("""");
        org.apache.commons.cli.Options options62 = options57.addOption(option59);
        org.apache.commons.cli.CommandLine commandLine63 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray65 = commandLine63.getOptionValues(""hi!"");
        java.lang.String str68 = commandLine63.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str70 = commandLine63.getOptionValue(""arg"");
        java.lang.String[] strArray71 = commandLine63.getArgs();
        java.lang.String[] strArray73 = posixParser56.flatten(options62, strArray71, false);
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine75 = posixParser40.parse(options41, strArray73, properties74);
        java.util.List list76 = commandLine75.getArgList();
        java.lang.String[] strArray77 = commandLine75.getArgs();
        java.util.Properties properties78 = null;
        org.apache.commons.cli.CommandLine commandLine80 = posixParser0.parse(options38, strArray77, properties78, false);
        org.apache.commons.cli.Options options81 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option83 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup84 = options81.getOptionGroup(option83);
        boolean boolean85 = option83.hasLongOpt();
        boolean boolean86 = option83.isRequired();
        java.util.List list87 = option83.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup88 = options38.getOptionGroup(option83);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options93 = options38.addOption(""org.apache.commons.cli.MissingArgumentException: [ option:    :: null ]"", """", true, ""[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]"");
            org.junit.Assert.fail(""Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '.'"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertNotNull(option36);
        org.junit.Assert.assertTrue(""'"" + boolean37 + ""' != '"" + false + ""'"", boolean37 == false);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(list39);
        org.junit.Assert.assertNotNull(option43);
        org.junit.Assert.assertNull(optionGroup44);
        org.junit.Assert.assertNotNull(option46);
        org.junit.Assert.assertTrue(""'"" + char47 + ""' != '"" + '\000' + ""'"", char47 == '\000');
        org.junit.Assert.assertNotNull(option49);
        org.junit.Assert.assertNull(optionGroup53);
        org.junit.Assert.assertTrue(""'"" + boolean55 + ""' != '"" + false + ""'"", boolean55 == false);
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNotNull(options62);
        org.junit.Assert.assertNull(strArray65);
        org.junit.Assert.assertEquals(""'"" + str68 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str68, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine75);
        org.junit.Assert.assertNotNull(list76);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(commandLine80);
        org.junit.Assert.assertNotNull(option83);
        org.junit.Assert.assertNull(optionGroup84);
        org.junit.Assert.assertTrue(""'"" + boolean85 + ""' != '"" + false + ""'"", boolean85 == false);
        org.junit.Assert.assertTrue(""'"" + boolean86 + ""' != '"" + false + ""'"", boolean86 == false);
        org.junit.Assert.assertNotNull(list87);
        org.junit.Assert.assertNull(optionGroup88);"
14,297,8322,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0298"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option6.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken(""org.apache.commons.cli.MissingOptionException: hi!"", false);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create('4');
        option41.setDescription("""");
        org.apache.commons.cli.Options options44 = options39.addOption(option41);
        java.util.Collection collection45 = options39.getOptions();
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option48 = org.apache.commons.cli.OptionBuilder.create('4');
        char char49 = option48.getValueSeparator();
        org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create('4');
        option51.setDescription("""");
        option48.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup55 = options46.getOptionGroup(option48);
        option48.setOptionalArg(true);
        int int58 = option48.getId();
        org.apache.commons.cli.Options options59 = options39.addOption(option48);
        java.util.List list60 = options39.helpOptions();
        java.lang.String[] strArray61 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser0.parse(options39, strArray61, false);
        org.apache.commons.cli.PosixParser posixParser64 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option67 = org.apache.commons.cli.OptionBuilder.create('4');
        option67.setDescription("""");
        org.apache.commons.cli.Options options70 = options65.addOption(option67);
        org.apache.commons.cli.CommandLine commandLine71 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray73 = commandLine71.getOptionValues(""hi!"");
        java.lang.String[] strArray74 = commandLine71.getArgs();
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser64.parse(options65, strArray74, properties75);
        boolean boolean78 = options65.hasOption("" "");
        java.util.Collection collection79 = options65.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine80 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray82 = commandLine80.getOptionValues(""hi!"");
        java.lang.String[] strArray83 = commandLine80.getArgs();
        java.util.Iterator iterator84 = commandLine80.iterator();
        java.lang.String str87 = commandLine80.getOptionValue(""[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]"", ""arg"");
        boolean boolean89 = commandLine80.hasOption(""[ option: 4  :: null ]"");
        java.lang.String[] strArray91 = commandLine80.getOptionValues("""");
        java.lang.String str94 = commandLine80.getOptionValue('=', ""[ option: 4  :: null ::  ]"");
        org.apache.commons.cli.Option[] optionArray95 = commandLine80.getOptions();
        java.util.Iterator iterator96 = commandLine80.iterator();
        java.lang.String[] strArray97 = commandLine80.getArgs();
        java.util.Properties properties98 = null;
        org.apache.commons.cli.CommandLine commandLine99 = posixParser0.parse(options65, strArray97, properties98);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue(""'"" + char7 + ""' != '"" + '\000' + ""'"", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNotNull(collection45);
        org.junit.Assert.assertNotNull(option48);
        org.junit.Assert.assertTrue(""'"" + char49 + ""' != '"" + '\000' + ""'"", char49 == '\000');
        org.junit.Assert.assertNotNull(option51);
        org.junit.Assert.assertNull(optionGroup55);
        org.junit.Assert.assertTrue(""'"" + int58 + ""' != '"" + 52 + ""'"", int58 == 52);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNotNull(list60);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(option67);
        org.junit.Assert.assertNotNull(options70);
        org.junit.Assert.assertNull(strArray73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertTrue(""'"" + boolean78 + ""' != '"" + false + ""'"", boolean78 == false);
        org.junit.Assert.assertNotNull(collection79);
        org.junit.Assert.assertNull(strArray82);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(iterator84);
        org.junit.Assert.assertEquals(""'"" + str87 + ""' != '"" + ""arg"" + ""'"", str87, ""arg"");
        org.junit.Assert.assertTrue(""'"" + boolean89 + ""' != '"" + false + ""'"", boolean89 == false);
        org.junit.Assert.assertNull(strArray91);
        org.junit.Assert.assertEquals(""'"" + str94 + ""' != '"" + ""[ option: 4  :: null ::  ]"" + ""'"", str94, ""[ option: 4  :: null ::  ]"");
        org.junit.Assert.assertNotNull(optionArray95);
        org.junit.Assert.assertNotNull(iterator96);
        org.junit.Assert.assertNotNull(strArray97);
        org.junit.Assert.assertNotNull(commandLine99);"
15,286,8089,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0287"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option4 = org.apache.commons.cli.OptionBuilder.create('4');
        option4.setDescription("""");
        org.apache.commons.cli.Options options7 = options2.addOption(option4);
        org.apache.commons.cli.PosixParser posixParser8 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option11 = org.apache.commons.cli.OptionBuilder.create('4');
        option11.setDescription("""");
        org.apache.commons.cli.Options options14 = options9.addOption(option11);
        org.apache.commons.cli.CommandLine commandLine15 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray17 = commandLine15.getOptionValues(""hi!"");
        java.lang.String[] strArray18 = commandLine15.getArgs();
        java.util.Properties properties19 = null;
        org.apache.commons.cli.CommandLine commandLine20 = posixParser8.parse(options9, strArray18, properties19);
        org.apache.commons.cli.CommandLine commandLine22 = posixParser1.parse(options7, strArray18, false);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup26 = options23.getOptionGroup(option25);
        org.apache.commons.cli.Option option28 = org.apache.commons.cli.OptionBuilder.create('4');
        char char29 = option28.getValueSeparator();
        org.apache.commons.cli.Option option31 = org.apache.commons.cli.OptionBuilder.create('4');
        option31.setDescription("""");
        option28.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup35 = options23.getOptionGroup(option28);
        boolean boolean37 = options23.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser38 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create('4');
        option41.setDescription("""");
        org.apache.commons.cli.Options options44 = options39.addOption(option41);
        org.apache.commons.cli.CommandLine commandLine45 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray47 = commandLine45.getOptionValues(""hi!"");
        java.lang.String[] strArray48 = commandLine45.getArgs();
        java.util.Properties properties49 = null;
        org.apache.commons.cli.CommandLine commandLine50 = posixParser38.parse(options39, strArray48, properties49);
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser1.parse(options23, strArray48, properties51, true);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        option56.setDescription("""");
        org.apache.commons.cli.Options options59 = options54.addOption(option56);
        java.util.Collection collection60 = options54.getOptionGroups();
        org.apache.commons.cli.Option option62 = org.apache.commons.cli.OptionBuilder.create('4');
        option62.setDescription("""");
        option62.setLongOpt(""hi!"");
        boolean boolean67 = option62.hasArgName();
        org.apache.commons.cli.Options options68 = options54.addOption(option62);
        org.apache.commons.cli.PosixParser posixParser69 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options70 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option72 = org.apache.commons.cli.OptionBuilder.create('4');
        option72.setDescription("""");
        org.apache.commons.cli.Options options75 = options70.addOption(option72);
        org.apache.commons.cli.CommandLine commandLine76 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray78 = commandLine76.getOptionValues(""hi!"");
        java.lang.String str81 = commandLine76.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str83 = commandLine76.getOptionValue(""arg"");
        java.lang.String[] strArray84 = commandLine76.getArgs();
        java.lang.String[] strArray86 = posixParser69.flatten(options75, strArray84, false);
        org.apache.commons.cli.CommandLine commandLine87 = posixParser1.parse(options54, strArray86);
        java.lang.String[] strArray93 = new java.lang.String[] { ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"", ""[ option:  +ARG ::  ]"", ""hi!"", ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"", ""[ option:    :: null ]"" };
        java.util.Properties properties94 = null;
        org.apache.commons.cli.CommandLine commandLine96 = posixParser0.parse(options54, strArray93, properties94, false);
        java.util.Collection collection97 = options54.getOptionGroups();
        boolean boolean99 = options54.hasOption(""[ Options: [ short {} ] [ long {} ]"");
        org.junit.Assert.assertNotNull(option4);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option11);
        org.junit.Assert.assertNotNull(options14);
        org.junit.Assert.assertNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(commandLine20);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertNull(optionGroup26);
        org.junit.Assert.assertNotNull(option28);
        org.junit.Assert.assertTrue(""'"" + char29 + ""' != '"" + '\000' + ""'"", char29 == '\000');
        org.junit.Assert.assertNotNull(option31);
        org.junit.Assert.assertNull(optionGroup35);
        org.junit.Assert.assertTrue(""'"" + boolean37 + ""' != '"" + false + ""'"", boolean37 == false);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNull(strArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNotNull(collection60);
        org.junit.Assert.assertNotNull(option62);
        org.junit.Assert.assertTrue(""'"" + boolean67 + ""' != '"" + true + ""'"", boolean67 == true);
        org.junit.Assert.assertNotNull(options68);
        org.junit.Assert.assertNotNull(option72);
        org.junit.Assert.assertNotNull(options75);
        org.junit.Assert.assertNull(strArray78);
        org.junit.Assert.assertEquals(""'"" + str81 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str81, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(commandLine87);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(commandLine96);
        org.junit.Assert.assertNotNull(collection97);
        org.junit.Assert.assertTrue(""'"" + boolean99 + ""' != '"" + false + ""'"", boolean99 == false);"
16,58,8082,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0059"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option4 = org.apache.commons.cli.OptionBuilder.create('4');
        option4.setDescription("""");
        org.apache.commons.cli.Options options7 = options2.addOption(option4);
        org.apache.commons.cli.PosixParser posixParser8 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option11 = org.apache.commons.cli.OptionBuilder.create('4');
        option11.setDescription("""");
        org.apache.commons.cli.Options options14 = options9.addOption(option11);
        org.apache.commons.cli.CommandLine commandLine15 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray17 = commandLine15.getOptionValues(""hi!"");
        java.lang.String[] strArray18 = commandLine15.getArgs();
        java.util.Properties properties19 = null;
        org.apache.commons.cli.CommandLine commandLine20 = posixParser8.parse(options9, strArray18, properties19);
        org.apache.commons.cli.CommandLine commandLine22 = posixParser1.parse(options7, strArray18, false);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup26 = options23.getOptionGroup(option25);
        org.apache.commons.cli.Option option28 = org.apache.commons.cli.OptionBuilder.create('4');
        char char29 = option28.getValueSeparator();
        org.apache.commons.cli.Option option31 = org.apache.commons.cli.OptionBuilder.create('4');
        option31.setDescription("""");
        option28.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup35 = options23.getOptionGroup(option28);
        boolean boolean37 = options23.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser38 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create('4');
        option41.setDescription("""");
        org.apache.commons.cli.Options options44 = options39.addOption(option41);
        org.apache.commons.cli.CommandLine commandLine45 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray47 = commandLine45.getOptionValues(""hi!"");
        java.lang.String[] strArray48 = commandLine45.getArgs();
        java.util.Properties properties49 = null;
        org.apache.commons.cli.CommandLine commandLine50 = posixParser38.parse(options39, strArray48, properties49);
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser1.parse(options23, strArray48, properties51, true);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        option56.setDescription("""");
        org.apache.commons.cli.Options options59 = options54.addOption(option56);
        java.util.Collection collection60 = options54.getOptionGroups();
        org.apache.commons.cli.Option option62 = org.apache.commons.cli.OptionBuilder.create('4');
        option62.setDescription("""");
        option62.setLongOpt(""hi!"");
        boolean boolean67 = option62.hasArgName();
        org.apache.commons.cli.Options options68 = options54.addOption(option62);
        org.apache.commons.cli.PosixParser posixParser69 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options70 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option72 = org.apache.commons.cli.OptionBuilder.create('4');
        option72.setDescription("""");
        org.apache.commons.cli.Options options75 = options70.addOption(option72);
        org.apache.commons.cli.CommandLine commandLine76 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray78 = commandLine76.getOptionValues(""hi!"");
        java.lang.String str81 = commandLine76.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str83 = commandLine76.getOptionValue(""arg"");
        java.lang.String[] strArray84 = commandLine76.getArgs();
        java.lang.String[] strArray86 = posixParser69.flatten(options75, strArray84, false);
        org.apache.commons.cli.CommandLine commandLine87 = posixParser1.parse(options54, strArray86);
        java.lang.String[] strArray93 = new java.lang.String[] { ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"", ""[ option:  +ARG ::  ]"", ""hi!"", ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"", ""[ option:    :: null ]"" };
        java.util.Properties properties94 = null;
        org.apache.commons.cli.CommandLine commandLine96 = posixParser0.parse(options54, strArray93, properties94, false);
        java.util.Collection collection97 = options54.getOptionGroups();
        org.apache.commons.cli.Option option99 = options54.getOption(""[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]"");
        org.junit.Assert.assertNotNull(option4);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option11);
        org.junit.Assert.assertNotNull(options14);
        org.junit.Assert.assertNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(commandLine20);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertNull(optionGroup26);
        org.junit.Assert.assertNotNull(option28);
        org.junit.Assert.assertTrue(""'"" + char29 + ""' != '"" + '\000' + ""'"", char29 == '\000');
        org.junit.Assert.assertNotNull(option31);
        org.junit.Assert.assertNull(optionGroup35);
        org.junit.Assert.assertTrue(""'"" + boolean37 + ""' != '"" + false + ""'"", boolean37 == false);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNull(strArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNotNull(collection60);
        org.junit.Assert.assertNotNull(option62);
        org.junit.Assert.assertTrue(""'"" + boolean67 + ""' != '"" + true + ""'"", boolean67 == true);
        org.junit.Assert.assertNotNull(options68);
        org.junit.Assert.assertNotNull(option72);
        org.junit.Assert.assertNotNull(options75);
        org.junit.Assert.assertNull(strArray78);
        org.junit.Assert.assertEquals(""'"" + str81 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str81, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(commandLine87);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(commandLine96);
        org.junit.Assert.assertNotNull(collection97);
        org.junit.Assert.assertNull(option99);"
17,162,8445,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0163"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        org.apache.commons.cli.Option option36 = org.apache.commons.cli.OptionBuilder.create('4');
        boolean boolean37 = option36.isRequired();
        org.apache.commons.cli.Options options38 = options22.addOption(option36);
        java.util.List list39 = options38.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser40 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options41 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option43 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup44 = options41.getOptionGroup(option43);
        org.apache.commons.cli.Option option46 = org.apache.commons.cli.OptionBuilder.create('4');
        char char47 = option46.getValueSeparator();
        org.apache.commons.cli.Option option49 = org.apache.commons.cli.OptionBuilder.create('4');
        option49.setDescription("""");
        option46.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup53 = options41.getOptionGroup(option46);
        boolean boolean55 = options41.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        option59.setDescription("""");
        org.apache.commons.cli.Options options62 = options57.addOption(option59);
        org.apache.commons.cli.CommandLine commandLine63 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray65 = commandLine63.getOptionValues(""hi!"");
        java.lang.String str68 = commandLine63.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str70 = commandLine63.getOptionValue(""arg"");
        java.lang.String[] strArray71 = commandLine63.getArgs();
        java.lang.String[] strArray73 = posixParser56.flatten(options62, strArray71, false);
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine75 = posixParser40.parse(options41, strArray73, properties74);
        java.util.List list76 = commandLine75.getArgList();
        java.lang.String[] strArray77 = commandLine75.getArgs();
        java.util.Properties properties78 = null;
        org.apache.commons.cli.CommandLine commandLine80 = posixParser0.parse(options38, strArray77, properties78, false);
        org.apache.commons.cli.Options options81 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option83 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup84 = options81.getOptionGroup(option83);
        boolean boolean85 = option83.hasLongOpt();
        boolean boolean86 = option83.isRequired();
        java.util.List list87 = option83.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup88 = options38.getOptionGroup(option83);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options92 = options38.addOption(""[ option: 4  ::  :: [] ]"", true, ""[ option: 4  :: [ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ] ::  ]"");
            org.junit.Assert.fail(""Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertNotNull(option36);
        org.junit.Assert.assertTrue(""'"" + boolean37 + ""' != '"" + false + ""'"", boolean37 == false);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(list39);
        org.junit.Assert.assertNotNull(option43);
        org.junit.Assert.assertNull(optionGroup44);
        org.junit.Assert.assertNotNull(option46);
        org.junit.Assert.assertTrue(""'"" + char47 + ""' != '"" + '\000' + ""'"", char47 == '\000');
        org.junit.Assert.assertNotNull(option49);
        org.junit.Assert.assertNull(optionGroup53);
        org.junit.Assert.assertTrue(""'"" + boolean55 + ""' != '"" + false + ""'"", boolean55 == false);
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNotNull(options62);
        org.junit.Assert.assertNull(strArray65);
        org.junit.Assert.assertEquals(""'"" + str68 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str68, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine75);
        org.junit.Assert.assertNotNull(list76);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(commandLine80);
        org.junit.Assert.assertNotNull(option83);
        org.junit.Assert.assertNull(optionGroup84);
        org.junit.Assert.assertTrue(""'"" + boolean85 + ""' != '"" + false + ""'"", boolean85 == false);
        org.junit.Assert.assertTrue(""'"" + boolean86 + ""' != '"" + false + ""'"", boolean86 == false);
        org.junit.Assert.assertNotNull(list87);
        org.junit.Assert.assertNull(optionGroup88);"
18,430,8439,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0431"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        org.apache.commons.cli.Option option36 = org.apache.commons.cli.OptionBuilder.create('4');
        boolean boolean37 = option36.isRequired();
        org.apache.commons.cli.Options options38 = options22.addOption(option36);
        java.util.List list39 = options38.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser40 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options41 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option43 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup44 = options41.getOptionGroup(option43);
        org.apache.commons.cli.Option option46 = org.apache.commons.cli.OptionBuilder.create('4');
        char char47 = option46.getValueSeparator();
        org.apache.commons.cli.Option option49 = org.apache.commons.cli.OptionBuilder.create('4');
        option49.setDescription("""");
        option46.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup53 = options41.getOptionGroup(option46);
        boolean boolean55 = options41.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        option59.setDescription("""");
        org.apache.commons.cli.Options options62 = options57.addOption(option59);
        org.apache.commons.cli.CommandLine commandLine63 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray65 = commandLine63.getOptionValues(""hi!"");
        java.lang.String str68 = commandLine63.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str70 = commandLine63.getOptionValue(""arg"");
        java.lang.String[] strArray71 = commandLine63.getArgs();
        java.lang.String[] strArray73 = posixParser56.flatten(options62, strArray71, false);
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine75 = posixParser40.parse(options41, strArray73, properties74);
        java.util.List list76 = commandLine75.getArgList();
        java.lang.String[] strArray77 = commandLine75.getArgs();
        java.util.Properties properties78 = null;
        org.apache.commons.cli.CommandLine commandLine80 = posixParser0.parse(options38, strArray77, properties78, false);
        org.apache.commons.cli.Options options81 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option83 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup84 = options81.getOptionGroup(option83);
        boolean boolean85 = option83.hasLongOpt();
        boolean boolean86 = option83.isRequired();
        java.util.List list87 = option83.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup88 = options38.getOptionGroup(option83);
        boolean boolean89 = option83.hasArgName();
        // The following exception was thrown during execution in test generation
        try {
            option83.addValue(""org.apache.commons.cli.MissingOptionException: "");
            org.junit.Assert.fail(""Expected exception of type java.lang.RuntimeException; message: NO_ARGS_ALLOWED"");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertNotNull(option36);
        org.junit.Assert.assertTrue(""'"" + boolean37 + ""' != '"" + false + ""'"", boolean37 == false);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(list39);
        org.junit.Assert.assertNotNull(option43);
        org.junit.Assert.assertNull(optionGroup44);
        org.junit.Assert.assertNotNull(option46);
        org.junit.Assert.assertTrue(""'"" + char47 + ""' != '"" + '\000' + ""'"", char47 == '\000');
        org.junit.Assert.assertNotNull(option49);
        org.junit.Assert.assertNull(optionGroup53);
        org.junit.Assert.assertTrue(""'"" + boolean55 + ""' != '"" + false + ""'"", boolean55 == false);
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNotNull(options62);
        org.junit.Assert.assertNull(strArray65);
        org.junit.Assert.assertEquals(""'"" + str68 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str68, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine75);
        org.junit.Assert.assertNotNull(list76);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(commandLine80);
        org.junit.Assert.assertNotNull(option83);
        org.junit.Assert.assertNull(optionGroup84);
        org.junit.Assert.assertTrue(""'"" + boolean85 + ""' != '"" + false + ""'"", boolean85 == false);
        org.junit.Assert.assertTrue(""'"" + boolean86 + ""' != '"" + false + ""'"", boolean86 == false);
        org.junit.Assert.assertNotNull(list87);
        org.junit.Assert.assertNull(optionGroup88);
        org.junit.Assert.assertTrue(""'"" + boolean89 + ""' != '"" + true + ""'"", boolean89 == true);"
19,28,8296,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0029"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option6.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create('4');
        option38.setDescription("""");
        org.apache.commons.cli.Options options41 = options36.addOption(option38);
        java.util.Collection collection42 = options36.getOptionGroups();
        org.apache.commons.cli.Options options46 = options36.addOption("""", false, ""arg"");
        org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option49 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup50 = options47.getOptionGroup(option49);
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        char char53 = option52.getValueSeparator();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("""");
        option52.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup59 = options47.getOptionGroup(option52);
        boolean boolean60 = option52.hasArgName();
        org.apache.commons.cli.Options options61 = options36.addOption(option52);
        java.util.List list62 = options36.helpOptions();
        org.apache.commons.cli.CommandLine commandLine63 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray65 = commandLine63.getOptionValues(""hi!"");
        java.lang.String str68 = commandLine63.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str70 = commandLine63.getOptionValue(""arg"");
        java.lang.String[] strArray71 = commandLine63.getArgs();
        java.lang.String[] strArray73 = posixParser0.flatten(options36, strArray71, false);
        org.apache.commons.cli.PosixParser posixParser74 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options75 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option77 = org.apache.commons.cli.OptionBuilder.create('4');
        option77.setDescription("""");
        org.apache.commons.cli.Options options80 = options75.addOption(option77);
        java.util.Collection collection81 = options75.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine82 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray84 = commandLine82.getOptionValues(""hi!"");
        java.lang.String str87 = commandLine82.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str89 = commandLine82.getOptionValue(""arg"");
        java.lang.String[] strArray90 = commandLine82.getArgs();
        java.util.Properties properties91 = null;
        org.apache.commons.cli.CommandLine commandLine92 = posixParser74.parse(options75, strArray90, properties91);
        java.lang.String[] strArray93 = null;
        org.apache.commons.cli.CommandLine commandLine94 = posixParser0.parse(options75, strArray93);
        java.util.List list95 = options75.getRequiredOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue(""'"" + char7 + ""' != '"" + '\000' + ""'"", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertNotNull(collection42);
        org.junit.Assert.assertNotNull(options46);
        org.junit.Assert.assertNotNull(option49);
        org.junit.Assert.assertNull(optionGroup50);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertTrue(""'"" + char53 + ""' != '"" + '\000' + ""'"", char53 == '\000');
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNull(optionGroup59);
        org.junit.Assert.assertTrue(""'"" + boolean60 + ""' != '"" + true + ""'"", boolean60 == true);
        org.junit.Assert.assertNotNull(options61);
        org.junit.Assert.assertNotNull(list62);
        org.junit.Assert.assertNull(strArray65);
        org.junit.Assert.assertEquals(""'"" + str68 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str68, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(option77);
        org.junit.Assert.assertNotNull(options80);
        org.junit.Assert.assertNotNull(collection81);
        org.junit.Assert.assertNull(strArray84);
        org.junit.Assert.assertEquals(""'"" + str87 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str87, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(commandLine92);
        org.junit.Assert.assertNotNull(commandLine94);
        org.junit.Assert.assertNotNull(list95);"
20,344,8272,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0345"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken(""hi!"", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.PosixParser posixParser22 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup26 = options23.getOptionGroup(option25);
        org.apache.commons.cli.Option option28 = org.apache.commons.cli.OptionBuilder.create('4');
        char char29 = option28.getValueSeparator();
        org.apache.commons.cli.Option option31 = org.apache.commons.cli.OptionBuilder.create('4');
        option31.setDescription("""");
        option28.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup35 = options23.getOptionGroup(option28);
        boolean boolean37 = options23.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser38 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create('4');
        option41.setDescription("""");
        org.apache.commons.cli.Options options44 = options39.addOption(option41);
        org.apache.commons.cli.CommandLine commandLine45 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray47 = commandLine45.getOptionValues(""hi!"");
        java.lang.String str50 = commandLine45.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str52 = commandLine45.getOptionValue(""arg"");
        java.lang.String[] strArray53 = commandLine45.getArgs();
        java.lang.String[] strArray55 = posixParser38.flatten(options44, strArray53, false);
        java.util.Properties properties56 = null;
        org.apache.commons.cli.CommandLine commandLine57 = posixParser22.parse(options23, strArray55, properties56);
        org.apache.commons.cli.Options options58 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option60 = org.apache.commons.cli.OptionBuilder.create('4');
        option60.setDescription("""");
        org.apache.commons.cli.Options options63 = options58.addOption(option60);
        java.util.Collection collection64 = options58.getOptionGroups();
        org.apache.commons.cli.Options options68 = options58.addOption("""", false, ""arg"");
        org.apache.commons.cli.Options options69 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option71 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup72 = options69.getOptionGroup(option71);
        org.apache.commons.cli.Option option74 = org.apache.commons.cli.OptionBuilder.create('4');
        char char75 = option74.getValueSeparator();
        org.apache.commons.cli.Option option77 = org.apache.commons.cli.OptionBuilder.create('4');
        option77.setDescription("""");
        option74.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup81 = options69.getOptionGroup(option74);
        boolean boolean82 = option74.hasArgName();
        org.apache.commons.cli.Options options83 = options58.addOption(option74);
        java.util.List list84 = options58.helpOptions();
        org.apache.commons.cli.CommandLine commandLine85 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray87 = commandLine85.getOptionValues(""hi!"");
        java.lang.String str90 = commandLine85.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str92 = commandLine85.getOptionValue(""arg"");
        java.lang.String[] strArray93 = commandLine85.getArgs();
        java.lang.String[] strArray95 = posixParser22.flatten(options58, strArray93, false);
        java.util.Properties properties96 = null;
        org.apache.commons.cli.CommandLine commandLine98 = posixParser0.parse(options21, strArray95, properties96, true);
        java.util.Collection collection99 = options21.getOptionGroups();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertNull(optionGroup26);
        org.junit.Assert.assertNotNull(option28);
        org.junit.Assert.assertTrue(""'"" + char29 + ""' != '"" + '\000' + ""'"", char29 == '\000');
        org.junit.Assert.assertNotNull(option31);
        org.junit.Assert.assertNull(optionGroup35);
        org.junit.Assert.assertTrue(""'"" + boolean37 + ""' != '"" + false + ""'"", boolean37 == false);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNull(strArray47);
        org.junit.Assert.assertEquals(""'"" + str50 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str50, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(commandLine57);
        org.junit.Assert.assertNotNull(option60);
        org.junit.Assert.assertNotNull(options63);
        org.junit.Assert.assertNotNull(collection64);
        org.junit.Assert.assertNotNull(options68);
        org.junit.Assert.assertNotNull(option71);
        org.junit.Assert.assertNull(optionGroup72);
        org.junit.Assert.assertNotNull(option74);
        org.junit.Assert.assertTrue(""'"" + char75 + ""' != '"" + '\000' + ""'"", char75 == '\000');
        org.junit.Assert.assertNotNull(option77);
        org.junit.Assert.assertNull(optionGroup81);
        org.junit.Assert.assertTrue(""'"" + boolean82 + ""' != '"" + true + ""'"", boolean82 == true);
        org.junit.Assert.assertNotNull(options83);
        org.junit.Assert.assertNotNull(list84);
        org.junit.Assert.assertNull(strArray87);
        org.junit.Assert.assertEquals(""'"" + str90 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str90, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(strArray95);
        org.junit.Assert.assertNotNull(commandLine98);
        org.junit.Assert.assertNotNull(collection99);"
21,189,8044,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0190"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option4 = org.apache.commons.cli.OptionBuilder.create('4');
        option4.setDescription("""");
        org.apache.commons.cli.Options options7 = options2.addOption(option4);
        org.apache.commons.cli.PosixParser posixParser8 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option11 = org.apache.commons.cli.OptionBuilder.create('4');
        option11.setDescription("""");
        org.apache.commons.cli.Options options14 = options9.addOption(option11);
        org.apache.commons.cli.CommandLine commandLine15 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray17 = commandLine15.getOptionValues(""hi!"");
        java.lang.String[] strArray18 = commandLine15.getArgs();
        java.util.Properties properties19 = null;
        org.apache.commons.cli.CommandLine commandLine20 = posixParser8.parse(options9, strArray18, properties19);
        org.apache.commons.cli.CommandLine commandLine22 = posixParser1.parse(options7, strArray18, false);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup26 = options23.getOptionGroup(option25);
        org.apache.commons.cli.Option option28 = org.apache.commons.cli.OptionBuilder.create('4');
        char char29 = option28.getValueSeparator();
        org.apache.commons.cli.Option option31 = org.apache.commons.cli.OptionBuilder.create('4');
        option31.setDescription("""");
        option28.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup35 = options23.getOptionGroup(option28);
        boolean boolean37 = options23.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser38 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create('4');
        option41.setDescription("""");
        org.apache.commons.cli.Options options44 = options39.addOption(option41);
        org.apache.commons.cli.CommandLine commandLine45 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray47 = commandLine45.getOptionValues(""hi!"");
        java.lang.String[] strArray48 = commandLine45.getArgs();
        java.util.Properties properties49 = null;
        org.apache.commons.cli.CommandLine commandLine50 = posixParser38.parse(options39, strArray48, properties49);
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser1.parse(options23, strArray48, properties51, true);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        option56.setDescription("""");
        org.apache.commons.cli.Options options59 = options54.addOption(option56);
        java.util.Collection collection60 = options54.getOptionGroups();
        org.apache.commons.cli.Option option62 = org.apache.commons.cli.OptionBuilder.create('4');
        option62.setDescription("""");
        option62.setLongOpt(""hi!"");
        boolean boolean67 = option62.hasArgName();
        org.apache.commons.cli.Options options68 = options54.addOption(option62);
        org.apache.commons.cli.PosixParser posixParser69 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options70 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option72 = org.apache.commons.cli.OptionBuilder.create('4');
        option72.setDescription("""");
        org.apache.commons.cli.Options options75 = options70.addOption(option72);
        org.apache.commons.cli.CommandLine commandLine76 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray78 = commandLine76.getOptionValues(""hi!"");
        java.lang.String str81 = commandLine76.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str83 = commandLine76.getOptionValue(""arg"");
        java.lang.String[] strArray84 = commandLine76.getArgs();
        java.lang.String[] strArray86 = posixParser69.flatten(options75, strArray84, false);
        org.apache.commons.cli.CommandLine commandLine87 = posixParser1.parse(options54, strArray86);
        java.lang.String[] strArray93 = new java.lang.String[] { ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"", ""[ option:  +ARG ::  ]"", ""hi!"", ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"", ""[ option:    :: null ]"" };
        java.util.Properties properties94 = null;
        org.apache.commons.cli.CommandLine commandLine96 = posixParser0.parse(options54, strArray93, properties94, false);
        org.apache.commons.cli.Option option98 = options54.getOption(""[ option: 4  :: null ::  ]"");
        java.util.Collection collection99 = options54.getOptions();
        org.junit.Assert.assertNotNull(option4);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option11);
        org.junit.Assert.assertNotNull(options14);
        org.junit.Assert.assertNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(commandLine20);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertNull(optionGroup26);
        org.junit.Assert.assertNotNull(option28);
        org.junit.Assert.assertTrue(""'"" + char29 + ""' != '"" + '\000' + ""'"", char29 == '\000');
        org.junit.Assert.assertNotNull(option31);
        org.junit.Assert.assertNull(optionGroup35);
        org.junit.Assert.assertTrue(""'"" + boolean37 + ""' != '"" + false + ""'"", boolean37 == false);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNull(strArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNotNull(collection60);
        org.junit.Assert.assertNotNull(option62);
        org.junit.Assert.assertTrue(""'"" + boolean67 + ""' != '"" + true + ""'"", boolean67 == true);
        org.junit.Assert.assertNotNull(options68);
        org.junit.Assert.assertNotNull(option72);
        org.junit.Assert.assertNotNull(options75);
        org.junit.Assert.assertNull(strArray78);
        org.junit.Assert.assertEquals(""'"" + str81 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str81, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(commandLine87);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(commandLine96);
        org.junit.Assert.assertNull(option98);
        org.junit.Assert.assertNotNull(collection99);"
22,111,7866,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0112"");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('4');
        java.lang.String str3 = option1.getValue(""arg"");
        org.apache.commons.cli.MissingOptionException missingOptionException5 = new org.apache.commons.cli.MissingOptionException(""hi!"");
        boolean boolean6 = option1.equals((java.lang.Object) ""hi!"");
        java.lang.String str7 = option1.toString();
        java.lang.String str9 = option1.getValue(100);
        java.lang.String str10 = option1.getKey();
        org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option14 = org.apache.commons.cli.OptionBuilder.create('4');
        option14.setDescription("""");
        org.apache.commons.cli.Options options17 = options12.addOption(option14);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option21 = org.apache.commons.cli.OptionBuilder.create('4');
        option21.setDescription("""");
        org.apache.commons.cli.Options options24 = options19.addOption(option21);
        org.apache.commons.cli.CommandLine commandLine25 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray27 = commandLine25.getOptionValues(""hi!"");
        java.lang.String[] strArray28 = commandLine25.getArgs();
        java.util.Properties properties29 = null;
        org.apache.commons.cli.CommandLine commandLine30 = posixParser18.parse(options19, strArray28, properties29);
        org.apache.commons.cli.CommandLine commandLine32 = posixParser11.parse(options17, strArray28, false);
        org.apache.commons.cli.Options options33 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option35 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup36 = options33.getOptionGroup(option35);
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create('4');
        char char39 = option38.getValueSeparator();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create('4');
        option41.setDescription("""");
        option38.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup45 = options33.getOptionGroup(option38);
        boolean boolean47 = options33.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser48 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create('4');
        option51.setDescription("""");
        org.apache.commons.cli.Options options54 = options49.addOption(option51);
        org.apache.commons.cli.CommandLine commandLine55 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray57 = commandLine55.getOptionValues(""hi!"");
        java.lang.String[] strArray58 = commandLine55.getArgs();
        java.util.Properties properties59 = null;
        org.apache.commons.cli.CommandLine commandLine60 = posixParser48.parse(options49, strArray58, properties59);
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser11.parse(options33, strArray58, properties61, true);
        org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option66 = org.apache.commons.cli.OptionBuilder.create('4');
        option66.setDescription("""");
        org.apache.commons.cli.Options options69 = options64.addOption(option66);
        java.util.Collection collection70 = options64.getOptions();
        java.lang.String[] strArray71 = null;
        org.apache.commons.cli.CommandLine commandLine73 = posixParser11.parse(options64, strArray71, true);
        org.apache.commons.cli.PosixParser posixParser74 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options75 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option77 = org.apache.commons.cli.OptionBuilder.create('4');
        option77.setDescription("""");
        org.apache.commons.cli.Options options80 = options75.addOption(option77);
        org.apache.commons.cli.CommandLine commandLine81 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray83 = commandLine81.getOptionValues(""hi!"");
        java.lang.String[] strArray84 = commandLine81.getArgs();
        java.util.Properties properties85 = null;
        org.apache.commons.cli.CommandLine commandLine86 = posixParser74.parse(options75, strArray84, properties85);
        java.lang.String[] strArray89 = new java.lang.String[] { ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"", ""hi!"" };
        java.util.Properties properties90 = null;
        org.apache.commons.cli.CommandLine commandLine92 = posixParser11.parse(options75, strArray89, properties90, true);
        option1.setType((java.lang.Object) properties90);
        java.lang.String str94 = option1.getArgName();
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertEquals(""'"" + str3 + ""' != '"" + ""arg"" + ""'"", str3, ""arg"");
        org.junit.Assert.assertTrue(""'"" + boolean6 + ""' != '"" + false + ""'"", boolean6 == false);
        org.junit.Assert.assertEquals(""'"" + str7 + ""' != '"" + ""[ option: 4  :: null ]"" + ""'"", str7, ""[ option: 4  :: null ]"");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals(""'"" + str10 + ""' != '"" + ""4"" + ""'"", str10, ""4"");
        org.junit.Assert.assertNotNull(option14);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(option21);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(commandLine30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(option35);
        org.junit.Assert.assertNull(optionGroup36);
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertTrue(""'"" + char39 + ""' != '"" + '\000' + ""'"", char39 == '\000');
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup45);
        org.junit.Assert.assertTrue(""'"" + boolean47 + ""' != '"" + false + ""'"", boolean47 == false);
        org.junit.Assert.assertNotNull(option51);
        org.junit.Assert.assertNotNull(options54);
        org.junit.Assert.assertNull(strArray57);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(commandLine60);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(option66);
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertNotNull(collection70);
        org.junit.Assert.assertNotNull(commandLine73);
        org.junit.Assert.assertNotNull(option77);
        org.junit.Assert.assertNotNull(options80);
        org.junit.Assert.assertNull(strArray83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(commandLine86);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(commandLine92);
        org.junit.Assert.assertEquals(""'"" + str94 + ""' != '"" + ""arg"" + ""'"", str94, ""arg"");"
23,436,8228,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0437"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option6.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        org.apache.commons.cli.Options options36 = null;
        org.apache.commons.cli.CommandLine commandLine37 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray39 = commandLine37.getOptionValues(""hi!"");
        java.lang.String[] strArray40 = commandLine37.getArgs();
        java.lang.String[] strArray42 = posixParser0.flatten(options36, strArray40, false);
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup46 = options43.getOptionGroup(option45);
        boolean boolean47 = option45.hasLongOpt();
        boolean boolean48 = option45.isRequired();
        java.util.List list49 = option45.getValuesList();
        boolean boolean50 = option45.isRequired();
        java.lang.String str51 = option45.toString();
        org.apache.commons.cli.Options options52 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option54 = org.apache.commons.cli.OptionBuilder.create('4');
        option54.setDescription("""");
        org.apache.commons.cli.Options options57 = options52.addOption(option54);
        java.util.Collection collection58 = options52.getOptions();
        org.apache.commons.cli.Options options59 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option61 = org.apache.commons.cli.OptionBuilder.create('4');
        char char62 = option61.getValueSeparator();
        org.apache.commons.cli.Option option64 = org.apache.commons.cli.OptionBuilder.create('4');
        option64.setDescription("""");
        option61.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup68 = options59.getOptionGroup(option61);
        option61.setOptionalArg(true);
        int int71 = option61.getId();
        org.apache.commons.cli.Options options72 = options52.addOption(option61);
        option45.setType((java.lang.Object) options72);
        org.apache.commons.cli.CommandLine commandLine74 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray76 = commandLine74.getOptionValues(""hi!"");
        java.lang.String[] strArray77 = commandLine74.getArgs();
        java.lang.String str79 = commandLine74.getOptionValue(""hi!"");
        boolean boolean81 = commandLine74.hasOption("""");
        java.lang.String str84 = commandLine74.getOptionValue(""[ option: 4  :: null ]"", ""org.apache.commons.cli.MissingOptionException: hi!"");
        java.lang.String[] strArray86 = commandLine74.getOptionValues('4');
        java.lang.String[] strArray87 = commandLine74.getArgs();
        java.lang.Object obj89 = commandLine74.getOptionObject(""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String[] strArray90 = commandLine74.getArgs();
        java.util.Properties properties91 = null;
        org.apache.commons.cli.CommandLine commandLine92 = posixParser0.parse(options72, strArray90, properties91);
        posixParser0.burstToken(""hi!"", false);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue(""'"" + char7 + ""' != '"" + '\000' + ""'"", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNull(optionGroup46);
        org.junit.Assert.assertTrue(""'"" + boolean47 + ""' != '"" + false + ""'"", boolean47 == false);
        org.junit.Assert.assertTrue(""'"" + boolean48 + ""' != '"" + false + ""'"", boolean48 == false);
        org.junit.Assert.assertNotNull(list49);
        org.junit.Assert.assertTrue(""'"" + boolean50 + ""' != '"" + false + ""'"", boolean50 == false);
        org.junit.Assert.assertEquals(""'"" + str51 + ""' != '"" + ""[ option:    :: null ]"" + ""'"", str51, ""[ option:    :: null ]"");
        org.junit.Assert.assertNotNull(option54);
        org.junit.Assert.assertNotNull(options57);
        org.junit.Assert.assertNotNull(collection58);
        org.junit.Assert.assertNotNull(option61);
        org.junit.Assert.assertTrue(""'"" + char62 + ""' != '"" + '\000' + ""'"", char62 == '\000');
        org.junit.Assert.assertNotNull(option64);
        org.junit.Assert.assertNull(optionGroup68);
        org.junit.Assert.assertTrue(""'"" + int71 + ""' != '"" + 52 + ""'"", int71 == 52);
        org.junit.Assert.assertNotNull(options72);
        org.junit.Assert.assertNull(strArray76);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertTrue(""'"" + boolean81 + ""' != '"" + false + ""'"", boolean81 == false);
        org.junit.Assert.assertEquals(""'"" + str84 + ""' != '"" + ""org.apache.commons.cli.MissingOptionException: hi!"" + ""'"", str84, ""org.apache.commons.cli.MissingOptionException: hi!"");
        org.junit.Assert.assertNull(strArray86);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNull(obj89);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(commandLine92);"
24,174,7823,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0175"");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('4');
        java.lang.String str3 = option1.getValue(""arg"");
        org.apache.commons.cli.MissingOptionException missingOptionException5 = new org.apache.commons.cli.MissingOptionException(""hi!"");
        boolean boolean6 = option1.equals((java.lang.Object) ""hi!"");
        java.lang.String str7 = option1.toString();
        java.lang.String str9 = option1.getValue(100);
        java.lang.String str10 = option1.getKey();
        org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option14 = org.apache.commons.cli.OptionBuilder.create('4');
        option14.setDescription("""");
        org.apache.commons.cli.Options options17 = options12.addOption(option14);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option21 = org.apache.commons.cli.OptionBuilder.create('4');
        option21.setDescription("""");
        org.apache.commons.cli.Options options24 = options19.addOption(option21);
        org.apache.commons.cli.CommandLine commandLine25 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray27 = commandLine25.getOptionValues(""hi!"");
        java.lang.String[] strArray28 = commandLine25.getArgs();
        java.util.Properties properties29 = null;
        org.apache.commons.cli.CommandLine commandLine30 = posixParser18.parse(options19, strArray28, properties29);
        org.apache.commons.cli.CommandLine commandLine32 = posixParser11.parse(options17, strArray28, false);
        org.apache.commons.cli.Options options33 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option35 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup36 = options33.getOptionGroup(option35);
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create('4');
        char char39 = option38.getValueSeparator();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create('4');
        option41.setDescription("""");
        option38.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup45 = options33.getOptionGroup(option38);
        boolean boolean47 = options33.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser48 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create('4');
        option51.setDescription("""");
        org.apache.commons.cli.Options options54 = options49.addOption(option51);
        org.apache.commons.cli.CommandLine commandLine55 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray57 = commandLine55.getOptionValues(""hi!"");
        java.lang.String[] strArray58 = commandLine55.getArgs();
        java.util.Properties properties59 = null;
        org.apache.commons.cli.CommandLine commandLine60 = posixParser48.parse(options49, strArray58, properties59);
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser11.parse(options33, strArray58, properties61, true);
        org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option66 = org.apache.commons.cli.OptionBuilder.create('4');
        option66.setDescription("""");
        org.apache.commons.cli.Options options69 = options64.addOption(option66);
        java.util.Collection collection70 = options64.getOptions();
        java.lang.String[] strArray71 = null;
        org.apache.commons.cli.CommandLine commandLine73 = posixParser11.parse(options64, strArray71, true);
        org.apache.commons.cli.PosixParser posixParser74 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options75 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option77 = org.apache.commons.cli.OptionBuilder.create('4');
        option77.setDescription("""");
        org.apache.commons.cli.Options options80 = options75.addOption(option77);
        org.apache.commons.cli.CommandLine commandLine81 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray83 = commandLine81.getOptionValues(""hi!"");
        java.lang.String[] strArray84 = commandLine81.getArgs();
        java.util.Properties properties85 = null;
        org.apache.commons.cli.CommandLine commandLine86 = posixParser74.parse(options75, strArray84, properties85);
        java.lang.String[] strArray89 = new java.lang.String[] { ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"", ""hi!"" };
        java.util.Properties properties90 = null;
        org.apache.commons.cli.CommandLine commandLine92 = posixParser11.parse(options75, strArray89, properties90, true);
        option1.setType((java.lang.Object) properties90);
        java.lang.String str94 = option1.getDescription();
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertEquals(""'"" + str3 + ""' != '"" + ""arg"" + ""'"", str3, ""arg"");
        org.junit.Assert.assertTrue(""'"" + boolean6 + ""' != '"" + false + ""'"", boolean6 == false);
        org.junit.Assert.assertEquals(""'"" + str7 + ""' != '"" + ""[ option: 4  :: null ]"" + ""'"", str7, ""[ option: 4  :: null ]"");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals(""'"" + str10 + ""' != '"" + ""4"" + ""'"", str10, ""4"");
        org.junit.Assert.assertNotNull(option14);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(option21);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(commandLine30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(option35);
        org.junit.Assert.assertNull(optionGroup36);
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertTrue(""'"" + char39 + ""' != '"" + '\000' + ""'"", char39 == '\000');
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup45);
        org.junit.Assert.assertTrue(""'"" + boolean47 + ""' != '"" + false + ""'"", boolean47 == false);
        org.junit.Assert.assertNotNull(option51);
        org.junit.Assert.assertNotNull(options54);
        org.junit.Assert.assertNull(strArray57);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(commandLine60);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(option66);
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertNotNull(collection70);
        org.junit.Assert.assertNotNull(commandLine73);
        org.junit.Assert.assertNotNull(option77);
        org.junit.Assert.assertNotNull(options80);
        org.junit.Assert.assertNull(strArray83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(commandLine86);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(commandLine92);
        org.junit.Assert.assertNull(str94);"
25,51,7981,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0052"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option4 = org.apache.commons.cli.OptionBuilder.create('4');
        option4.setDescription("""");
        org.apache.commons.cli.Options options7 = options2.addOption(option4);
        org.apache.commons.cli.PosixParser posixParser8 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option11 = org.apache.commons.cli.OptionBuilder.create('4');
        option11.setDescription("""");
        org.apache.commons.cli.Options options14 = options9.addOption(option11);
        org.apache.commons.cli.CommandLine commandLine15 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray17 = commandLine15.getOptionValues(""hi!"");
        java.lang.String[] strArray18 = commandLine15.getArgs();
        java.util.Properties properties19 = null;
        org.apache.commons.cli.CommandLine commandLine20 = posixParser8.parse(options9, strArray18, properties19);
        org.apache.commons.cli.CommandLine commandLine22 = posixParser1.parse(options7, strArray18, false);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup26 = options23.getOptionGroup(option25);
        org.apache.commons.cli.Option option28 = org.apache.commons.cli.OptionBuilder.create('4');
        char char29 = option28.getValueSeparator();
        org.apache.commons.cli.Option option31 = org.apache.commons.cli.OptionBuilder.create('4');
        option31.setDescription("""");
        option28.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup35 = options23.getOptionGroup(option28);
        boolean boolean37 = options23.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser38 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create('4');
        option41.setDescription("""");
        org.apache.commons.cli.Options options44 = options39.addOption(option41);
        org.apache.commons.cli.CommandLine commandLine45 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray47 = commandLine45.getOptionValues(""hi!"");
        java.lang.String[] strArray48 = commandLine45.getArgs();
        java.util.Properties properties49 = null;
        org.apache.commons.cli.CommandLine commandLine50 = posixParser38.parse(options39, strArray48, properties49);
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser1.parse(options23, strArray48, properties51, true);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        option56.setDescription("""");
        org.apache.commons.cli.Options options59 = options54.addOption(option56);
        java.util.Collection collection60 = options54.getOptionGroups();
        org.apache.commons.cli.Option option62 = org.apache.commons.cli.OptionBuilder.create('4');
        option62.setDescription("""");
        option62.setLongOpt(""hi!"");
        boolean boolean67 = option62.hasArgName();
        org.apache.commons.cli.Options options68 = options54.addOption(option62);
        org.apache.commons.cli.PosixParser posixParser69 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options70 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option72 = org.apache.commons.cli.OptionBuilder.create('4');
        option72.setDescription("""");
        org.apache.commons.cli.Options options75 = options70.addOption(option72);
        org.apache.commons.cli.CommandLine commandLine76 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray78 = commandLine76.getOptionValues(""hi!"");
        java.lang.String str81 = commandLine76.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str83 = commandLine76.getOptionValue(""arg"");
        java.lang.String[] strArray84 = commandLine76.getArgs();
        java.lang.String[] strArray86 = posixParser69.flatten(options75, strArray84, false);
        org.apache.commons.cli.CommandLine commandLine87 = posixParser1.parse(options54, strArray86);
        java.lang.String[] strArray93 = new java.lang.String[] { ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"", ""[ option:  +ARG ::  ]"", ""hi!"", ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"", ""[ option:    :: null ]"" };
        java.util.Properties properties94 = null;
        org.apache.commons.cli.CommandLine commandLine96 = posixParser0.parse(options54, strArray93, properties94, false);
        java.lang.String[] strArray98 = commandLine96.getOptionValues(""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"");
        org.junit.Assert.assertNotNull(option4);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option11);
        org.junit.Assert.assertNotNull(options14);
        org.junit.Assert.assertNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(commandLine20);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertNull(optionGroup26);
        org.junit.Assert.assertNotNull(option28);
        org.junit.Assert.assertTrue(""'"" + char29 + ""' != '"" + '\000' + ""'"", char29 == '\000');
        org.junit.Assert.assertNotNull(option31);
        org.junit.Assert.assertNull(optionGroup35);
        org.junit.Assert.assertTrue(""'"" + boolean37 + ""' != '"" + false + ""'"", boolean37 == false);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNull(strArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNotNull(collection60);
        org.junit.Assert.assertNotNull(option62);
        org.junit.Assert.assertTrue(""'"" + boolean67 + ""' != '"" + true + ""'"", boolean67 == true);
        org.junit.Assert.assertNotNull(options68);
        org.junit.Assert.assertNotNull(option72);
        org.junit.Assert.assertNotNull(options75);
        org.junit.Assert.assertNull(strArray78);
        org.junit.Assert.assertEquals(""'"" + str81 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str81, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(commandLine87);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(commandLine96);
        org.junit.Assert.assertNull(strArray98);"
26,308,8213,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0309"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        java.util.Collection collection22 = options6.getOptionGroups();
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create('4');
        option25.setDescription("""");
        org.apache.commons.cli.Options options28 = options23.addOption(option25);
        java.util.Collection collection29 = options23.getOptionGroups();
        org.apache.commons.cli.Options options33 = options23.addOption("""", false, ""arg"");
        java.util.Collection collection34 = options23.getOptionGroups();
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option37 = org.apache.commons.cli.OptionBuilder.create('4');
        option37.setDescription("""");
        org.apache.commons.cli.Options options40 = options35.addOption(option37);
        option37.setValueSeparator(' ');
        org.apache.commons.cli.OptionGroup optionGroup43 = options23.getOptionGroup(option37);
        option37.setRequired(false);
        org.apache.commons.cli.CommandLine commandLine46 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray48 = commandLine46.getOptionValues(""hi!"");
        java.lang.String[] strArray49 = commandLine46.getArgs();
        boolean boolean50 = option37.equals((java.lang.Object) strArray49);
        org.apache.commons.cli.OptionGroup optionGroup51 = options6.getOptionGroup(option37);
        org.apache.commons.cli.Options options56 = options6.addOption(""arg"", ""org.apache.commons.cli.UnrecognizedOptionException: hi!"", false, ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.Options options60 = options6.addOption("" "", false, ""hi!"");
        org.apache.commons.cli.Options options61 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option63 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup64 = options61.getOptionGroup(option63);
        org.apache.commons.cli.Option option66 = org.apache.commons.cli.OptionBuilder.create('4');
        char char67 = option66.getValueSeparator();
        org.apache.commons.cli.Option option69 = org.apache.commons.cli.OptionBuilder.create('4');
        option69.setDescription("""");
        option66.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup73 = options61.getOptionGroup(option66);
        int int74 = option66.getId();
        org.apache.commons.cli.Option option78 = new org.apache.commons.cli.Option("""", false, """");
        org.apache.commons.cli.Option option80 = org.apache.commons.cli.OptionBuilder.create('4');
        option80.setDescription("""");
        boolean boolean83 = option80.hasValueSeparator();
        java.util.List list84 = option80.getValuesList();
        int int85 = option80.getArgs();
        option78.setType((java.lang.Object) int85);
        option66.setType((java.lang.Object) int85);
        java.lang.String str89 = option66.getValue(0);
        org.apache.commons.cli.OptionGroup optionGroup90 = options60.getOptionGroup(option66);
        java.util.Collection collection91 = options60.getOptionGroups();
        java.util.Collection collection92 = options60.getOptionGroups();
        java.lang.String str93 = options60.toString();
        java.util.Collection collection94 = options60.getOptionGroups();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(collection22);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(collection29);
        org.junit.Assert.assertNotNull(options33);
        org.junit.Assert.assertNotNull(collection34);
        org.junit.Assert.assertNotNull(option37);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNull(strArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue(""'"" + boolean50 + ""' != '"" + false + ""'"", boolean50 == false);
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(options56);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(option63);
        org.junit.Assert.assertNull(optionGroup64);
        org.junit.Assert.assertNotNull(option66);
        org.junit.Assert.assertTrue(""'"" + char67 + ""' != '"" + '\000' + ""'"", char67 == '\000');
        org.junit.Assert.assertNotNull(option69);
        org.junit.Assert.assertNull(optionGroup73);
        org.junit.Assert.assertTrue(""'"" + int74 + ""' != '"" + 52 + ""'"", int74 == 52);
        org.junit.Assert.assertNotNull(option80);
        org.junit.Assert.assertTrue(""'"" + boolean83 + ""' != '"" + false + ""'"", boolean83 == false);
        org.junit.Assert.assertNotNull(list84);
        org.junit.Assert.assertTrue(""'"" + int85 + ""' != '"" + (-1) + ""'"", int85 == (-1));
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertNull(optionGroup90);
        org.junit.Assert.assertNotNull(collection91);
        org.junit.Assert.assertNotNull(collection92);
        org.junit.Assert.assertEquals(""'"" + str93 + ""' != '"" + ""[ Options: [ short { =[ option:    :: hi! ], 4=[ option: 4  ::  ], arg=[ option: arg org.apache.commons.cli.UnrecognizedOptionException: hi!  :: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ]} ] [ long {org.apache.commons.cli.UnrecognizedOptionException: hi!=[ option: arg org.apache.commons.cli.UnrecognizedOptionException: hi!  :: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ]} ]"" + ""'"", str93, ""[ Options: [ short { =[ option:    :: hi! ], 4=[ option: 4  ::  ], arg=[ option: arg org.apache.commons.cli.UnrecognizedOptionException: hi!  :: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ]} ] [ long {org.apache.commons.cli.UnrecognizedOptionException: hi!=[ option: arg org.apache.commons.cli.UnrecognizedOptionException: hi!  :: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ]} ]"");
        org.junit.Assert.assertNotNull(collection94);"
27,106,7899,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0107"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option4 = org.apache.commons.cli.OptionBuilder.create('4');
        option4.setDescription("""");
        org.apache.commons.cli.Options options7 = options2.addOption(option4);
        org.apache.commons.cli.PosixParser posixParser8 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option11 = org.apache.commons.cli.OptionBuilder.create('4');
        option11.setDescription("""");
        org.apache.commons.cli.Options options14 = options9.addOption(option11);
        org.apache.commons.cli.CommandLine commandLine15 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray17 = commandLine15.getOptionValues(""hi!"");
        java.lang.String[] strArray18 = commandLine15.getArgs();
        java.util.Properties properties19 = null;
        org.apache.commons.cli.CommandLine commandLine20 = posixParser8.parse(options9, strArray18, properties19);
        org.apache.commons.cli.CommandLine commandLine22 = posixParser1.parse(options7, strArray18, false);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup26 = options23.getOptionGroup(option25);
        org.apache.commons.cli.Option option28 = org.apache.commons.cli.OptionBuilder.create('4');
        char char29 = option28.getValueSeparator();
        org.apache.commons.cli.Option option31 = org.apache.commons.cli.OptionBuilder.create('4');
        option31.setDescription("""");
        option28.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup35 = options23.getOptionGroup(option28);
        boolean boolean37 = options23.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser38 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create('4');
        option41.setDescription("""");
        org.apache.commons.cli.Options options44 = options39.addOption(option41);
        org.apache.commons.cli.CommandLine commandLine45 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray47 = commandLine45.getOptionValues(""hi!"");
        java.lang.String[] strArray48 = commandLine45.getArgs();
        java.util.Properties properties49 = null;
        org.apache.commons.cli.CommandLine commandLine50 = posixParser38.parse(options39, strArray48, properties49);
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser1.parse(options23, strArray48, properties51, true);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        option56.setDescription("""");
        org.apache.commons.cli.Options options59 = options54.addOption(option56);
        java.util.Collection collection60 = options54.getOptionGroups();
        org.apache.commons.cli.Option option62 = org.apache.commons.cli.OptionBuilder.create('4');
        option62.setDescription("""");
        option62.setLongOpt(""hi!"");
        boolean boolean67 = option62.hasArgName();
        org.apache.commons.cli.Options options68 = options54.addOption(option62);
        org.apache.commons.cli.PosixParser posixParser69 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options70 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option72 = org.apache.commons.cli.OptionBuilder.create('4');
        option72.setDescription("""");
        org.apache.commons.cli.Options options75 = options70.addOption(option72);
        org.apache.commons.cli.CommandLine commandLine76 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray78 = commandLine76.getOptionValues(""hi!"");
        java.lang.String str81 = commandLine76.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str83 = commandLine76.getOptionValue(""arg"");
        java.lang.String[] strArray84 = commandLine76.getArgs();
        java.lang.String[] strArray86 = posixParser69.flatten(options75, strArray84, false);
        org.apache.commons.cli.CommandLine commandLine87 = posixParser1.parse(options54, strArray86);
        java.lang.String[] strArray93 = new java.lang.String[] { ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"", ""[ option:  +ARG ::  ]"", ""hi!"", ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"", ""[ option:    :: null ]"" };
        java.util.Properties properties94 = null;
        org.apache.commons.cli.CommandLine commandLine96 = posixParser0.parse(options54, strArray93, properties94, false);
        java.lang.String[] strArray98 = commandLine96.getOptionValues("""");
        org.junit.Assert.assertNotNull(option4);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option11);
        org.junit.Assert.assertNotNull(options14);
        org.junit.Assert.assertNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(commandLine20);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertNull(optionGroup26);
        org.junit.Assert.assertNotNull(option28);
        org.junit.Assert.assertTrue(""'"" + char29 + ""' != '"" + '\000' + ""'"", char29 == '\000');
        org.junit.Assert.assertNotNull(option31);
        org.junit.Assert.assertNull(optionGroup35);
        org.junit.Assert.assertTrue(""'"" + boolean37 + ""' != '"" + false + ""'"", boolean37 == false);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNull(strArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNotNull(collection60);
        org.junit.Assert.assertNotNull(option62);
        org.junit.Assert.assertTrue(""'"" + boolean67 + ""' != '"" + true + ""'"", boolean67 == true);
        org.junit.Assert.assertNotNull(options68);
        org.junit.Assert.assertNotNull(option72);
        org.junit.Assert.assertNotNull(options75);
        org.junit.Assert.assertNull(strArray78);
        org.junit.Assert.assertEquals(""'"" + str81 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str81, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(commandLine87);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(commandLine96);
        org.junit.Assert.assertNull(strArray98);"
28,127,8355,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0128"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("""");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("""");
        option26.setLongOpt(""hi!"");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues(""hi!"");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("""");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        org.apache.commons.cli.Options options50 = options40.addOption("""", false, ""arg"");
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup54 = options51.getOptionGroup(option53);
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        char char57 = option56.getValueSeparator();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        option59.setDescription("""");
        option56.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup63 = options51.getOptionGroup(option56);
        boolean boolean64 = option56.hasArgName();
        org.apache.commons.cli.Options options65 = options40.addOption(option56);
        org.apache.commons.cli.CommandLine commandLine66 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray68 = commandLine66.getOptionValues(""hi!"");
        java.lang.String str71 = commandLine66.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str73 = commandLine66.getOptionValue(""arg"");
        java.lang.String[] strArray74 = commandLine66.getArgs();
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options40, strArray74, properties75);
        org.apache.commons.cli.Options options77 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option79 = org.apache.commons.cli.OptionBuilder.create('4');
        char char80 = option79.getValueSeparator();
        org.apache.commons.cli.Option option82 = org.apache.commons.cli.OptionBuilder.create('4');
        option82.setDescription("""");
        option79.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup86 = options77.getOptionGroup(option79);
        java.lang.String[] strArray89 = new java.lang.String[] { ""4"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" };
        java.util.Properties properties90 = null;
        org.apache.commons.cli.CommandLine commandLine91 = posixParser0.parse(options77, strArray89, properties90);
        java.lang.String str94 = commandLine91.getOptionValue(""[ option: 4  ::  ]"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str96 = commandLine91.getOptionValue(""arg"");
        java.lang.String str98 = commandLine91.getOptionValue(""org.apache.commons.cli.ParseException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"");
        java.lang.String[] strArray99 = commandLine91.getArgs();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue(""'"" + boolean31 + ""' != '"" + true + ""'"", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNotNull(options50);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertTrue(""'"" + char57 + ""' != '"" + '\000' + ""'"", char57 == '\000');
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNull(optionGroup63);
        org.junit.Assert.assertTrue(""'"" + boolean64 + ""' != '"" + true + ""'"", boolean64 == true);
        org.junit.Assert.assertNotNull(options65);
        org.junit.Assert.assertNull(strArray68);
        org.junit.Assert.assertEquals(""'"" + str71 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str71, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(option79);
        org.junit.Assert.assertTrue(""'"" + char80 + ""' != '"" + '\000' + ""'"", char80 == '\000');
        org.junit.Assert.assertNotNull(option82);
        org.junit.Assert.assertNull(optionGroup86);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(commandLine91);
        org.junit.Assert.assertEquals(""'"" + str94 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str94, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str96);
        org.junit.Assert.assertNull(str98);
        org.junit.Assert.assertNotNull(strArray99);"
29,277,8198,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0278"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        java.util.Collection collection22 = options6.getOptionGroups();
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create('4');
        option25.setDescription("""");
        org.apache.commons.cli.Options options28 = options23.addOption(option25);
        java.util.Collection collection29 = options23.getOptionGroups();
        org.apache.commons.cli.Options options33 = options23.addOption("""", false, ""arg"");
        java.util.Collection collection34 = options23.getOptionGroups();
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option37 = org.apache.commons.cli.OptionBuilder.create('4');
        option37.setDescription("""");
        org.apache.commons.cli.Options options40 = options35.addOption(option37);
        option37.setValueSeparator(' ');
        org.apache.commons.cli.OptionGroup optionGroup43 = options23.getOptionGroup(option37);
        option37.setRequired(false);
        org.apache.commons.cli.CommandLine commandLine46 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray48 = commandLine46.getOptionValues(""hi!"");
        java.lang.String[] strArray49 = commandLine46.getArgs();
        boolean boolean50 = option37.equals((java.lang.Object) strArray49);
        org.apache.commons.cli.OptionGroup optionGroup51 = options6.getOptionGroup(option37);
        org.apache.commons.cli.Options options56 = options6.addOption(""arg"", ""org.apache.commons.cli.UnrecognizedOptionException: hi!"", false, ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.Options options60 = options6.addOption("" "", false, ""hi!"");
        org.apache.commons.cli.Options options61 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option63 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup64 = options61.getOptionGroup(option63);
        org.apache.commons.cli.Option option66 = org.apache.commons.cli.OptionBuilder.create('4');
        char char67 = option66.getValueSeparator();
        org.apache.commons.cli.Option option69 = org.apache.commons.cli.OptionBuilder.create('4');
        option69.setDescription("""");
        option66.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup73 = options61.getOptionGroup(option66);
        int int74 = option66.getId();
        org.apache.commons.cli.Option option78 = new org.apache.commons.cli.Option("""", false, """");
        org.apache.commons.cli.Option option80 = org.apache.commons.cli.OptionBuilder.create('4');
        option80.setDescription("""");
        boolean boolean83 = option80.hasValueSeparator();
        java.util.List list84 = option80.getValuesList();
        int int85 = option80.getArgs();
        option78.setType((java.lang.Object) int85);
        option66.setType((java.lang.Object) int85);
        java.lang.String str89 = option66.getValue(0);
        org.apache.commons.cli.OptionGroup optionGroup90 = options60.getOptionGroup(option66);
        java.util.Collection collection91 = options60.getOptionGroups();
        java.util.Collection collection92 = options60.getOptionGroups();
        java.lang.String str93 = options60.toString();
        java.util.List list94 = options60.getRequiredOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(collection22);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(collection29);
        org.junit.Assert.assertNotNull(options33);
        org.junit.Assert.assertNotNull(collection34);
        org.junit.Assert.assertNotNull(option37);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNull(strArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue(""'"" + boolean50 + ""' != '"" + false + ""'"", boolean50 == false);
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(options56);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(option63);
        org.junit.Assert.assertNull(optionGroup64);
        org.junit.Assert.assertNotNull(option66);
        org.junit.Assert.assertTrue(""'"" + char67 + ""' != '"" + '\000' + ""'"", char67 == '\000');
        org.junit.Assert.assertNotNull(option69);
        org.junit.Assert.assertNull(optionGroup73);
        org.junit.Assert.assertTrue(""'"" + int74 + ""' != '"" + 52 + ""'"", int74 == 52);
        org.junit.Assert.assertNotNull(option80);
        org.junit.Assert.assertTrue(""'"" + boolean83 + ""' != '"" + false + ""'"", boolean83 == false);
        org.junit.Assert.assertNotNull(list84);
        org.junit.Assert.assertTrue(""'"" + int85 + ""' != '"" + (-1) + ""'"", int85 == (-1));
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertNull(optionGroup90);
        org.junit.Assert.assertNotNull(collection91);
        org.junit.Assert.assertNotNull(collection92);
        org.junit.Assert.assertEquals(""'"" + str93 + ""' != '"" + ""[ Options: [ short { =[ option:    :: hi! ], 4=[ option: 4  ::  ], arg=[ option: arg org.apache.commons.cli.UnrecognizedOptionException: hi!  :: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ]} ] [ long {org.apache.commons.cli.UnrecognizedOptionException: hi!=[ option: arg org.apache.commons.cli.UnrecognizedOptionException: hi!  :: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ]} ]"" + ""'"", str93, ""[ Options: [ short { =[ option:    :: hi! ], 4=[ option: 4  ::  ], arg=[ option: arg org.apache.commons.cli.UnrecognizedOptionException: hi!  :: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ]} ] [ long {org.apache.commons.cli.UnrecognizedOptionException: hi!=[ option: arg org.apache.commons.cli.UnrecognizedOptionException: hi!  :: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ]} ]"");
        org.junit.Assert.assertNotNull(list94);"
30,315,8041,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0316"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String[] strArray10 = commandLine7.getArgs();
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser0.parse(options1, strArray10, properties11);
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option15 = org.apache.commons.cli.OptionBuilder.create('4');
        option15.setDescription("""");
        org.apache.commons.cli.Options options18 = options13.addOption(option15);
        java.lang.String str19 = options13.toString();
        org.apache.commons.cli.CommandLine commandLine20 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray22 = commandLine20.getOptionValues(""hi!"");
        java.lang.String str25 = commandLine20.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str27 = commandLine20.getOptionValue(""arg"");
        java.lang.String[] strArray28 = commandLine20.getArgs();
        java.util.Properties properties29 = null;
        org.apache.commons.cli.CommandLine commandLine31 = posixParser0.parse(options13, strArray28, properties29, false);
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create('4');
        option34.setDescription("""");
        org.apache.commons.cli.Options options37 = options32.addOption(option34);
        java.util.Collection collection38 = options32.getOptionGroups();
        org.apache.commons.cli.Options options42 = options32.addOption("""", false, ""arg"");
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup46 = options43.getOptionGroup(option45);
        org.apache.commons.cli.Option option48 = org.apache.commons.cli.OptionBuilder.create('4');
        char char49 = option48.getValueSeparator();
        org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create('4');
        option51.setDescription("""");
        option48.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup55 = options43.getOptionGroup(option48);
        boolean boolean56 = option48.hasArgName();
        org.apache.commons.cli.Options options57 = options32.addOption(option48);
        org.apache.commons.cli.PosixParser posixParser58 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options59 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option61 = org.apache.commons.cli.OptionBuilder.create('4');
        option61.setDescription("""");
        org.apache.commons.cli.Options options64 = options59.addOption(option61);
        java.util.Collection collection65 = options59.getOptionGroups();
        org.apache.commons.cli.Options options69 = options59.addOption("""", false, ""arg"");
        org.apache.commons.cli.Option option71 = org.apache.commons.cli.OptionBuilder.create('4');
        boolean boolean72 = option71.hasOptionalArg();
        org.apache.commons.cli.Options options73 = options59.addOption(option71);
        org.apache.commons.cli.PosixParser posixParser74 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options75 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option77 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup78 = options75.getOptionGroup(option77);
        org.apache.commons.cli.CommandLine commandLine79 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray81 = commandLine79.getOptionValues(""hi!"");
        java.lang.String str84 = commandLine79.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str86 = commandLine79.getOptionValue(""arg"");
        java.lang.String[] strArray87 = commandLine79.getArgs();
        java.lang.String[] strArray89 = posixParser74.flatten(options75, strArray87, true);
        java.util.Properties properties90 = null;
        org.apache.commons.cli.CommandLine commandLine91 = posixParser58.parse(options73, strArray89, properties90);
        java.util.Properties properties92 = null;
        org.apache.commons.cli.CommandLine commandLine94 = posixParser0.parse(options32, strArray89, properties92, true);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertNotNull(option15);
        org.junit.Assert.assertNotNull(options18);
        org.junit.Assert.assertEquals(""'"" + str19 + ""' != '"" + ""[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str19, ""[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(strArray22);
        org.junit.Assert.assertEquals(""'"" + str25 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str25, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertNotNull(options37);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNotNull(options42);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNull(optionGroup46);
        org.junit.Assert.assertNotNull(option48);
        org.junit.Assert.assertTrue(""'"" + char49 + ""' != '"" + '\000' + ""'"", char49 == '\000');
        org.junit.Assert.assertNotNull(option51);
        org.junit.Assert.assertNull(optionGroup55);
        org.junit.Assert.assertTrue(""'"" + boolean56 + ""' != '"" + true + ""'"", boolean56 == true);
        org.junit.Assert.assertNotNull(options57);
        org.junit.Assert.assertNotNull(option61);
        org.junit.Assert.assertNotNull(options64);
        org.junit.Assert.assertNotNull(collection65);
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertNotNull(option71);
        org.junit.Assert.assertTrue(""'"" + boolean72 + ""' != '"" + false + ""'"", boolean72 == false);
        org.junit.Assert.assertNotNull(options73);
        org.junit.Assert.assertNotNull(option77);
        org.junit.Assert.assertNull(optionGroup78);
        org.junit.Assert.assertNull(strArray81);
        org.junit.Assert.assertEquals(""'"" + str84 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str84, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(commandLine91);
        org.junit.Assert.assertNotNull(commandLine94);"
31,418,7972,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0419"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptionGroups();
        org.apache.commons.cli.Options options11 = options1.addOption("""", false, ""arg"");
        java.util.List list12 = options11.getRequiredOptions();
        org.apache.commons.cli.Option option14 = org.apache.commons.cli.OptionBuilder.create(""arg"");
        org.apache.commons.cli.Options options15 = options11.addOption(option14);
        boolean boolean17 = options11.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option21 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup22 = options19.getOptionGroup(option21);
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create('4');
        char char25 = option24.getValueSeparator();
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        option27.setDescription("""");
        option24.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup31 = options19.getOptionGroup(option24);
        boolean boolean33 = options19.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser34 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option37 = org.apache.commons.cli.OptionBuilder.create('4');
        option37.setDescription("""");
        org.apache.commons.cli.Options options40 = options35.addOption(option37);
        org.apache.commons.cli.CommandLine commandLine41 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray43 = commandLine41.getOptionValues(""hi!"");
        java.lang.String str46 = commandLine41.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str48 = commandLine41.getOptionValue(""arg"");
        java.lang.String[] strArray49 = commandLine41.getArgs();
        java.lang.String[] strArray51 = posixParser34.flatten(options40, strArray49, false);
        java.util.Properties properties52 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser18.parse(options19, strArray51, properties52);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        option56.setDescription("""");
        org.apache.commons.cli.Options options59 = options54.addOption(option56);
        java.util.Collection collection60 = options54.getOptionGroups();
        org.apache.commons.cli.Options options64 = options54.addOption("""", false, ""arg"");
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option67 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup68 = options65.getOptionGroup(option67);
        org.apache.commons.cli.Option option70 = org.apache.commons.cli.OptionBuilder.create('4');
        char char71 = option70.getValueSeparator();
        org.apache.commons.cli.Option option73 = org.apache.commons.cli.OptionBuilder.create('4');
        option73.setDescription("""");
        option70.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup77 = options65.getOptionGroup(option70);
        boolean boolean78 = option70.hasArgName();
        org.apache.commons.cli.Options options79 = options54.addOption(option70);
        java.util.List list80 = options54.helpOptions();
        org.apache.commons.cli.CommandLine commandLine81 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray83 = commandLine81.getOptionValues(""hi!"");
        java.lang.String str86 = commandLine81.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str88 = commandLine81.getOptionValue(""arg"");
        java.lang.String[] strArray89 = commandLine81.getArgs();
        java.lang.String[] strArray91 = posixParser18.flatten(options54, strArray89, false);
        java.util.Properties properties92 = null;
        org.apache.commons.cli.CommandLine commandLine93 = posixParser0.parse(options11, strArray91, properties92);
        posixParser0.burstToken(""org.apache.commons.cli.MissingOptionException: hi!"", false);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(list12);
        org.junit.Assert.assertNotNull(option14);
        org.junit.Assert.assertNotNull(options15);
        org.junit.Assert.assertTrue(""'"" + boolean17 + ""' != '"" + false + ""'"", boolean17 == false);
        org.junit.Assert.assertNotNull(option21);
        org.junit.Assert.assertNull(optionGroup22);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertTrue(""'"" + char25 + ""' != '"" + '\000' + ""'"", char25 == '\000');
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertNull(optionGroup31);
        org.junit.Assert.assertTrue(""'"" + boolean33 + ""' != '"" + false + ""'"", boolean33 == false);
        org.junit.Assert.assertNotNull(option37);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertNull(strArray43);
        org.junit.Assert.assertEquals(""'"" + str46 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str46, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNotNull(collection60);
        org.junit.Assert.assertNotNull(options64);
        org.junit.Assert.assertNotNull(option67);
        org.junit.Assert.assertNull(optionGroup68);
        org.junit.Assert.assertNotNull(option70);
        org.junit.Assert.assertTrue(""'"" + char71 + ""' != '"" + '\000' + ""'"", char71 == '\000');
        org.junit.Assert.assertNotNull(option73);
        org.junit.Assert.assertNull(optionGroup77);
        org.junit.Assert.assertTrue(""'"" + boolean78 + ""' != '"" + true + ""'"", boolean78 == true);
        org.junit.Assert.assertNotNull(options79);
        org.junit.Assert.assertNotNull(list80);
        org.junit.Assert.assertNull(strArray83);
        org.junit.Assert.assertEquals(""'"" + str86 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str86, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(commandLine93);"
32,207,7859,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0208"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option4 = org.apache.commons.cli.OptionBuilder.create('4');
        option4.setDescription("""");
        org.apache.commons.cli.Options options7 = options2.addOption(option4);
        org.apache.commons.cli.PosixParser posixParser8 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option11 = org.apache.commons.cli.OptionBuilder.create('4');
        option11.setDescription("""");
        org.apache.commons.cli.Options options14 = options9.addOption(option11);
        org.apache.commons.cli.CommandLine commandLine15 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray17 = commandLine15.getOptionValues(""hi!"");
        java.lang.String[] strArray18 = commandLine15.getArgs();
        java.util.Properties properties19 = null;
        org.apache.commons.cli.CommandLine commandLine20 = posixParser8.parse(options9, strArray18, properties19);
        org.apache.commons.cli.CommandLine commandLine22 = posixParser1.parse(options7, strArray18, false);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup26 = options23.getOptionGroup(option25);
        org.apache.commons.cli.Option option28 = org.apache.commons.cli.OptionBuilder.create('4');
        char char29 = option28.getValueSeparator();
        org.apache.commons.cli.Option option31 = org.apache.commons.cli.OptionBuilder.create('4');
        option31.setDescription("""");
        option28.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup35 = options23.getOptionGroup(option28);
        boolean boolean37 = options23.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser38 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create('4');
        option41.setDescription("""");
        org.apache.commons.cli.Options options44 = options39.addOption(option41);
        org.apache.commons.cli.CommandLine commandLine45 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray47 = commandLine45.getOptionValues(""hi!"");
        java.lang.String[] strArray48 = commandLine45.getArgs();
        java.util.Properties properties49 = null;
        org.apache.commons.cli.CommandLine commandLine50 = posixParser38.parse(options39, strArray48, properties49);
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser1.parse(options23, strArray48, properties51, true);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        option56.setDescription("""");
        org.apache.commons.cli.Options options59 = options54.addOption(option56);
        java.util.Collection collection60 = options54.getOptionGroups();
        org.apache.commons.cli.Option option62 = org.apache.commons.cli.OptionBuilder.create('4');
        option62.setDescription("""");
        option62.setLongOpt(""hi!"");
        boolean boolean67 = option62.hasArgName();
        org.apache.commons.cli.Options options68 = options54.addOption(option62);
        org.apache.commons.cli.PosixParser posixParser69 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options70 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option72 = org.apache.commons.cli.OptionBuilder.create('4');
        option72.setDescription("""");
        org.apache.commons.cli.Options options75 = options70.addOption(option72);
        org.apache.commons.cli.CommandLine commandLine76 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray78 = commandLine76.getOptionValues(""hi!"");
        java.lang.String str81 = commandLine76.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str83 = commandLine76.getOptionValue(""arg"");
        java.lang.String[] strArray84 = commandLine76.getArgs();
        java.lang.String[] strArray86 = posixParser69.flatten(options75, strArray84, false);
        org.apache.commons.cli.CommandLine commandLine87 = posixParser1.parse(options54, strArray86);
        java.lang.String[] strArray93 = new java.lang.String[] { ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"", ""[ option:  +ARG ::  ]"", ""hi!"", ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"", ""[ option:    :: null ]"" };
        java.util.Properties properties94 = null;
        org.apache.commons.cli.CommandLine commandLine96 = posixParser0.parse(options54, strArray93, properties94, false);
        commandLine96.addArg(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.junit.Assert.assertNotNull(option4);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option11);
        org.junit.Assert.assertNotNull(options14);
        org.junit.Assert.assertNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(commandLine20);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertNull(optionGroup26);
        org.junit.Assert.assertNotNull(option28);
        org.junit.Assert.assertTrue(""'"" + char29 + ""' != '"" + '\000' + ""'"", char29 == '\000');
        org.junit.Assert.assertNotNull(option31);
        org.junit.Assert.assertNull(optionGroup35);
        org.junit.Assert.assertTrue(""'"" + boolean37 + ""' != '"" + false + ""'"", boolean37 == false);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNull(strArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNotNull(collection60);
        org.junit.Assert.assertNotNull(option62);
        org.junit.Assert.assertTrue(""'"" + boolean67 + ""' != '"" + true + ""'"", boolean67 == true);
        org.junit.Assert.assertNotNull(options68);
        org.junit.Assert.assertNotNull(option72);
        org.junit.Assert.assertNotNull(options75);
        org.junit.Assert.assertNull(strArray78);
        org.junit.Assert.assertEquals(""'"" + str81 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str81, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(commandLine87);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(commandLine96);"
33,337,8128,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0338"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option6.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create('4');
        option38.setDescription("""");
        org.apache.commons.cli.Options options41 = options36.addOption(option38);
        org.apache.commons.cli.Options options42 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        char char45 = option44.getValueSeparator();
        org.apache.commons.cli.Option option47 = org.apache.commons.cli.OptionBuilder.create('4');
        option47.setDescription("""");
        option44.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup51 = options42.getOptionGroup(option44);
        option44.setOptionalArg(true);
        int int54 = option44.getId();
        org.apache.commons.cli.OptionGroup optionGroup55 = options41.getOptionGroup(option44);
        org.apache.commons.cli.Options options56 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option58 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup59 = options56.getOptionGroup(option58);
        boolean boolean60 = option58.hasLongOpt();
        boolean boolean61 = option58.isRequired();
        org.apache.commons.cli.Options options62 = options41.addOption(option58);
        org.apache.commons.cli.PosixParser posixParser63 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option66 = org.apache.commons.cli.OptionBuilder.create('4');
        option66.setDescription("""");
        org.apache.commons.cli.Options options69 = options64.addOption(option66);
        org.apache.commons.cli.CommandLine commandLine70 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray72 = commandLine70.getOptionValues(""hi!"");
        java.lang.String str75 = commandLine70.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str77 = commandLine70.getOptionValue(""arg"");
        java.lang.String[] strArray78 = commandLine70.getArgs();
        java.lang.String[] strArray80 = posixParser63.flatten(options69, strArray78, false);
        org.apache.commons.cli.CommandLine commandLine82 = posixParser0.parse(options62, strArray80, false);
        org.apache.commons.cli.Option option84 = org.apache.commons.cli.OptionBuilder.create('4');
        java.lang.String str86 = option84.getValue(""arg"");
        java.lang.String str87 = option84.getLongOpt();
        option84.setLongOpt("""");
        option84.setArgName("""");
        commandLine82.addOption(option84);
        java.lang.String[] strArray94 = commandLine82.getOptionValues('=');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass95 = strArray94.getClass();
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue(""'"" + char7 + ""' != '"" + '\000' + ""'"", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertTrue(""'"" + char45 + ""' != '"" + '\000' + ""'"", char45 == '\000');
        org.junit.Assert.assertNotNull(option47);
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertTrue(""'"" + int54 + ""' != '"" + 52 + ""'"", int54 == 52);
        org.junit.Assert.assertNull(optionGroup55);
        org.junit.Assert.assertNotNull(option58);
        org.junit.Assert.assertNull(optionGroup59);
        org.junit.Assert.assertTrue(""'"" + boolean60 + ""' != '"" + false + ""'"", boolean60 == false);
        org.junit.Assert.assertTrue(""'"" + boolean61 + ""' != '"" + false + ""'"", boolean61 == false);
        org.junit.Assert.assertNotNull(options62);
        org.junit.Assert.assertNotNull(option66);
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertNull(strArray72);
        org.junit.Assert.assertEquals(""'"" + str75 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str75, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(option84);
        org.junit.Assert.assertEquals(""'"" + str86 + ""' != '"" + ""arg"" + ""'"", str86, ""arg"");
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertNull(strArray94);"
34,471,8113,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0472"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        posixParser0.burstToken("""", false);
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        option27.setDescription("""");
        org.apache.commons.cli.Options options30 = options25.addOption(option27);
        java.util.Collection collection31 = options25.getOptionGroups();
        org.apache.commons.cli.Options options35 = options25.addOption("""", false, ""arg"");
        java.util.List list36 = options35.getRequiredOptions();
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create(""arg"");
        org.apache.commons.cli.Options options39 = options35.addOption(option38);
        boolean boolean41 = options35.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser42 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setDescription("""");
        org.apache.commons.cli.Options options48 = options43.addOption(option45);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        option52.setDescription("""");
        org.apache.commons.cli.Options options55 = options50.addOption(option52);
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray58 = commandLine56.getOptionValues(""hi!"");
        java.lang.String[] strArray59 = commandLine56.getArgs();
        java.util.Properties properties60 = null;
        org.apache.commons.cli.CommandLine commandLine61 = posixParser49.parse(options50, strArray59, properties60);
        org.apache.commons.cli.CommandLine commandLine63 = posixParser42.parse(options48, strArray59, false);
        org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option66 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup67 = options64.getOptionGroup(option66);
        org.apache.commons.cli.Option option69 = org.apache.commons.cli.OptionBuilder.create('4');
        char char70 = option69.getValueSeparator();
        org.apache.commons.cli.Option option72 = org.apache.commons.cli.OptionBuilder.create('4');
        option72.setDescription("""");
        option69.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup76 = options64.getOptionGroup(option69);
        boolean boolean78 = options64.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser79 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options80 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option82 = org.apache.commons.cli.OptionBuilder.create('4');
        option82.setDescription("""");
        org.apache.commons.cli.Options options85 = options80.addOption(option82);
        org.apache.commons.cli.CommandLine commandLine86 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray88 = commandLine86.getOptionValues(""hi!"");
        java.lang.String[] strArray89 = commandLine86.getArgs();
        java.util.Properties properties90 = null;
        org.apache.commons.cli.CommandLine commandLine91 = posixParser79.parse(options80, strArray89, properties90);
        java.util.Properties properties92 = null;
        org.apache.commons.cli.CommandLine commandLine94 = posixParser42.parse(options64, strArray89, properties92, true);
        java.util.Properties properties95 = null;
        org.apache.commons.cli.CommandLine commandLine96 = posixParser0.parse(options35, strArray89, properties95);
        org.apache.commons.cli.Option option97 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options98 = options35.addOption(option97);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertNotNull(options30);
        org.junit.Assert.assertNotNull(collection31);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertNotNull(list36);
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertNotNull(options39);
        org.junit.Assert.assertTrue(""'"" + boolean41 + ""' != '"" + false + ""'"", boolean41 == false);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNull(strArray58);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(commandLine61);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(option66);
        org.junit.Assert.assertNull(optionGroup67);
        org.junit.Assert.assertNotNull(option69);
        org.junit.Assert.assertTrue(""'"" + char70 + ""' != '"" + '\000' + ""'"", char70 == '\000');
        org.junit.Assert.assertNotNull(option72);
        org.junit.Assert.assertNull(optionGroup76);
        org.junit.Assert.assertTrue(""'"" + boolean78 + ""' != '"" + false + ""'"", boolean78 == false);
        org.junit.Assert.assertNotNull(option82);
        org.junit.Assert.assertNotNull(options85);
        org.junit.Assert.assertNull(strArray88);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(commandLine91);
        org.junit.Assert.assertNotNull(commandLine94);
        org.junit.Assert.assertNotNull(commandLine96);"
35,363,8282,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0364"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("""");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("""");
        option26.setLongOpt(""hi!"");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues(""hi!"");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("""");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        org.apache.commons.cli.Options options50 = options40.addOption("""", false, ""arg"");
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup54 = options51.getOptionGroup(option53);
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        char char57 = option56.getValueSeparator();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        option59.setDescription("""");
        option56.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup63 = options51.getOptionGroup(option56);
        boolean boolean64 = option56.hasArgName();
        org.apache.commons.cli.Options options65 = options40.addOption(option56);
        org.apache.commons.cli.CommandLine commandLine66 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray68 = commandLine66.getOptionValues(""hi!"");
        java.lang.String str71 = commandLine66.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str73 = commandLine66.getOptionValue(""arg"");
        java.lang.String[] strArray74 = commandLine66.getArgs();
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options40, strArray74, properties75);
        org.apache.commons.cli.Options options77 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option79 = org.apache.commons.cli.OptionBuilder.create('4');
        char char80 = option79.getValueSeparator();
        org.apache.commons.cli.Option option82 = org.apache.commons.cli.OptionBuilder.create('4');
        option82.setDescription("""");
        option79.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup86 = options77.getOptionGroup(option79);
        java.lang.String[] strArray89 = new java.lang.String[] { ""4"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" };
        java.util.Properties properties90 = null;
        org.apache.commons.cli.CommandLine commandLine91 = posixParser0.parse(options77, strArray89, properties90);
        java.lang.String str94 = commandLine91.getOptionValue(""[ option: 4  ::  ]"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str96 = commandLine91.getOptionValue(""arg"");
        boolean boolean98 = commandLine91.hasOption('=');
        org.apache.commons.cli.Option[] optionArray99 = commandLine91.getOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue(""'"" + boolean31 + ""' != '"" + true + ""'"", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNotNull(options50);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertTrue(""'"" + char57 + ""' != '"" + '\000' + ""'"", char57 == '\000');
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNull(optionGroup63);
        org.junit.Assert.assertTrue(""'"" + boolean64 + ""' != '"" + true + ""'"", boolean64 == true);
        org.junit.Assert.assertNotNull(options65);
        org.junit.Assert.assertNull(strArray68);
        org.junit.Assert.assertEquals(""'"" + str71 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str71, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(option79);
        org.junit.Assert.assertTrue(""'"" + char80 + ""' != '"" + '\000' + ""'"", char80 == '\000');
        org.junit.Assert.assertNotNull(option82);
        org.junit.Assert.assertNull(optionGroup86);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(commandLine91);
        org.junit.Assert.assertEquals(""'"" + str94 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str94, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str96);
        org.junit.Assert.assertTrue(""'"" + boolean98 + ""' != '"" + false + ""'"", boolean98 == false);
        org.junit.Assert.assertNotNull(optionArray99);"
36,156,7610,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0157"");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('4');
        java.lang.String str3 = option1.getValue(""arg"");
        java.lang.String str4 = option1.getLongOpt();
        option1.setLongOpt("""");
        option1.setArgName("""");
        java.lang.String str9 = option1.getArgName();
        option1.setRequired(true);
        option1.setArgs((int) ' ');
        org.apache.commons.cli.PosixParser posixParser14 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options15 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option17 = org.apache.commons.cli.OptionBuilder.create('4');
        option17.setDescription("""");
        org.apache.commons.cli.Options options20 = options15.addOption(option17);
        org.apache.commons.cli.PosixParser posixParser21 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create('4');
        option24.setDescription("""");
        org.apache.commons.cli.Options options27 = options22.addOption(option24);
        org.apache.commons.cli.CommandLine commandLine28 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine28.getOptionValues(""hi!"");
        java.lang.String[] strArray31 = commandLine28.getArgs();
        java.util.Properties properties32 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser21.parse(options22, strArray31, properties32);
        org.apache.commons.cli.CommandLine commandLine35 = posixParser14.parse(options20, strArray31, false);
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup39 = options36.getOptionGroup(option38);
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create('4');
        char char42 = option41.getValueSeparator();
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        option44.setDescription("""");
        option41.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup48 = options36.getOptionGroup(option41);
        boolean boolean50 = options36.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser51 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options52 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option54 = org.apache.commons.cli.OptionBuilder.create('4');
        option54.setDescription("""");
        org.apache.commons.cli.Options options57 = options52.addOption(option54);
        org.apache.commons.cli.CommandLine commandLine58 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray60 = commandLine58.getOptionValues(""hi!"");
        java.lang.String[] strArray61 = commandLine58.getArgs();
        java.util.Properties properties62 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser51.parse(options52, strArray61, properties62);
        java.util.Properties properties64 = null;
        org.apache.commons.cli.CommandLine commandLine66 = posixParser14.parse(options36, strArray61, properties64, true);
        java.util.Collection collection67 = options36.getOptionGroups();
        org.apache.commons.cli.Options options68 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option70 = org.apache.commons.cli.OptionBuilder.create('4');
        option70.setDescription("""");
        org.apache.commons.cli.Options options73 = options68.addOption(option70);
        java.util.Collection collection74 = options68.getOptionGroups();
        org.apache.commons.cli.Options options78 = options68.addOption("""", false, ""arg"");
        org.apache.commons.cli.Options options79 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option81 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup82 = options79.getOptionGroup(option81);
        org.apache.commons.cli.Option option84 = org.apache.commons.cli.OptionBuilder.create('4');
        char char85 = option84.getValueSeparator();
        org.apache.commons.cli.Option option87 = org.apache.commons.cli.OptionBuilder.create('4');
        option87.setDescription("""");
        option84.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup91 = options79.getOptionGroup(option84);
        boolean boolean92 = option84.hasArgName();
        org.apache.commons.cli.Options options93 = options68.addOption(option84);
        org.apache.commons.cli.Options options94 = options36.addOption(option84);
        boolean boolean95 = option1.equals((java.lang.Object) options36);
        java.lang.String str96 = option1.getValue();
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertEquals(""'"" + str3 + ""' != '"" + ""arg"" + ""'"", str3, ""arg"");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals(""'"" + str9 + ""' != '"" + """" + ""'"", str9, """");
        org.junit.Assert.assertNotNull(option17);
        org.junit.Assert.assertNotNull(options20);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNotNull(options27);
        org.junit.Assert.assertNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertNull(optionGroup39);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertTrue(""'"" + char42 + ""' != '"" + '\000' + ""'"", char42 == '\000');
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertNull(optionGroup48);
        org.junit.Assert.assertTrue(""'"" + boolean50 + ""' != '"" + false + ""'"", boolean50 == false);
        org.junit.Assert.assertNotNull(option54);
        org.junit.Assert.assertNotNull(options57);
        org.junit.Assert.assertNull(strArray60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(commandLine66);
        org.junit.Assert.assertNotNull(collection67);
        org.junit.Assert.assertNotNull(option70);
        org.junit.Assert.assertNotNull(options73);
        org.junit.Assert.assertNotNull(collection74);
        org.junit.Assert.assertNotNull(options78);
        org.junit.Assert.assertNotNull(option81);
        org.junit.Assert.assertNull(optionGroup82);
        org.junit.Assert.assertNotNull(option84);
        org.junit.Assert.assertTrue(""'"" + char85 + ""' != '"" + '\000' + ""'"", char85 == '\000');
        org.junit.Assert.assertNotNull(option87);
        org.junit.Assert.assertNull(optionGroup91);
        org.junit.Assert.assertTrue(""'"" + boolean92 + ""' != '"" + true + ""'"", boolean92 == true);
        org.junit.Assert.assertNotNull(options93);
        org.junit.Assert.assertNotNull(options94);
        org.junit.Assert.assertTrue(""'"" + boolean95 + ""' != '"" + false + ""'"", boolean95 == false);
        org.junit.Assert.assertNull(str96);"
37,272,8016,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0273"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken(""hi!"", true);
        org.apache.commons.cli.PosixParser posixParser21 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create('4');
        option24.setDescription("""");
        org.apache.commons.cli.Options options27 = options22.addOption(option24);
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option31 = org.apache.commons.cli.OptionBuilder.create('4');
        option31.setDescription("""");
        org.apache.commons.cli.Options options34 = options29.addOption(option31);
        org.apache.commons.cli.CommandLine commandLine35 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray37 = commandLine35.getOptionValues(""hi!"");
        java.lang.String[] strArray38 = commandLine35.getArgs();
        java.util.Properties properties39 = null;
        org.apache.commons.cli.CommandLine commandLine40 = posixParser28.parse(options29, strArray38, properties39);
        org.apache.commons.cli.CommandLine commandLine42 = posixParser21.parse(options27, strArray38, false);
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup46 = options43.getOptionGroup(option45);
        org.apache.commons.cli.Option option48 = org.apache.commons.cli.OptionBuilder.create('4');
        char char49 = option48.getValueSeparator();
        org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create('4');
        option51.setDescription("""");
        option48.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup55 = options43.getOptionGroup(option48);
        boolean boolean57 = options43.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser58 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options59 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option61 = org.apache.commons.cli.OptionBuilder.create('4');
        option61.setDescription("""");
        org.apache.commons.cli.Options options64 = options59.addOption(option61);
        org.apache.commons.cli.CommandLine commandLine65 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray67 = commandLine65.getOptionValues(""hi!"");
        java.lang.String[] strArray68 = commandLine65.getArgs();
        java.util.Properties properties69 = null;
        org.apache.commons.cli.CommandLine commandLine70 = posixParser58.parse(options59, strArray68, properties69);
        java.util.Properties properties71 = null;
        org.apache.commons.cli.CommandLine commandLine73 = posixParser21.parse(options43, strArray68, properties71, true);
        java.lang.String str74 = options43.toString();
        org.apache.commons.cli.PosixParser posixParser75 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options76 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option78 = org.apache.commons.cli.OptionBuilder.create('4');
        option78.setDescription("""");
        org.apache.commons.cli.Options options81 = options76.addOption(option78);
        java.util.Collection collection82 = options76.getOptions();
        boolean boolean84 = options76.hasOption(""arg"");
        java.lang.String[] strArray87 = new java.lang.String[] { ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"", ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"" };
        org.apache.commons.cli.CommandLine commandLine88 = posixParser75.parse(options76, strArray87);
        org.apache.commons.cli.CommandLine commandLine90 = posixParser0.parse(options43, strArray87, false);
        org.apache.commons.cli.Option option91 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.OptionGroup optionGroup92 = options43.getOptionGroup(option91);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNotNull(options27);
        org.junit.Assert.assertNotNull(option31);
        org.junit.Assert.assertNotNull(options34);
        org.junit.Assert.assertNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(commandLine40);
        org.junit.Assert.assertNotNull(commandLine42);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNull(optionGroup46);
        org.junit.Assert.assertNotNull(option48);
        org.junit.Assert.assertTrue(""'"" + char49 + ""' != '"" + '\000' + ""'"", char49 == '\000');
        org.junit.Assert.assertNotNull(option51);
        org.junit.Assert.assertNull(optionGroup55);
        org.junit.Assert.assertTrue(""'"" + boolean57 + ""' != '"" + false + ""'"", boolean57 == false);
        org.junit.Assert.assertNotNull(option61);
        org.junit.Assert.assertNotNull(options64);
        org.junit.Assert.assertNull(strArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(commandLine70);
        org.junit.Assert.assertNotNull(commandLine73);
        org.junit.Assert.assertEquals(""'"" + str74 + ""' != '"" + ""[ Options: [ short {} ] [ long {} ]"" + ""'"", str74, ""[ Options: [ short {} ] [ long {} ]"");
        org.junit.Assert.assertNotNull(option78);
        org.junit.Assert.assertNotNull(options81);
        org.junit.Assert.assertNotNull(collection82);
        org.junit.Assert.assertTrue(""'"" + boolean84 + ""' != '"" + false + ""'"", boolean84 == false);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(commandLine88);
        org.junit.Assert.assertNotNull(commandLine90);"
38,435,8141,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0436"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        org.apache.commons.cli.Option option36 = org.apache.commons.cli.OptionBuilder.create('4');
        boolean boolean37 = option36.isRequired();
        org.apache.commons.cli.Options options38 = options22.addOption(option36);
        java.util.List list39 = options38.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser40 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options41 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option43 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup44 = options41.getOptionGroup(option43);
        org.apache.commons.cli.Option option46 = org.apache.commons.cli.OptionBuilder.create('4');
        char char47 = option46.getValueSeparator();
        org.apache.commons.cli.Option option49 = org.apache.commons.cli.OptionBuilder.create('4');
        option49.setDescription("""");
        option46.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup53 = options41.getOptionGroup(option46);
        boolean boolean55 = options41.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        option59.setDescription("""");
        org.apache.commons.cli.Options options62 = options57.addOption(option59);
        org.apache.commons.cli.CommandLine commandLine63 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray65 = commandLine63.getOptionValues(""hi!"");
        java.lang.String str68 = commandLine63.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str70 = commandLine63.getOptionValue(""arg"");
        java.lang.String[] strArray71 = commandLine63.getArgs();
        java.lang.String[] strArray73 = posixParser56.flatten(options62, strArray71, false);
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine75 = posixParser40.parse(options41, strArray73, properties74);
        java.util.List list76 = commandLine75.getArgList();
        java.lang.String[] strArray77 = commandLine75.getArgs();
        java.util.Properties properties78 = null;
        org.apache.commons.cli.CommandLine commandLine80 = posixParser0.parse(options38, strArray77, properties78, false);
        org.apache.commons.cli.Options options81 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option83 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup84 = options81.getOptionGroup(option83);
        boolean boolean85 = option83.hasLongOpt();
        boolean boolean86 = option83.isRequired();
        java.util.List list87 = option83.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup88 = options38.getOptionGroup(option83);
        java.util.List list89 = options38.getRequiredOptions();
        java.lang.Class<?> wildcardClass90 = options38.getClass();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertNotNull(option36);
        org.junit.Assert.assertTrue(""'"" + boolean37 + ""' != '"" + false + ""'"", boolean37 == false);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(list39);
        org.junit.Assert.assertNotNull(option43);
        org.junit.Assert.assertNull(optionGroup44);
        org.junit.Assert.assertNotNull(option46);
        org.junit.Assert.assertTrue(""'"" + char47 + ""' != '"" + '\000' + ""'"", char47 == '\000');
        org.junit.Assert.assertNotNull(option49);
        org.junit.Assert.assertNull(optionGroup53);
        org.junit.Assert.assertTrue(""'"" + boolean55 + ""' != '"" + false + ""'"", boolean55 == false);
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNotNull(options62);
        org.junit.Assert.assertNull(strArray65);
        org.junit.Assert.assertEquals(""'"" + str68 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str68, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine75);
        org.junit.Assert.assertNotNull(list76);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(commandLine80);
        org.junit.Assert.assertNotNull(option83);
        org.junit.Assert.assertNull(optionGroup84);
        org.junit.Assert.assertTrue(""'"" + boolean85 + ""' != '"" + false + ""'"", boolean85 == false);
        org.junit.Assert.assertTrue(""'"" + boolean86 + ""' != '"" + false + ""'"", boolean86 == false);
        org.junit.Assert.assertNotNull(list87);
        org.junit.Assert.assertNull(optionGroup88);
        org.junit.Assert.assertNotNull(list89);
        org.junit.Assert.assertNotNull(wildcardClass90);"
39,157,7984,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0158"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option6.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        org.apache.commons.cli.Options options36 = null;
        org.apache.commons.cli.CommandLine commandLine37 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray39 = commandLine37.getOptionValues(""hi!"");
        java.lang.String[] strArray40 = commandLine37.getArgs();
        java.lang.String[] strArray42 = posixParser0.flatten(options36, strArray40, false);
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setDescription("""");
        org.apache.commons.cli.Options options48 = options43.addOption(option45);
        java.util.Collection collection49 = options43.getOptions();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        char char53 = option52.getValueSeparator();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("""");
        option52.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup59 = options50.getOptionGroup(option52);
        option52.setOptionalArg(true);
        int int62 = option52.getId();
        org.apache.commons.cli.Options options63 = options43.addOption(option52);
        boolean boolean65 = options63.hasOption("""");
        org.apache.commons.cli.Option option67 = org.apache.commons.cli.OptionBuilder.create('4');
        option67.setArgs((int) (short) 100);
        option67.setArgName(""[ option: 4  :: null ]"");
        java.lang.String str72 = option67.getLongOpt();
        boolean boolean73 = option67.hasLongOpt();
        org.apache.commons.cli.Options options74 = options63.addOption(option67);
        java.lang.String str75 = options74.toString();
        java.util.Collection collection76 = options74.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine77 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray79 = commandLine77.getOptionValues(""hi!"");
        java.lang.String[] strArray80 = commandLine77.getArgs();
        java.lang.String str82 = commandLine77.getOptionValue(""hi!"");
        boolean boolean84 = commandLine77.hasOption("""");
        java.lang.String str87 = commandLine77.getOptionValue(""[ option: 4  :: null ]"", ""org.apache.commons.cli.MissingOptionException: hi!"");
        java.lang.String[] strArray89 = commandLine77.getOptionValues('4');
        java.lang.String[] strArray90 = commandLine77.getArgs();
        java.lang.String[] strArray92 = posixParser0.flatten(options74, strArray90, false);
        org.apache.commons.cli.OptionBuilder optionBuilder93 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) strArray90);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue(""'"" + char7 + ""' != '"" + '\000' + ""'"", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(collection49);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertTrue(""'"" + char53 + ""' != '"" + '\000' + ""'"", char53 == '\000');
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNull(optionGroup59);
        org.junit.Assert.assertTrue(""'"" + int62 + ""' != '"" + 52 + ""'"", int62 == 52);
        org.junit.Assert.assertNotNull(options63);
        org.junit.Assert.assertTrue(""'"" + boolean65 + ""' != '"" + false + ""'"", boolean65 == false);
        org.junit.Assert.assertNotNull(option67);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue(""'"" + boolean73 + ""' != '"" + false + ""'"", boolean73 == false);
        org.junit.Assert.assertNotNull(options74);
        org.junit.Assert.assertEquals(""'"" + str75 + ""' != '"" + ""[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]"" + ""'"", str75, ""[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]"");
        org.junit.Assert.assertNotNull(collection76);
        org.junit.Assert.assertNull(strArray79);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertTrue(""'"" + boolean84 + ""' != '"" + false + ""'"", boolean84 == false);
        org.junit.Assert.assertEquals(""'"" + str87 + ""' != '"" + ""org.apache.commons.cli.MissingOptionException: hi!"" + ""'"", str87, ""org.apache.commons.cli.MissingOptionException: hi!"");
        org.junit.Assert.assertNull(strArray89);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(optionBuilder93);"
40,134,8012,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0135"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option6.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create('4');
        option38.setDescription("""");
        org.apache.commons.cli.Options options41 = options36.addOption(option38);
        org.apache.commons.cli.Options options42 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        char char45 = option44.getValueSeparator();
        org.apache.commons.cli.Option option47 = org.apache.commons.cli.OptionBuilder.create('4');
        option47.setDescription("""");
        option44.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup51 = options42.getOptionGroup(option44);
        option44.setOptionalArg(true);
        int int54 = option44.getId();
        org.apache.commons.cli.OptionGroup optionGroup55 = options41.getOptionGroup(option44);
        org.apache.commons.cli.Options options56 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option58 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup59 = options56.getOptionGroup(option58);
        boolean boolean60 = option58.hasLongOpt();
        boolean boolean61 = option58.isRequired();
        org.apache.commons.cli.Options options62 = options41.addOption(option58);
        org.apache.commons.cli.PosixParser posixParser63 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option66 = org.apache.commons.cli.OptionBuilder.create('4');
        option66.setDescription("""");
        org.apache.commons.cli.Options options69 = options64.addOption(option66);
        org.apache.commons.cli.CommandLine commandLine70 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray72 = commandLine70.getOptionValues(""hi!"");
        java.lang.String str75 = commandLine70.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str77 = commandLine70.getOptionValue(""arg"");
        java.lang.String[] strArray78 = commandLine70.getArgs();
        java.lang.String[] strArray80 = posixParser63.flatten(options69, strArray78, false);
        org.apache.commons.cli.CommandLine commandLine82 = posixParser0.parse(options62, strArray80, false);
        org.apache.commons.cli.Option option84 = org.apache.commons.cli.OptionBuilder.create('4');
        java.lang.String str86 = option84.getValue(""arg"");
        java.lang.String str87 = option84.getLongOpt();
        option84.setLongOpt("""");
        option84.setArgName("""");
        commandLine82.addOption(option84);
        java.lang.String[] strArray94 = commandLine82.getOptionValues('=');
        java.util.Iterator iterator95 = commandLine82.iterator();
        org.apache.commons.cli.Option[] optionArray96 = commandLine82.getOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue(""'"" + char7 + ""' != '"" + '\000' + ""'"", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertTrue(""'"" + char45 + ""' != '"" + '\000' + ""'"", char45 == '\000');
        org.junit.Assert.assertNotNull(option47);
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertTrue(""'"" + int54 + ""' != '"" + 52 + ""'"", int54 == 52);
        org.junit.Assert.assertNull(optionGroup55);
        org.junit.Assert.assertNotNull(option58);
        org.junit.Assert.assertNull(optionGroup59);
        org.junit.Assert.assertTrue(""'"" + boolean60 + ""' != '"" + false + ""'"", boolean60 == false);
        org.junit.Assert.assertTrue(""'"" + boolean61 + ""' != '"" + false + ""'"", boolean61 == false);
        org.junit.Assert.assertNotNull(options62);
        org.junit.Assert.assertNotNull(option66);
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertNull(strArray72);
        org.junit.Assert.assertEquals(""'"" + str75 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str75, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(option84);
        org.junit.Assert.assertEquals(""'"" + str86 + ""' != '"" + ""arg"" + ""'"", str86, ""arg"");
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertNull(strArray94);
        org.junit.Assert.assertNotNull(iterator95);
        org.junit.Assert.assertNotNull(optionArray96);"
41,160,8201,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0161"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("""");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("""");
        option26.setLongOpt(""hi!"");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues(""hi!"");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("""");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        org.apache.commons.cli.Options options50 = options40.addOption("""", false, ""arg"");
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup54 = options51.getOptionGroup(option53);
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        char char57 = option56.getValueSeparator();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        option59.setDescription("""");
        option56.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup63 = options51.getOptionGroup(option56);
        boolean boolean64 = option56.hasArgName();
        org.apache.commons.cli.Options options65 = options40.addOption(option56);
        org.apache.commons.cli.CommandLine commandLine66 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray68 = commandLine66.getOptionValues(""hi!"");
        java.lang.String str71 = commandLine66.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str73 = commandLine66.getOptionValue(""arg"");
        java.lang.String[] strArray74 = commandLine66.getArgs();
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options40, strArray74, properties75);
        org.apache.commons.cli.Options options77 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option79 = org.apache.commons.cli.OptionBuilder.create('4');
        char char80 = option79.getValueSeparator();
        org.apache.commons.cli.Option option82 = org.apache.commons.cli.OptionBuilder.create('4');
        option82.setDescription("""");
        option79.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup86 = options77.getOptionGroup(option79);
        java.lang.String[] strArray89 = new java.lang.String[] { ""4"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" };
        java.util.Properties properties90 = null;
        org.apache.commons.cli.CommandLine commandLine91 = posixParser0.parse(options77, strArray89, properties90);
        java.lang.String str93 = commandLine91.getOptionValue('\000');
        java.lang.Object obj95 = commandLine91.getOptionObject('=');
        java.lang.String str98 = commandLine91.getOptionValue(""[ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]"", ""[ option: 4  :: null :: [ option:   [ option: 4  ::  ]  :: null ] ]"");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue(""'"" + boolean31 + ""' != '"" + true + ""'"", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNotNull(options50);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertTrue(""'"" + char57 + ""' != '"" + '\000' + ""'"", char57 == '\000');
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNull(optionGroup63);
        org.junit.Assert.assertTrue(""'"" + boolean64 + ""' != '"" + true + ""'"", boolean64 == true);
        org.junit.Assert.assertNotNull(options65);
        org.junit.Assert.assertNull(strArray68);
        org.junit.Assert.assertEquals(""'"" + str71 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str71, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(option79);
        org.junit.Assert.assertTrue(""'"" + char80 + ""' != '"" + '\000' + ""'"", char80 == '\000');
        org.junit.Assert.assertNotNull(option82);
        org.junit.Assert.assertNull(optionGroup86);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(commandLine91);
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertNull(obj95);
        org.junit.Assert.assertEquals(""'"" + str98 + ""' != '"" + ""[ option: 4  :: null :: [ option:   [ option: 4  ::  ]  :: null ] ]"" + ""'"", str98, ""[ option: 4  :: null :: [ option:   [ option: 4  ::  ]  :: null ] ]"");"
42,165,7774,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0166"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.CommandLine commandLine5 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray7 = commandLine5.getOptionValues(""hi!"");
        java.lang.String str10 = commandLine5.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str12 = commandLine5.getOptionValue(""arg"");
        java.lang.String[] strArray13 = commandLine5.getArgs();
        java.lang.String[] strArray15 = posixParser0.flatten(options1, strArray13, true);
        org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = org.apache.commons.cli.OptionBuilder.create('4');
        option18.setDescription("""");
        org.apache.commons.cli.Options options21 = options16.addOption(option18);
        java.util.Collection collection22 = options16.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.util.Properties properties32 = null;
        org.apache.commons.cli.CommandLine commandLine34 = posixParser0.parse(options16, strArray31, properties32, false);
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option37 = org.apache.commons.cli.OptionBuilder.create('4');
        option37.setDescription("""");
        org.apache.commons.cli.Options options40 = options35.addOption(option37);
        java.util.Collection collection41 = options35.getOptionGroups();
        org.apache.commons.cli.Option option43 = org.apache.commons.cli.OptionBuilder.create('4');
        option43.setDescription("""");
        option43.setLongOpt(""hi!"");
        boolean boolean48 = option43.hasArgName();
        org.apache.commons.cli.Options options49 = options35.addOption(option43);
        org.apache.commons.cli.PosixParser posixParser50 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create('4');
        option53.setDescription("""");
        org.apache.commons.cli.Options options56 = options51.addOption(option53);
        org.apache.commons.cli.CommandLine commandLine57 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray59 = commandLine57.getOptionValues(""hi!"");
        java.lang.String[] strArray60 = commandLine57.getArgs();
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser50.parse(options51, strArray60, properties61);
        org.apache.commons.cli.CommandLine commandLine63 = posixParser0.parse(options35, strArray60);
        org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option66 = org.apache.commons.cli.OptionBuilder.create('4');
        option66.setDescription("""");
        org.apache.commons.cli.Options options69 = options64.addOption(option66);
        java.util.Collection collection70 = options64.getOptions();
        org.apache.commons.cli.Options options71 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option73 = org.apache.commons.cli.OptionBuilder.create('4');
        char char74 = option73.getValueSeparator();
        org.apache.commons.cli.Option option76 = org.apache.commons.cli.OptionBuilder.create('4');
        option76.setDescription("""");
        option73.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup80 = options71.getOptionGroup(option73);
        option73.setOptionalArg(true);
        int int83 = option73.getId();
        org.apache.commons.cli.Options options84 = options64.addOption(option73);
        option73.setOptionalArg(false);
        boolean boolean87 = option73.hasOptionalArg();
        java.lang.String str88 = option73.getKey();
        java.util.ListIterator listIterator89 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option73, listIterator89);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNull(strArray7);
        org.junit.Assert.assertEquals(""'"" + str10 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str10, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(option18);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNotNull(collection22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(option37);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertNotNull(collection41);
        org.junit.Assert.assertNotNull(option43);
        org.junit.Assert.assertTrue(""'"" + boolean48 + ""' != '"" + true + ""'"", boolean48 == true);
        org.junit.Assert.assertNotNull(options49);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNotNull(options56);
        org.junit.Assert.assertNull(strArray59);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(option66);
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertNotNull(collection70);
        org.junit.Assert.assertNotNull(option73);
        org.junit.Assert.assertTrue(""'"" + char74 + ""' != '"" + '\000' + ""'"", char74 == '\000');
        org.junit.Assert.assertNotNull(option76);
        org.junit.Assert.assertNull(optionGroup80);
        org.junit.Assert.assertTrue(""'"" + int83 + ""' != '"" + 52 + ""'"", int83 == 52);
        org.junit.Assert.assertNotNull(options84);
        org.junit.Assert.assertTrue(""'"" + boolean87 + ""' != '"" + false + ""'"", boolean87 == false);
        org.junit.Assert.assertEquals(""'"" + str88 + ""' != '"" + ""4"" + ""'"", str88, ""4"");"
43,399,7522,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0400"");
        org.apache.commons.cli.Option option3 = new org.apache.commons.cli.Option("""", true, """");
        boolean boolean4 = option3.hasOptionalArg();
        java.lang.String str6 = option3.getValue("""");
        java.lang.String str7 = option3.getValue();
        option3.setValueSeparator('a');
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create('4');
        option13.setDescription("""");
        org.apache.commons.cli.Options options16 = options11.addOption(option13);
        org.apache.commons.cli.PosixParser posixParser17 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("""");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        org.apache.commons.cli.CommandLine commandLine24 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray26 = commandLine24.getOptionValues(""hi!"");
        java.lang.String[] strArray27 = commandLine24.getArgs();
        java.util.Properties properties28 = null;
        org.apache.commons.cli.CommandLine commandLine29 = posixParser17.parse(options18, strArray27, properties28);
        org.apache.commons.cli.CommandLine commandLine31 = posixParser10.parse(options16, strArray27, false);
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup35 = options32.getOptionGroup(option34);
        org.apache.commons.cli.Option option37 = org.apache.commons.cli.OptionBuilder.create('4');
        char char38 = option37.getValueSeparator();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        option37.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup44 = options32.getOptionGroup(option37);
        boolean boolean46 = options32.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser47 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options48 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option50 = org.apache.commons.cli.OptionBuilder.create('4');
        option50.setDescription("""");
        org.apache.commons.cli.Options options53 = options48.addOption(option50);
        org.apache.commons.cli.CommandLine commandLine54 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray56 = commandLine54.getOptionValues(""hi!"");
        java.lang.String[] strArray57 = commandLine54.getArgs();
        java.util.Properties properties58 = null;
        org.apache.commons.cli.CommandLine commandLine59 = posixParser47.parse(options48, strArray57, properties58);
        java.util.Properties properties60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser10.parse(options32, strArray57, properties60, true);
        org.apache.commons.cli.Options options63 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option65 = org.apache.commons.cli.OptionBuilder.create('4');
        option65.setDescription("""");
        org.apache.commons.cli.Options options68 = options63.addOption(option65);
        java.util.Collection collection69 = options63.getOptions();
        java.lang.String[] strArray70 = null;
        org.apache.commons.cli.CommandLine commandLine72 = posixParser10.parse(options63, strArray70, true);
        org.apache.commons.cli.PosixParser posixParser73 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options74 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option76 = org.apache.commons.cli.OptionBuilder.create('4');
        option76.setDescription("""");
        org.apache.commons.cli.Options options79 = options74.addOption(option76);
        org.apache.commons.cli.CommandLine commandLine80 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray82 = commandLine80.getOptionValues(""hi!"");
        java.lang.String[] strArray83 = commandLine80.getArgs();
        java.util.Properties properties84 = null;
        org.apache.commons.cli.CommandLine commandLine85 = posixParser73.parse(options74, strArray83, properties84);
        java.lang.String[] strArray88 = new java.lang.String[] { ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"", ""hi!"" };
        java.util.Properties properties89 = null;
        org.apache.commons.cli.CommandLine commandLine91 = posixParser10.parse(options74, strArray88, properties89, true);
        option3.setType((java.lang.Object) strArray88);
        boolean boolean93 = option3.hasValueSeparator();
        boolean boolean94 = option3.hasArg();
        org.junit.Assert.assertTrue(""'"" + boolean4 + ""' != '"" + false + ""'"", boolean4 == false);
        org.junit.Assert.assertEquals(""'"" + str6 + ""' != '"" + """" + ""'"", str6, """");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertNotNull(options16);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertNull(optionGroup35);
        org.junit.Assert.assertNotNull(option37);
        org.junit.Assert.assertTrue(""'"" + char38 + ""' != '"" + '\000' + ""'"", char38 == '\000');
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNull(optionGroup44);
        org.junit.Assert.assertTrue(""'"" + boolean46 + ""' != '"" + false + ""'"", boolean46 == false);
        org.junit.Assert.assertNotNull(option50);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertNull(strArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(commandLine59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(option65);
        org.junit.Assert.assertNotNull(options68);
        org.junit.Assert.assertNotNull(collection69);
        org.junit.Assert.assertNotNull(commandLine72);
        org.junit.Assert.assertNotNull(option76);
        org.junit.Assert.assertNotNull(options79);
        org.junit.Assert.assertNull(strArray82);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(commandLine85);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNotNull(commandLine91);
        org.junit.Assert.assertTrue(""'"" + boolean93 + ""' != '"" + true + ""'"", boolean93 == true);
        org.junit.Assert.assertTrue(""'"" + boolean94 + ""' != '"" + true + ""'"", boolean94 == true);"
44,265,7986,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0266"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option6.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create('4');
        option38.setDescription("""");
        org.apache.commons.cli.Options options41 = options36.addOption(option38);
        org.apache.commons.cli.Options options42 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        char char45 = option44.getValueSeparator();
        org.apache.commons.cli.Option option47 = org.apache.commons.cli.OptionBuilder.create('4');
        option47.setDescription("""");
        option44.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup51 = options42.getOptionGroup(option44);
        option44.setOptionalArg(true);
        int int54 = option44.getId();
        org.apache.commons.cli.OptionGroup optionGroup55 = options41.getOptionGroup(option44);
        org.apache.commons.cli.Options options56 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option58 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup59 = options56.getOptionGroup(option58);
        boolean boolean60 = option58.hasLongOpt();
        boolean boolean61 = option58.isRequired();
        org.apache.commons.cli.Options options62 = options41.addOption(option58);
        org.apache.commons.cli.PosixParser posixParser63 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option66 = org.apache.commons.cli.OptionBuilder.create('4');
        option66.setDescription("""");
        org.apache.commons.cli.Options options69 = options64.addOption(option66);
        org.apache.commons.cli.CommandLine commandLine70 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray72 = commandLine70.getOptionValues(""hi!"");
        java.lang.String str75 = commandLine70.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str77 = commandLine70.getOptionValue(""arg"");
        java.lang.String[] strArray78 = commandLine70.getArgs();
        java.lang.String[] strArray80 = posixParser63.flatten(options69, strArray78, false);
        org.apache.commons.cli.CommandLine commandLine82 = posixParser0.parse(options62, strArray80, false);
        org.apache.commons.cli.Option option84 = org.apache.commons.cli.OptionBuilder.create('4');
        java.lang.String str86 = option84.getValue(""arg"");
        java.lang.String str87 = option84.getLongOpt();
        option84.setLongOpt("""");
        option84.setArgName("""");
        commandLine82.addOption(option84);
        java.lang.String[] strArray94 = commandLine82.getOptionValues('=');
        java.util.Iterator iterator95 = commandLine82.iterator();
        java.lang.Object obj97 = commandLine82.getOptionObject('4');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue(""'"" + char7 + ""' != '"" + '\000' + ""'"", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertTrue(""'"" + char45 + ""' != '"" + '\000' + ""'"", char45 == '\000');
        org.junit.Assert.assertNotNull(option47);
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertTrue(""'"" + int54 + ""' != '"" + 52 + ""'"", int54 == 52);
        org.junit.Assert.assertNull(optionGroup55);
        org.junit.Assert.assertNotNull(option58);
        org.junit.Assert.assertNull(optionGroup59);
        org.junit.Assert.assertTrue(""'"" + boolean60 + ""' != '"" + false + ""'"", boolean60 == false);
        org.junit.Assert.assertTrue(""'"" + boolean61 + ""' != '"" + false + ""'"", boolean61 == false);
        org.junit.Assert.assertNotNull(options62);
        org.junit.Assert.assertNotNull(option66);
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertNull(strArray72);
        org.junit.Assert.assertEquals(""'"" + str75 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str75, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(option84);
        org.junit.Assert.assertEquals(""'"" + str86 + ""' != '"" + ""arg"" + ""'"", str86, ""arg"");
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertNull(strArray94);
        org.junit.Assert.assertNotNull(iterator95);
        org.junit.Assert.assertNull(obj97);"
45,268,7478,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0269"");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('4');
        option1.setArgs((int) (short) 100);
        option1.setArgName(""[ option: 4  :: null ]"");
        java.lang.String str6 = option1.getLongOpt();
        boolean boolean7 = option1.hasLongOpt();
        org.apache.commons.cli.PosixParser posixParser8 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option11 = org.apache.commons.cli.OptionBuilder.create('4');
        option11.setDescription("""");
        org.apache.commons.cli.Options options14 = options9.addOption(option11);
        org.apache.commons.cli.PosixParser posixParser15 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = org.apache.commons.cli.OptionBuilder.create('4');
        option18.setDescription("""");
        org.apache.commons.cli.Options options21 = options16.addOption(option18);
        org.apache.commons.cli.CommandLine commandLine22 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray24 = commandLine22.getOptionValues(""hi!"");
        java.lang.String[] strArray25 = commandLine22.getArgs();
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser15.parse(options16, strArray25, properties26);
        org.apache.commons.cli.CommandLine commandLine29 = posixParser8.parse(options14, strArray25, false);
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option32 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup33 = options30.getOptionGroup(option32);
        org.apache.commons.cli.Option option35 = org.apache.commons.cli.OptionBuilder.create('4');
        char char36 = option35.getValueSeparator();
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create('4');
        option38.setDescription("""");
        option35.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup42 = options30.getOptionGroup(option35);
        boolean boolean44 = options30.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser45 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option48 = org.apache.commons.cli.OptionBuilder.create('4');
        option48.setDescription("""");
        org.apache.commons.cli.Options options51 = options46.addOption(option48);
        org.apache.commons.cli.CommandLine commandLine52 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray54 = commandLine52.getOptionValues(""hi!"");
        java.lang.String[] strArray55 = commandLine52.getArgs();
        java.util.Properties properties56 = null;
        org.apache.commons.cli.CommandLine commandLine57 = posixParser45.parse(options46, strArray55, properties56);
        java.util.Properties properties58 = null;
        org.apache.commons.cli.CommandLine commandLine60 = posixParser8.parse(options30, strArray55, properties58, true);
        java.util.Collection collection61 = options30.getOptionGroups();
        org.apache.commons.cli.Options options62 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option64 = org.apache.commons.cli.OptionBuilder.create('4');
        option64.setDescription("""");
        org.apache.commons.cli.Options options67 = options62.addOption(option64);
        java.util.Collection collection68 = options62.getOptionGroups();
        org.apache.commons.cli.Options options72 = options62.addOption("""", false, ""arg"");
        org.apache.commons.cli.Options options73 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option75 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup76 = options73.getOptionGroup(option75);
        org.apache.commons.cli.Option option78 = org.apache.commons.cli.OptionBuilder.create('4');
        char char79 = option78.getValueSeparator();
        org.apache.commons.cli.Option option81 = org.apache.commons.cli.OptionBuilder.create('4');
        option81.setDescription("""");
        option78.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup85 = options73.getOptionGroup(option78);
        boolean boolean86 = option78.hasArgName();
        org.apache.commons.cli.Options options87 = options62.addOption(option78);
        org.apache.commons.cli.Options options88 = options30.addOption(option78);
        boolean boolean89 = option1.equals((java.lang.Object) options30);
        boolean boolean90 = option1.hasArgs();
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue(""'"" + boolean7 + ""' != '"" + false + ""'"", boolean7 == false);
        org.junit.Assert.assertNotNull(option11);
        org.junit.Assert.assertNotNull(options14);
        org.junit.Assert.assertNotNull(option18);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(option32);
        org.junit.Assert.assertNull(optionGroup33);
        org.junit.Assert.assertNotNull(option35);
        org.junit.Assert.assertTrue(""'"" + char36 + ""' != '"" + '\000' + ""'"", char36 == '\000');
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertTrue(""'"" + boolean44 + ""' != '"" + false + ""'"", boolean44 == false);
        org.junit.Assert.assertNotNull(option48);
        org.junit.Assert.assertNotNull(options51);
        org.junit.Assert.assertNull(strArray54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(commandLine57);
        org.junit.Assert.assertNotNull(commandLine60);
        org.junit.Assert.assertNotNull(collection61);
        org.junit.Assert.assertNotNull(option64);
        org.junit.Assert.assertNotNull(options67);
        org.junit.Assert.assertNotNull(collection68);
        org.junit.Assert.assertNotNull(options72);
        org.junit.Assert.assertNotNull(option75);
        org.junit.Assert.assertNull(optionGroup76);
        org.junit.Assert.assertNotNull(option78);
        org.junit.Assert.assertTrue(""'"" + char79 + ""' != '"" + '\000' + ""'"", char79 == '\000');
        org.junit.Assert.assertNotNull(option81);
        org.junit.Assert.assertNull(optionGroup85);
        org.junit.Assert.assertTrue(""'"" + boolean86 + ""' != '"" + true + ""'"", boolean86 == true);
        org.junit.Assert.assertNotNull(options87);
        org.junit.Assert.assertNotNull(options88);
        org.junit.Assert.assertTrue(""'"" + boolean89 + ""' != '"" + false + ""'"", boolean89 == false);
        org.junit.Assert.assertTrue(""'"" + boolean90 + ""' != '"" + true + ""'"", boolean90 == true);"
46,294,8119,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0295"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("""");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("""");
        option26.setLongOpt(""hi!"");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues(""hi!"");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("""");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        org.apache.commons.cli.Options options50 = options40.addOption("""", false, ""arg"");
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup54 = options51.getOptionGroup(option53);
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        char char57 = option56.getValueSeparator();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        option59.setDescription("""");
        option56.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup63 = options51.getOptionGroup(option56);
        boolean boolean64 = option56.hasArgName();
        org.apache.commons.cli.Options options65 = options40.addOption(option56);
        org.apache.commons.cli.CommandLine commandLine66 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray68 = commandLine66.getOptionValues(""hi!"");
        java.lang.String str71 = commandLine66.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str73 = commandLine66.getOptionValue(""arg"");
        java.lang.String[] strArray74 = commandLine66.getArgs();
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options40, strArray74, properties75);
        posixParser0.burstToken(""[ option: 4  :: null ]"", true);
        posixParser0.burstToken(""org.apache.commons.cli.MissingOptionException: [ option: 4  :: null ]"", false);
        org.apache.commons.cli.Options options83 = null;
        org.apache.commons.cli.CommandLine commandLine84 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray86 = commandLine84.getOptionValues(""hi!"");
        java.lang.String str89 = commandLine84.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str91 = commandLine84.getOptionValue(""arg"");
        java.lang.Object obj93 = commandLine84.getOptionObject('a');
        java.lang.String[] strArray95 = commandLine84.getOptionValues('=');
        java.lang.String[] strArray96 = commandLine84.getArgs();
        java.lang.String[] strArray97 = commandLine84.getArgs();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.CommandLine commandLine98 = posixParser0.parse(options83, strArray97);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue(""'"" + boolean31 + ""' != '"" + true + ""'"", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNotNull(options50);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertTrue(""'"" + char57 + ""' != '"" + '\000' + ""'"", char57 == '\000');
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNull(optionGroup63);
        org.junit.Assert.assertTrue(""'"" + boolean64 + ""' != '"" + true + ""'"", boolean64 == true);
        org.junit.Assert.assertNotNull(options65);
        org.junit.Assert.assertNull(strArray68);
        org.junit.Assert.assertEquals(""'"" + str71 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str71, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNull(strArray86);
        org.junit.Assert.assertEquals(""'"" + str89 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str89, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str91);
        org.junit.Assert.assertNull(obj93);
        org.junit.Assert.assertNull(strArray95);
        org.junit.Assert.assertNotNull(strArray96);
        org.junit.Assert.assertNotNull(strArray97);"
47,163,7945,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0164"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option6.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create('4');
        option38.setDescription("""");
        org.apache.commons.cli.Options options41 = options36.addOption(option38);
        org.apache.commons.cli.Options options42 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        char char45 = option44.getValueSeparator();
        org.apache.commons.cli.Option option47 = org.apache.commons.cli.OptionBuilder.create('4');
        option47.setDescription("""");
        option44.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup51 = options42.getOptionGroup(option44);
        option44.setOptionalArg(true);
        int int54 = option44.getId();
        org.apache.commons.cli.OptionGroup optionGroup55 = options41.getOptionGroup(option44);
        org.apache.commons.cli.Options options56 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option58 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup59 = options56.getOptionGroup(option58);
        boolean boolean60 = option58.hasLongOpt();
        boolean boolean61 = option58.isRequired();
        org.apache.commons.cli.Options options62 = options41.addOption(option58);
        org.apache.commons.cli.PosixParser posixParser63 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option66 = org.apache.commons.cli.OptionBuilder.create('4');
        option66.setDescription("""");
        org.apache.commons.cli.Options options69 = options64.addOption(option66);
        org.apache.commons.cli.CommandLine commandLine70 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray72 = commandLine70.getOptionValues(""hi!"");
        java.lang.String str75 = commandLine70.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str77 = commandLine70.getOptionValue(""arg"");
        java.lang.String[] strArray78 = commandLine70.getArgs();
        java.lang.String[] strArray80 = posixParser63.flatten(options69, strArray78, false);
        org.apache.commons.cli.CommandLine commandLine82 = posixParser0.parse(options62, strArray80, false);
        java.lang.Object obj84 = commandLine82.getOptionObject(' ');
        java.lang.Object obj86 = commandLine82.getOptionObject(""[ option: 4  :: null ::  ]"");
        java.lang.String str89 = commandLine82.getOptionValue('a', ""[ Options: [ short {4=[ option: 4  :: null ::  ]} ] [ long {} ]"");
        java.util.List list90 = commandLine82.getArgList();
        java.util.Iterator iterator91 = commandLine82.iterator();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue(""'"" + char7 + ""' != '"" + '\000' + ""'"", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertTrue(""'"" + char45 + ""' != '"" + '\000' + ""'"", char45 == '\000');
        org.junit.Assert.assertNotNull(option47);
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertTrue(""'"" + int54 + ""' != '"" + 52 + ""'"", int54 == 52);
        org.junit.Assert.assertNull(optionGroup55);
        org.junit.Assert.assertNotNull(option58);
        org.junit.Assert.assertNull(optionGroup59);
        org.junit.Assert.assertTrue(""'"" + boolean60 + ""' != '"" + false + ""'"", boolean60 == false);
        org.junit.Assert.assertTrue(""'"" + boolean61 + ""' != '"" + false + ""'"", boolean61 == false);
        org.junit.Assert.assertNotNull(options62);
        org.junit.Assert.assertNotNull(option66);
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertNull(strArray72);
        org.junit.Assert.assertEquals(""'"" + str75 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str75, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNull(obj84);
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertEquals(""'"" + str89 + ""' != '"" + ""[ Options: [ short {4=[ option: 4  :: null ::  ]} ] [ long {} ]"" + ""'"", str89, ""[ Options: [ short {4=[ option: 4  :: null ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNotNull(list90);
        org.junit.Assert.assertNotNull(iterator91);"
48,320,7422,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0321"");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option2 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup3 = options0.getOptionGroup(option2);
        java.lang.Object obj4 = option2.getType();
        org.apache.commons.cli.PosixParser posixParser5 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options6 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option8 = org.apache.commons.cli.OptionBuilder.create('4');
        option8.setDescription("""");
        org.apache.commons.cli.Options options11 = options6.addOption(option8);
        org.apache.commons.cli.CommandLine commandLine12 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray14 = commandLine12.getOptionValues(""hi!"");
        java.lang.String str17 = commandLine12.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str19 = commandLine12.getOptionValue(""arg"");
        java.lang.String[] strArray20 = commandLine12.getArgs();
        java.lang.String[] strArray22 = posixParser5.flatten(options11, strArray20, false);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create('4');
        option25.setDescription("""");
        org.apache.commons.cli.Options options28 = options23.addOption(option25);
        java.util.Collection collection29 = options23.getOptionGroups();
        org.apache.commons.cli.Option option31 = org.apache.commons.cli.OptionBuilder.create('4');
        option31.setDescription("""");
        option31.setLongOpt(""hi!"");
        boolean boolean36 = option31.hasArgName();
        org.apache.commons.cli.Options options37 = options23.addOption(option31);
        org.apache.commons.cli.CommandLine commandLine38 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray40 = commandLine38.getOptionValues(""hi!"");
        java.lang.String[] strArray41 = commandLine38.getArgs();
        java.util.Properties properties42 = null;
        org.apache.commons.cli.CommandLine commandLine44 = posixParser5.parse(options23, strArray41, properties42, true);
        org.apache.commons.cli.Options options45 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option47 = org.apache.commons.cli.OptionBuilder.create('4');
        option47.setDescription("""");
        org.apache.commons.cli.Options options50 = options45.addOption(option47);
        java.util.Collection collection51 = options45.getOptionGroups();
        java.lang.String[] strArray52 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser5.parse(options45, strArray52);
        java.lang.String str56 = commandLine53.getOptionValue(""[ option:    :: null ]"", ""[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]"");
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        option59.setDescription("""");
        org.apache.commons.cli.Options options62 = options57.addOption(option59);
        java.util.Collection collection63 = options57.getOptions();
        org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option66 = org.apache.commons.cli.OptionBuilder.create('4');
        char char67 = option66.getValueSeparator();
        org.apache.commons.cli.Option option69 = org.apache.commons.cli.OptionBuilder.create('4');
        option69.setDescription("""");
        option66.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup73 = options64.getOptionGroup(option66);
        option66.setOptionalArg(true);
        int int76 = option66.getId();
        org.apache.commons.cli.Options options77 = options57.addOption(option66);
        option66.setOptionalArg(false);
        java.lang.String str81 = option66.getValue(""[ option: 4  :: null ::  ]"");
        commandLine53.addOption(option66);
        boolean boolean83 = option2.equals((java.lang.Object) commandLine53);
        java.lang.String str84 = option2.getKey();
        java.lang.String str86 = option2.getValue((int) (short) -1);
        org.junit.Assert.assertNotNull(option2);
        org.junit.Assert.assertNull(optionGroup3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(option8);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNull(strArray14);
        org.junit.Assert.assertEquals(""'"" + str17 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str17, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(collection29);
        org.junit.Assert.assertNotNull(option31);
        org.junit.Assert.assertTrue(""'"" + boolean36 + ""' != '"" + true + ""'"", boolean36 == true);
        org.junit.Assert.assertNotNull(options37);
        org.junit.Assert.assertNull(strArray40);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(option47);
        org.junit.Assert.assertNotNull(options50);
        org.junit.Assert.assertNotNull(collection51);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertEquals(""'"" + str56 + ""' != '"" + ""[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]"" + ""'"", str56, ""[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]"");
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNotNull(options62);
        org.junit.Assert.assertNotNull(collection63);
        org.junit.Assert.assertNotNull(option66);
        org.junit.Assert.assertTrue(""'"" + char67 + ""' != '"" + '\000' + ""'"", char67 == '\000');
        org.junit.Assert.assertNotNull(option69);
        org.junit.Assert.assertNull(optionGroup73);
        org.junit.Assert.assertTrue(""'"" + int76 + ""' != '"" + 52 + ""'"", int76 == 52);
        org.junit.Assert.assertNotNull(options77);
        org.junit.Assert.assertEquals(""'"" + str81 + ""' != '"" + ""[ option: 4  :: null ::  ]"" + ""'"", str81, ""[ option: 4  :: null ::  ]"");
        org.junit.Assert.assertTrue(""'"" + boolean83 + ""' != '"" + false + ""'"", boolean83 == false);
        org.junit.Assert.assertEquals(""'"" + str84 + ""' != '"" + "" "" + ""'"", str84, "" "");
        org.junit.Assert.assertNull(str86);"
49,130,8114,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0131"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("""");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("""");
        option26.setLongOpt(""hi!"");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues(""hi!"");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("""");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        org.apache.commons.cli.Options options50 = options40.addOption("""", false, ""arg"");
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup54 = options51.getOptionGroup(option53);
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        char char57 = option56.getValueSeparator();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        option59.setDescription("""");
        option56.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup63 = options51.getOptionGroup(option56);
        boolean boolean64 = option56.hasArgName();
        org.apache.commons.cli.Options options65 = options40.addOption(option56);
        org.apache.commons.cli.CommandLine commandLine66 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray68 = commandLine66.getOptionValues(""hi!"");
        java.lang.String str71 = commandLine66.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str73 = commandLine66.getOptionValue(""arg"");
        java.lang.String[] strArray74 = commandLine66.getArgs();
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options40, strArray74, properties75);
        org.apache.commons.cli.Options options77 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option79 = org.apache.commons.cli.OptionBuilder.create('4');
        char char80 = option79.getValueSeparator();
        org.apache.commons.cli.Option option82 = org.apache.commons.cli.OptionBuilder.create('4');
        option82.setDescription("""");
        option79.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup86 = options77.getOptionGroup(option79);
        java.lang.String[] strArray89 = new java.lang.String[] { ""4"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" };
        java.util.Properties properties90 = null;
        org.apache.commons.cli.CommandLine commandLine91 = posixParser0.parse(options77, strArray89, properties90);
        java.lang.String str94 = commandLine91.getOptionValue(""[ option: 4  ::  ]"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        boolean boolean96 = commandLine91.hasOption(""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue(""'"" + boolean31 + ""' != '"" + true + ""'"", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNotNull(options50);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertTrue(""'"" + char57 + ""' != '"" + '\000' + ""'"", char57 == '\000');
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNull(optionGroup63);
        org.junit.Assert.assertTrue(""'"" + boolean64 + ""' != '"" + true + ""'"", boolean64 == true);
        org.junit.Assert.assertNotNull(options65);
        org.junit.Assert.assertNull(strArray68);
        org.junit.Assert.assertEquals(""'"" + str71 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str71, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(option79);
        org.junit.Assert.assertTrue(""'"" + char80 + ""' != '"" + '\000' + ""'"", char80 == '\000');
        org.junit.Assert.assertNotNull(option82);
        org.junit.Assert.assertNull(optionGroup86);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(commandLine91);
        org.junit.Assert.assertEquals(""'"" + str94 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str94, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertTrue(""'"" + boolean96 + ""' != '"" + false + ""'"", boolean96 == false);"
50,10,8171,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0011"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues(""hi!"");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("""");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        org.apache.commons.cli.Options options60 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option62 = org.apache.commons.cli.OptionBuilder.create('4');
        char char63 = option62.getValueSeparator();
        org.apache.commons.cli.Option option65 = org.apache.commons.cli.OptionBuilder.create('4');
        option65.setDescription("""");
        option62.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup69 = options60.getOptionGroup(option62);
        option62.setOptionalArg(true);
        int int72 = option62.getId();
        org.apache.commons.cli.Options options73 = options53.addOption(option62);
        boolean boolean75 = options73.hasOption("""");
        org.apache.commons.cli.PosixParser posixParser76 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options77 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option79 = org.apache.commons.cli.OptionBuilder.create('4');
        option79.setDescription("""");
        org.apache.commons.cli.Options options82 = options77.addOption(option79);
        org.apache.commons.cli.PosixParser posixParser83 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options84 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option86 = org.apache.commons.cli.OptionBuilder.create('4');
        option86.setDescription("""");
        org.apache.commons.cli.Options options89 = options84.addOption(option86);
        org.apache.commons.cli.CommandLine commandLine90 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray92 = commandLine90.getOptionValues(""hi!"");
        java.lang.String[] strArray93 = commandLine90.getArgs();
        java.util.Properties properties94 = null;
        org.apache.commons.cli.CommandLine commandLine95 = posixParser83.parse(options84, strArray93, properties94);
        org.apache.commons.cli.CommandLine commandLine97 = posixParser76.parse(options82, strArray93, false);
        org.apache.commons.cli.CommandLine commandLine98 = posixParser0.parse(options73, strArray93);
        org.apache.commons.cli.Option[] optionArray99 = commandLine98.getOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue(""'"" + boolean36 + ""' != '"" + false + ""'"", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(option62);
        org.junit.Assert.assertTrue(""'"" + char63 + ""' != '"" + '\000' + ""'"", char63 == '\000');
        org.junit.Assert.assertNotNull(option65);
        org.junit.Assert.assertNull(optionGroup69);
        org.junit.Assert.assertTrue(""'"" + int72 + ""' != '"" + 52 + ""'"", int72 == 52);
        org.junit.Assert.assertNotNull(options73);
        org.junit.Assert.assertTrue(""'"" + boolean75 + ""' != '"" + false + ""'"", boolean75 == false);
        org.junit.Assert.assertNotNull(option79);
        org.junit.Assert.assertNotNull(options82);
        org.junit.Assert.assertNotNull(option86);
        org.junit.Assert.assertNotNull(options89);
        org.junit.Assert.assertNull(strArray92);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(commandLine95);
        org.junit.Assert.assertNotNull(commandLine97);
        org.junit.Assert.assertNotNull(commandLine98);
        org.junit.Assert.assertNotNull(optionArray99);"
51,13,8154,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0014"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues(""hi!"");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("""");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        org.apache.commons.cli.Options options60 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option62 = org.apache.commons.cli.OptionBuilder.create('4');
        char char63 = option62.getValueSeparator();
        org.apache.commons.cli.Option option65 = org.apache.commons.cli.OptionBuilder.create('4');
        option65.setDescription("""");
        option62.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup69 = options60.getOptionGroup(option62);
        option62.setOptionalArg(true);
        int int72 = option62.getId();
        org.apache.commons.cli.Options options73 = options53.addOption(option62);
        boolean boolean75 = options73.hasOption("""");
        org.apache.commons.cli.PosixParser posixParser76 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options77 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option79 = org.apache.commons.cli.OptionBuilder.create('4');
        option79.setDescription("""");
        org.apache.commons.cli.Options options82 = options77.addOption(option79);
        org.apache.commons.cli.PosixParser posixParser83 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options84 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option86 = org.apache.commons.cli.OptionBuilder.create('4');
        option86.setDescription("""");
        org.apache.commons.cli.Options options89 = options84.addOption(option86);
        org.apache.commons.cli.CommandLine commandLine90 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray92 = commandLine90.getOptionValues(""hi!"");
        java.lang.String[] strArray93 = commandLine90.getArgs();
        java.util.Properties properties94 = null;
        org.apache.commons.cli.CommandLine commandLine95 = posixParser83.parse(options84, strArray93, properties94);
        org.apache.commons.cli.CommandLine commandLine97 = posixParser76.parse(options82, strArray93, false);
        org.apache.commons.cli.CommandLine commandLine98 = posixParser0.parse(options73, strArray93);
        java.util.Collection collection99 = options73.getOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue(""'"" + boolean36 + ""' != '"" + false + ""'"", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(option62);
        org.junit.Assert.assertTrue(""'"" + char63 + ""' != '"" + '\000' + ""'"", char63 == '\000');
        org.junit.Assert.assertNotNull(option65);
        org.junit.Assert.assertNull(optionGroup69);
        org.junit.Assert.assertTrue(""'"" + int72 + ""' != '"" + 52 + ""'"", int72 == 52);
        org.junit.Assert.assertNotNull(options73);
        org.junit.Assert.assertTrue(""'"" + boolean75 + ""' != '"" + false + ""'"", boolean75 == false);
        org.junit.Assert.assertNotNull(option79);
        org.junit.Assert.assertNotNull(options82);
        org.junit.Assert.assertNotNull(option86);
        org.junit.Assert.assertNotNull(options89);
        org.junit.Assert.assertNull(strArray92);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(commandLine95);
        org.junit.Assert.assertNotNull(commandLine97);
        org.junit.Assert.assertNotNull(commandLine98);
        org.junit.Assert.assertNotNull(collection99);"
52,386,7889,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0387"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option6.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup39 = options36.getOptionGroup(option38);
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create('4');
        char char42 = option41.getValueSeparator();
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        option44.setDescription("""");
        option41.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup48 = options36.getOptionGroup(option41);
        org.apache.commons.cli.Option option50 = org.apache.commons.cli.OptionBuilder.create('4');
        boolean boolean51 = option50.isRequired();
        org.apache.commons.cli.Options options52 = options36.addOption(option50);
        java.util.List list53 = options52.getRequiredOptions();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setArgs((int) (short) 100);
        option55.setArgName(""[ option: 4  :: null ]"");
        java.lang.String str60 = option55.getLongOpt();
        java.lang.String str62 = option55.getValue((int) (short) -1);
        org.apache.commons.cli.CommandLine commandLine63 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray65 = commandLine63.getOptionValues(""hi!"");
        java.lang.String str68 = commandLine63.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str70 = commandLine63.getOptionValue(""arg"");
        java.lang.String[] strArray71 = commandLine63.getArgs();
        option55.setType((java.lang.Object) strArray71);
        java.util.Properties properties73 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser0.parse(options52, strArray71, properties73);
        posixParser0.burstToken(""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ], arg=[ option: arg  :: null ]} ] [ long {} ]"", false);
        org.apache.commons.cli.Options options78 = null;
        org.apache.commons.cli.CommandLine commandLine79 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray81 = commandLine79.getOptionValues(""hi!"");
        java.lang.String str84 = commandLine79.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str86 = commandLine79.getOptionValue(""arg"");
        java.lang.String[] strArray87 = commandLine79.getArgs();
        java.util.Properties properties88 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.CommandLine commandLine90 = posixParser0.parse(options78, strArray87, properties88, false);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue(""'"" + char7 + ""' != '"" + '\000' + ""'"", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertNull(optionGroup39);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertTrue(""'"" + char42 + ""' != '"" + '\000' + ""'"", char42 == '\000');
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertNull(optionGroup48);
        org.junit.Assert.assertNotNull(option50);
        org.junit.Assert.assertTrue(""'"" + boolean51 + ""' != '"" + false + ""'"", boolean51 == false);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(list53);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(strArray65);
        org.junit.Assert.assertEquals(""'"" + str68 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str68, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(commandLine74);
        org.junit.Assert.assertNull(strArray81);
        org.junit.Assert.assertEquals(""'"" + str84 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str84, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNotNull(strArray87);"
53,113,8081,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0114"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("""");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("""");
        option26.setLongOpt(""hi!"");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues(""hi!"");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("""");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        org.apache.commons.cli.Options options50 = options40.addOption("""", false, ""arg"");
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup54 = options51.getOptionGroup(option53);
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        char char57 = option56.getValueSeparator();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        option59.setDescription("""");
        option56.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup63 = options51.getOptionGroup(option56);
        boolean boolean64 = option56.hasArgName();
        org.apache.commons.cli.Options options65 = options40.addOption(option56);
        org.apache.commons.cli.CommandLine commandLine66 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray68 = commandLine66.getOptionValues(""hi!"");
        java.lang.String str71 = commandLine66.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str73 = commandLine66.getOptionValue(""arg"");
        java.lang.String[] strArray74 = commandLine66.getArgs();
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options40, strArray74, properties75);
        org.apache.commons.cli.Options options77 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option79 = org.apache.commons.cli.OptionBuilder.create('4');
        char char80 = option79.getValueSeparator();
        org.apache.commons.cli.Option option82 = org.apache.commons.cli.OptionBuilder.create('4');
        option82.setDescription("""");
        option79.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup86 = options77.getOptionGroup(option79);
        java.lang.String[] strArray89 = new java.lang.String[] { ""4"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" };
        java.util.Properties properties90 = null;
        org.apache.commons.cli.CommandLine commandLine91 = posixParser0.parse(options77, strArray89, properties90);
        posixParser0.burstToken("""", true);
        org.apache.commons.cli.Options options95 = null;
        java.lang.String[] strArray96 = null;
        java.util.Properties properties97 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.CommandLine commandLine98 = posixParser0.parse(options95, strArray96, properties97);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue(""'"" + boolean31 + ""' != '"" + true + ""'"", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNotNull(options50);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertTrue(""'"" + char57 + ""' != '"" + '\000' + ""'"", char57 == '\000');
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNull(optionGroup63);
        org.junit.Assert.assertTrue(""'"" + boolean64 + ""' != '"" + true + ""'"", boolean64 == true);
        org.junit.Assert.assertNotNull(options65);
        org.junit.Assert.assertNull(strArray68);
        org.junit.Assert.assertEquals(""'"" + str71 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str71, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(option79);
        org.junit.Assert.assertTrue(""'"" + char80 + ""' != '"" + '\000' + ""'"", char80 == '\000');
        org.junit.Assert.assertNotNull(option82);
        org.junit.Assert.assertNull(optionGroup86);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(commandLine91);"
54,433,8077,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0434"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("""");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("""");
        option26.setLongOpt(""hi!"");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues(""hi!"");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("""");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        org.apache.commons.cli.Options options50 = options40.addOption("""", false, ""arg"");
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup54 = options51.getOptionGroup(option53);
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        char char57 = option56.getValueSeparator();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        option59.setDescription("""");
        option56.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup63 = options51.getOptionGroup(option56);
        boolean boolean64 = option56.hasArgName();
        org.apache.commons.cli.Options options65 = options40.addOption(option56);
        org.apache.commons.cli.CommandLine commandLine66 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray68 = commandLine66.getOptionValues(""hi!"");
        java.lang.String str71 = commandLine66.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str73 = commandLine66.getOptionValue(""arg"");
        java.lang.String[] strArray74 = commandLine66.getArgs();
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options40, strArray74, properties75);
        org.apache.commons.cli.Options options77 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option79 = org.apache.commons.cli.OptionBuilder.create('4');
        char char80 = option79.getValueSeparator();
        org.apache.commons.cli.Option option82 = org.apache.commons.cli.OptionBuilder.create('4');
        option82.setDescription("""");
        option79.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup86 = options77.getOptionGroup(option79);
        java.lang.String[] strArray89 = new java.lang.String[] { ""4"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" };
        java.util.Properties properties90 = null;
        org.apache.commons.cli.CommandLine commandLine91 = posixParser0.parse(options77, strArray89, properties90);
        java.lang.String str93 = commandLine91.getOptionValue('\000');
        java.lang.Object obj95 = commandLine91.getOptionObject('=');
        boolean boolean97 = commandLine91.hasOption(' ');
        java.lang.String str99 = commandLine91.getOptionValue(""org.apache.commons.cli.ParseException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue(""'"" + boolean31 + ""' != '"" + true + ""'"", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNotNull(options50);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertTrue(""'"" + char57 + ""' != '"" + '\000' + ""'"", char57 == '\000');
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNull(optionGroup63);
        org.junit.Assert.assertTrue(""'"" + boolean64 + ""' != '"" + true + ""'"", boolean64 == true);
        org.junit.Assert.assertNotNull(options65);
        org.junit.Assert.assertNull(strArray68);
        org.junit.Assert.assertEquals(""'"" + str71 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str71, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(option79);
        org.junit.Assert.assertTrue(""'"" + char80 + ""' != '"" + '\000' + ""'"", char80 == '\000');
        org.junit.Assert.assertNotNull(option82);
        org.junit.Assert.assertNull(optionGroup86);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(commandLine91);
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertNull(obj95);
        org.junit.Assert.assertTrue(""'"" + boolean97 + ""' != '"" + false + ""'"", boolean97 == false);
        org.junit.Assert.assertNull(str99);"
55,387,7880,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0388"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken(""hi!"", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("""");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptionGroups();
        org.apache.commons.cli.Options options31 = options21.addOption("""", false, ""arg"");
        java.util.List list32 = options31.getRequiredOptions();
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create(""arg"");
        org.apache.commons.cli.Options options35 = options31.addOption(option34);
        boolean boolean37 = options31.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        java.util.Collection collection38 = options31.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine39 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine39.getOptionValues(""hi!"");
        java.lang.String str44 = commandLine39.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str46 = commandLine39.getOptionValue(""arg"");
        java.lang.String[] strArray47 = commandLine39.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine50 = posixParser0.parse(options31, strArray47, properties48, true);
        posixParser0.burstToken(""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"", false);
        org.apache.commons.cli.PosixParser posixParser54 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = org.apache.commons.cli.OptionBuilder.create('4');
        option57.setDescription("""");
        org.apache.commons.cli.Options options60 = options55.addOption(option57);
        org.apache.commons.cli.PosixParser posixParser61 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options62 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option64 = org.apache.commons.cli.OptionBuilder.create('4');
        option64.setDescription("""");
        org.apache.commons.cli.Options options67 = options62.addOption(option64);
        org.apache.commons.cli.CommandLine commandLine68 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray70 = commandLine68.getOptionValues(""hi!"");
        java.lang.String[] strArray71 = commandLine68.getArgs();
        java.util.Properties properties72 = null;
        org.apache.commons.cli.CommandLine commandLine73 = posixParser61.parse(options62, strArray71, properties72);
        org.apache.commons.cli.CommandLine commandLine75 = posixParser54.parse(options60, strArray71, false);
        org.apache.commons.cli.Option option77 = org.apache.commons.cli.OptionBuilder.create('4');
        char char78 = option77.getValueSeparator();
        org.apache.commons.cli.Option option80 = org.apache.commons.cli.OptionBuilder.create('4');
        option80.setDescription("""");
        option77.setType((java.lang.Object) """");
        java.lang.String str84 = option77.getKey();
        org.apache.commons.cli.Options options85 = options60.addOption(option77);
        org.apache.commons.cli.CommandLine commandLine86 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray88 = commandLine86.getOptionValues(""hi!"");
        java.lang.String[] strArray89 = commandLine86.getArgs();
        java.util.Iterator iterator90 = commandLine86.iterator();
        java.lang.Object obj92 = commandLine86.getOptionObject('#');
        java.lang.String str95 = commandLine86.getOptionValue('a', ""[ Options: [ short {} ] [ long {} ]"");
        java.lang.String[] strArray96 = commandLine86.getArgs();
        org.apache.commons.cli.CommandLine commandLine97 = posixParser0.parse(options85, strArray96);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(options31);
        org.junit.Assert.assertNotNull(list32);
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertTrue(""'"" + boolean37 + ""' != '"" + false + ""'"", boolean37 == false);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertEquals(""'"" + str44 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str44, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(option64);
        org.junit.Assert.assertNotNull(options67);
        org.junit.Assert.assertNull(strArray70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(commandLine73);
        org.junit.Assert.assertNotNull(commandLine75);
        org.junit.Assert.assertNotNull(option77);
        org.junit.Assert.assertTrue(""'"" + char78 + ""' != '"" + '\000' + ""'"", char78 == '\000');
        org.junit.Assert.assertNotNull(option80);
        org.junit.Assert.assertEquals(""'"" + str84 + ""' != '"" + ""4"" + ""'"", str84, ""4"");
        org.junit.Assert.assertNotNull(options85);
        org.junit.Assert.assertNull(strArray88);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(iterator90);
        org.junit.Assert.assertNull(obj92);
        org.junit.Assert.assertEquals(""'"" + str95 + ""' != '"" + ""[ Options: [ short {} ] [ long {} ]"" + ""'"", str95, ""[ Options: [ short {} ] [ long {} ]"");
        org.junit.Assert.assertNotNull(strArray96);
        org.junit.Assert.assertNotNull(commandLine97);"
56,355,7846,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0356"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option6.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create('4');
        option38.setDescription("""");
        org.apache.commons.cli.Options options41 = options36.addOption(option38);
        org.apache.commons.cli.Options options42 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        char char45 = option44.getValueSeparator();
        org.apache.commons.cli.Option option47 = org.apache.commons.cli.OptionBuilder.create('4');
        option47.setDescription("""");
        option44.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup51 = options42.getOptionGroup(option44);
        option44.setOptionalArg(true);
        int int54 = option44.getId();
        org.apache.commons.cli.OptionGroup optionGroup55 = options41.getOptionGroup(option44);
        org.apache.commons.cli.Options options56 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option58 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup59 = options56.getOptionGroup(option58);
        boolean boolean60 = option58.hasLongOpt();
        boolean boolean61 = option58.isRequired();
        org.apache.commons.cli.Options options62 = options41.addOption(option58);
        org.apache.commons.cli.PosixParser posixParser63 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option66 = org.apache.commons.cli.OptionBuilder.create('4');
        option66.setDescription("""");
        org.apache.commons.cli.Options options69 = options64.addOption(option66);
        org.apache.commons.cli.CommandLine commandLine70 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray72 = commandLine70.getOptionValues(""hi!"");
        java.lang.String str75 = commandLine70.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str77 = commandLine70.getOptionValue(""arg"");
        java.lang.String[] strArray78 = commandLine70.getArgs();
        java.lang.String[] strArray80 = posixParser63.flatten(options69, strArray78, false);
        org.apache.commons.cli.CommandLine commandLine82 = posixParser0.parse(options62, strArray80, false);
        org.apache.commons.cli.Option option87 = new org.apache.commons.cli.Option(""arg"", """", false, """");
        option87.setValueSeparator('#');
        org.apache.commons.cli.Options options90 = options62.addOption(option87);
        org.apache.commons.cli.Option option94 = new org.apache.commons.cli.Option("""", true, """");
        option94.setArgs((-2));
        java.lang.String str97 = option94.toString();
        org.apache.commons.cli.Options options98 = options62.addOption(option94);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue(""'"" + char7 + ""' != '"" + '\000' + ""'"", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertTrue(""'"" + char45 + ""' != '"" + '\000' + ""'"", char45 == '\000');
        org.junit.Assert.assertNotNull(option47);
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertTrue(""'"" + int54 + ""' != '"" + 52 + ""'"", int54 == 52);
        org.junit.Assert.assertNull(optionGroup55);
        org.junit.Assert.assertNotNull(option58);
        org.junit.Assert.assertNull(optionGroup59);
        org.junit.Assert.assertTrue(""'"" + boolean60 + ""' != '"" + false + ""'"", boolean60 == false);
        org.junit.Assert.assertTrue(""'"" + boolean61 + ""' != '"" + false + ""'"", boolean61 == false);
        org.junit.Assert.assertNotNull(options62);
        org.junit.Assert.assertNotNull(option66);
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertNull(strArray72);
        org.junit.Assert.assertEquals(""'"" + str75 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str75, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(options90);
        org.junit.Assert.assertEquals(""'"" + str97 + ""' != '"" + ""[ option:  +ARG ::  ]"" + ""'"", str97, ""[ option:  +ARG ::  ]"");
        org.junit.Assert.assertNotNull(options98);"
57,378,8102,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0379"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues(""hi!"");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("""");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptionGroups();
        org.apache.commons.cli.Option option61 = org.apache.commons.cli.OptionBuilder.create('4');
        option61.setDescription("""");
        option61.setLongOpt(""hi!"");
        boolean boolean66 = option61.hasArgName();
        org.apache.commons.cli.Options options67 = options53.addOption(option61);
        org.apache.commons.cli.PosixParser posixParser68 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options69 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option71 = org.apache.commons.cli.OptionBuilder.create('4');
        option71.setDescription("""");
        org.apache.commons.cli.Options options74 = options69.addOption(option71);
        org.apache.commons.cli.CommandLine commandLine75 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray77 = commandLine75.getOptionValues(""hi!"");
        java.lang.String str80 = commandLine75.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str82 = commandLine75.getOptionValue(""arg"");
        java.lang.String[] strArray83 = commandLine75.getArgs();
        java.lang.String[] strArray85 = posixParser68.flatten(options74, strArray83, false);
        org.apache.commons.cli.CommandLine commandLine86 = posixParser0.parse(options53, strArray85);
        java.util.Iterator iterator87 = commandLine86.iterator();
        java.util.List list88 = commandLine86.getArgList();
        java.lang.String[] strArray90 = commandLine86.getOptionValues(""[ option: 4  :: null ]"");
        java.lang.String[] strArray91 = commandLine86.getArgs();
        java.lang.String[] strArray93 = commandLine86.getOptionValues('a');
        java.util.Iterator iterator94 = commandLine86.iterator();
        java.lang.Object obj96 = commandLine86.getOptionObject(""[ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ]"");
        java.lang.Object obj98 = commandLine86.getOptionObject(""arg"");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue(""'"" + boolean36 + ""' != '"" + false + ""'"", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(option61);
        org.junit.Assert.assertTrue(""'"" + boolean66 + ""' != '"" + true + ""'"", boolean66 == true);
        org.junit.Assert.assertNotNull(options67);
        org.junit.Assert.assertNotNull(option71);
        org.junit.Assert.assertNotNull(options74);
        org.junit.Assert.assertNull(strArray77);
        org.junit.Assert.assertEquals(""'"" + str80 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str80, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(commandLine86);
        org.junit.Assert.assertNotNull(iterator87);
        org.junit.Assert.assertNotNull(list88);
        org.junit.Assert.assertNull(strArray90);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNull(strArray93);
        org.junit.Assert.assertNotNull(iterator94);
        org.junit.Assert.assertNull(obj96);
        org.junit.Assert.assertNull(obj98);"
58,432,7636,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0433"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine8 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine8.getOptionValues(""hi!"");
        java.lang.String str13 = commandLine8.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str15 = commandLine8.getOptionValue(""arg"");
        java.lang.String[] strArray16 = commandLine8.getArgs();
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser0.parse(options1, strArray16, properties17);
        posixParser0.burstToken(""[ Options: [ short {4=[ option: 4  :: null ::  ]} ] [ long {} ]"", false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create('4');
        option24.setDescription("""");
        org.apache.commons.cli.Options options27 = options22.addOption(option24);
        java.util.Collection collection28 = options22.getOptionGroups();
        org.apache.commons.cli.Options options32 = options22.addOption("""", false, ""arg"");
        java.util.List list33 = options32.getRequiredOptions();
        org.apache.commons.cli.Option option35 = org.apache.commons.cli.OptionBuilder.create(""arg"");
        org.apache.commons.cli.Options options36 = options32.addOption(option35);
        java.util.Collection collection37 = options32.getOptionGroups();
        java.util.List list38 = options32.helpOptions();
        java.lang.String str39 = options32.toString();
        org.apache.commons.cli.PosixParser posixParser40 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options41 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option43 = org.apache.commons.cli.OptionBuilder.create('4');
        option43.setDescription("""");
        org.apache.commons.cli.Options options46 = options41.addOption(option43);
        org.apache.commons.cli.PosixParser posixParser47 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options48 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option50 = org.apache.commons.cli.OptionBuilder.create('4');
        option50.setDescription("""");
        org.apache.commons.cli.Options options53 = options48.addOption(option50);
        org.apache.commons.cli.CommandLine commandLine54 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray56 = commandLine54.getOptionValues(""hi!"");
        java.lang.String[] strArray57 = commandLine54.getArgs();
        java.util.Properties properties58 = null;
        org.apache.commons.cli.CommandLine commandLine59 = posixParser47.parse(options48, strArray57, properties58);
        org.apache.commons.cli.CommandLine commandLine61 = posixParser40.parse(options46, strArray57, false);
        java.lang.String[] strArray63 = posixParser0.flatten(options32, strArray57, false);
        org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option66 = org.apache.commons.cli.OptionBuilder.create('4');
        option66.setDescription("""");
        org.apache.commons.cli.Options options69 = options64.addOption(option66);
        java.util.Collection collection70 = options64.getOptions();
        org.apache.commons.cli.Options options71 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option73 = org.apache.commons.cli.OptionBuilder.create('4');
        char char74 = option73.getValueSeparator();
        org.apache.commons.cli.Option option76 = org.apache.commons.cli.OptionBuilder.create('4');
        option76.setDescription("""");
        option73.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup80 = options71.getOptionGroup(option73);
        option73.setOptionalArg(true);
        int int83 = option73.getId();
        org.apache.commons.cli.Options options84 = options64.addOption(option73);
        java.util.List list85 = options64.helpOptions();
        boolean boolean87 = options64.hasOption(""org.apache.commons.cli.ParseException: arg"");
        java.lang.String[] strArray88 = null;
        org.apache.commons.cli.CommandLine commandLine90 = posixParser0.parse(options64, strArray88, true);
        java.util.List list91 = options64.helpOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertEquals(""'"" + str13 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str13, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNotNull(options27);
        org.junit.Assert.assertNotNull(collection28);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNotNull(list33);
        org.junit.Assert.assertNotNull(option35);
        org.junit.Assert.assertNotNull(options36);
        org.junit.Assert.assertNotNull(collection37);
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertEquals(""'"" + str39 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ], arg=[ option: arg  :: null ]} ] [ long {} ]"" + ""'"", str39, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ], arg=[ option: arg  :: null ]} ] [ long {} ]"");
        org.junit.Assert.assertNotNull(option43);
        org.junit.Assert.assertNotNull(options46);
        org.junit.Assert.assertNotNull(option50);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertNull(strArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(commandLine59);
        org.junit.Assert.assertNotNull(commandLine61);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(option66);
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertNotNull(collection70);
        org.junit.Assert.assertNotNull(option73);
        org.junit.Assert.assertTrue(""'"" + char74 + ""' != '"" + '\000' + ""'"", char74 == '\000');
        org.junit.Assert.assertNotNull(option76);
        org.junit.Assert.assertNull(optionGroup80);
        org.junit.Assert.assertTrue(""'"" + int83 + ""' != '"" + 52 + ""'"", int83 == 52);
        org.junit.Assert.assertNotNull(options84);
        org.junit.Assert.assertNotNull(list85);
        org.junit.Assert.assertTrue(""'"" + boolean87 + ""' != '"" + false + ""'"", boolean87 == false);
        org.junit.Assert.assertNotNull(commandLine90);
        org.junit.Assert.assertNotNull(list91);"
59,302,7828,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0303"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken(""hi!"", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("""");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptionGroups();
        org.apache.commons.cli.Options options31 = options21.addOption("""", false, ""arg"");
        java.util.List list32 = options31.getRequiredOptions();
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create(""arg"");
        org.apache.commons.cli.Options options35 = options31.addOption(option34);
        boolean boolean37 = options31.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        java.util.Collection collection38 = options31.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine39 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine39.getOptionValues(""hi!"");
        java.lang.String str44 = commandLine39.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str46 = commandLine39.getOptionValue(""arg"");
        java.lang.String[] strArray47 = commandLine39.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine50 = posixParser0.parse(options31, strArray47, properties48, true);
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create('4');
        option53.setDescription("""");
        org.apache.commons.cli.Options options56 = options51.addOption(option53);
        java.util.Collection collection57 = options51.getOptionGroups();
        java.util.Collection collection58 = options51.getOptionGroups();
        java.util.Collection collection59 = options51.getOptionGroups();
        org.apache.commons.cli.PosixParser posixParser60 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options61 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option63 = org.apache.commons.cli.OptionBuilder.create('4');
        option63.setDescription("""");
        org.apache.commons.cli.Options options66 = options61.addOption(option63);
        org.apache.commons.cli.CommandLine commandLine67 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray69 = commandLine67.getOptionValues(""hi!"");
        java.lang.String str72 = commandLine67.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str74 = commandLine67.getOptionValue(""arg"");
        java.lang.String[] strArray75 = commandLine67.getArgs();
        java.lang.String[] strArray77 = posixParser60.flatten(options66, strArray75, false);
        java.util.Properties properties78 = null;
        org.apache.commons.cli.CommandLine commandLine79 = posixParser0.parse(options51, strArray77, properties78);
        org.apache.commons.cli.Option option81 = org.apache.commons.cli.OptionBuilder.create('4');
        option81.setDescription("""");
        boolean boolean84 = option81.hasValueSeparator();
        java.lang.String str85 = option81.getValue();
        java.lang.String str87 = option81.getValue((int) (byte) -1);
        java.lang.String str88 = option81.getLongOpt();
        boolean boolean89 = option81.hasArg();
        java.util.ListIterator listIterator90 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option81, listIterator90);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(options31);
        org.junit.Assert.assertNotNull(list32);
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertTrue(""'"" + boolean37 + ""' != '"" + false + ""'"", boolean37 == false);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertEquals(""'"" + str44 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str44, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNotNull(options56);
        org.junit.Assert.assertNotNull(collection57);
        org.junit.Assert.assertNotNull(collection58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(option63);
        org.junit.Assert.assertNotNull(options66);
        org.junit.Assert.assertNull(strArray69);
        org.junit.Assert.assertEquals(""'"" + str72 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str72, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(commandLine79);
        org.junit.Assert.assertNotNull(option81);
        org.junit.Assert.assertTrue(""'"" + boolean84 + ""' != '"" + false + ""'"", boolean84 == false);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue(""'"" + boolean89 + ""' != '"" + false + ""'"", boolean89 == false);"
60,439,7990,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0440"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("""");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("""");
        option26.setLongOpt(""hi!"");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues(""hi!"");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("""");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        org.apache.commons.cli.Options options50 = options40.addOption("""", false, ""arg"");
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup54 = options51.getOptionGroup(option53);
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        char char57 = option56.getValueSeparator();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        option59.setDescription("""");
        option56.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup63 = options51.getOptionGroup(option56);
        boolean boolean64 = option56.hasArgName();
        org.apache.commons.cli.Options options65 = options40.addOption(option56);
        org.apache.commons.cli.CommandLine commandLine66 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray68 = commandLine66.getOptionValues(""hi!"");
        java.lang.String str71 = commandLine66.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str73 = commandLine66.getOptionValue(""arg"");
        java.lang.String[] strArray74 = commandLine66.getArgs();
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options40, strArray74, properties75);
        org.apache.commons.cli.Options options77 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option79 = org.apache.commons.cli.OptionBuilder.create('4');
        char char80 = option79.getValueSeparator();
        org.apache.commons.cli.Option option82 = org.apache.commons.cli.OptionBuilder.create('4');
        option82.setDescription("""");
        option79.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup86 = options77.getOptionGroup(option79);
        java.lang.String[] strArray89 = new java.lang.String[] { ""4"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" };
        java.util.Properties properties90 = null;
        org.apache.commons.cli.CommandLine commandLine91 = posixParser0.parse(options77, strArray89, properties90);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options95 = options77.addOption(""org.apache.commons.cli.UnrecognizedOptionException: hi!"", false, ""[ Options: [ short {} ] [ long {} ]"");
            org.junit.Assert.fail(""Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '.'"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue(""'"" + boolean31 + ""' != '"" + true + ""'"", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNotNull(options50);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertTrue(""'"" + char57 + ""' != '"" + '\000' + ""'"", char57 == '\000');
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNull(optionGroup63);
        org.junit.Assert.assertTrue(""'"" + boolean64 + ""' != '"" + true + ""'"", boolean64 == true);
        org.junit.Assert.assertNotNull(options65);
        org.junit.Assert.assertNull(strArray68);
        org.junit.Assert.assertEquals(""'"" + str71 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str71, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(option79);
        org.junit.Assert.assertTrue(""'"" + char80 + ""' != '"" + '\000' + ""'"", char80 == '\000');
        org.junit.Assert.assertNotNull(option82);
        org.junit.Assert.assertNull(optionGroup86);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(commandLine91);"
61,442,7779,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0443"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        posixParser0.burstToken("""", false);
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        option27.setDescription("""");
        org.apache.commons.cli.Options options30 = options25.addOption(option27);
        java.util.Collection collection31 = options25.getOptionGroups();
        org.apache.commons.cli.Options options35 = options25.addOption("""", false, ""arg"");
        java.util.List list36 = options35.getRequiredOptions();
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create(""arg"");
        org.apache.commons.cli.Options options39 = options35.addOption(option38);
        boolean boolean41 = options35.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser42 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setDescription("""");
        org.apache.commons.cli.Options options48 = options43.addOption(option45);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        option52.setDescription("""");
        org.apache.commons.cli.Options options55 = options50.addOption(option52);
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray58 = commandLine56.getOptionValues(""hi!"");
        java.lang.String[] strArray59 = commandLine56.getArgs();
        java.util.Properties properties60 = null;
        org.apache.commons.cli.CommandLine commandLine61 = posixParser49.parse(options50, strArray59, properties60);
        org.apache.commons.cli.CommandLine commandLine63 = posixParser42.parse(options48, strArray59, false);
        org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option66 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup67 = options64.getOptionGroup(option66);
        org.apache.commons.cli.Option option69 = org.apache.commons.cli.OptionBuilder.create('4');
        char char70 = option69.getValueSeparator();
        org.apache.commons.cli.Option option72 = org.apache.commons.cli.OptionBuilder.create('4');
        option72.setDescription("""");
        option69.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup76 = options64.getOptionGroup(option69);
        boolean boolean78 = options64.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser79 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options80 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option82 = org.apache.commons.cli.OptionBuilder.create('4');
        option82.setDescription("""");
        org.apache.commons.cli.Options options85 = options80.addOption(option82);
        org.apache.commons.cli.CommandLine commandLine86 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray88 = commandLine86.getOptionValues(""hi!"");
        java.lang.String[] strArray89 = commandLine86.getArgs();
        java.util.Properties properties90 = null;
        org.apache.commons.cli.CommandLine commandLine91 = posixParser79.parse(options80, strArray89, properties90);
        java.util.Properties properties92 = null;
        org.apache.commons.cli.CommandLine commandLine94 = posixParser42.parse(options64, strArray89, properties92, true);
        java.util.Properties properties95 = null;
        org.apache.commons.cli.CommandLine commandLine96 = posixParser0.parse(options35, strArray89, properties95);
        java.util.List list97 = commandLine96.getArgList();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertNotNull(options30);
        org.junit.Assert.assertNotNull(collection31);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertNotNull(list36);
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertNotNull(options39);
        org.junit.Assert.assertTrue(""'"" + boolean41 + ""' != '"" + false + ""'"", boolean41 == false);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNull(strArray58);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(commandLine61);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(option66);
        org.junit.Assert.assertNull(optionGroup67);
        org.junit.Assert.assertNotNull(option69);
        org.junit.Assert.assertTrue(""'"" + char70 + ""' != '"" + '\000' + ""'"", char70 == '\000');
        org.junit.Assert.assertNotNull(option72);
        org.junit.Assert.assertNull(optionGroup76);
        org.junit.Assert.assertTrue(""'"" + boolean78 + ""' != '"" + false + ""'"", boolean78 == false);
        org.junit.Assert.assertNotNull(option82);
        org.junit.Assert.assertNotNull(options85);
        org.junit.Assert.assertNull(strArray88);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(commandLine91);
        org.junit.Assert.assertNotNull(commandLine94);
        org.junit.Assert.assertNotNull(commandLine96);
        org.junit.Assert.assertNotNull(list97);"
62,137,8019,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0138"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues(""hi!"");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        java.util.Collection collection53 = options22.getOptionGroups();
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        option56.setDescription("""");
        org.apache.commons.cli.Options options59 = options54.addOption(option56);
        java.util.Collection collection60 = options54.getOptionGroups();
        org.apache.commons.cli.Options options64 = options54.addOption("""", false, ""arg"");
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option67 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup68 = options65.getOptionGroup(option67);
        org.apache.commons.cli.Option option70 = org.apache.commons.cli.OptionBuilder.create('4');
        char char71 = option70.getValueSeparator();
        org.apache.commons.cli.Option option73 = org.apache.commons.cli.OptionBuilder.create('4');
        option73.setDescription("""");
        option70.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup77 = options65.getOptionGroup(option70);
        boolean boolean78 = option70.hasArgName();
        org.apache.commons.cli.Options options79 = options54.addOption(option70);
        org.apache.commons.cli.Options options80 = options22.addOption(option70);
        org.apache.commons.cli.Option option82 = org.apache.commons.cli.OptionBuilder.create('4');
        char char83 = option82.getValueSeparator();
        boolean boolean84 = option82.hasArg();
        boolean boolean85 = option82.hasOptionalArg();
        org.apache.commons.cli.OptionGroup optionGroup86 = options22.getOptionGroup(option82);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options91 = options22.addOption(""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"", ""[ option:    :: null :: arg ]"", true, ""org.apache.commons.cli.MissingOptionException: [ option: 4  :: null ]"");
            org.junit.Assert.fail(""Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue(""'"" + boolean36 + ""' != '"" + false + ""'"", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(collection53);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNotNull(collection60);
        org.junit.Assert.assertNotNull(options64);
        org.junit.Assert.assertNotNull(option67);
        org.junit.Assert.assertNull(optionGroup68);
        org.junit.Assert.assertNotNull(option70);
        org.junit.Assert.assertTrue(""'"" + char71 + ""' != '"" + '\000' + ""'"", char71 == '\000');
        org.junit.Assert.assertNotNull(option73);
        org.junit.Assert.assertNull(optionGroup77);
        org.junit.Assert.assertTrue(""'"" + boolean78 + ""' != '"" + true + ""'"", boolean78 == true);
        org.junit.Assert.assertNotNull(options79);
        org.junit.Assert.assertNotNull(options80);
        org.junit.Assert.assertNotNull(option82);
        org.junit.Assert.assertTrue(""'"" + char83 + ""' != '"" + '\000' + ""'"", char83 == '\000');
        org.junit.Assert.assertTrue(""'"" + boolean84 + ""' != '"" + false + ""'"", boolean84 == false);
        org.junit.Assert.assertTrue(""'"" + boolean85 + ""' != '"" + false + ""'"", boolean85 == false);
        org.junit.Assert.assertNull(optionGroup86);"
63,176,7261,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0177"");
        org.apache.commons.cli.Option option3 = new org.apache.commons.cli.Option("""", true, """");
        boolean boolean4 = option3.hasOptionalArg();
        java.lang.String str6 = option3.getValue("""");
        java.lang.String str7 = option3.getValue();
        option3.setValueSeparator('a');
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create('4');
        option13.setDescription("""");
        org.apache.commons.cli.Options options16 = options11.addOption(option13);
        org.apache.commons.cli.PosixParser posixParser17 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("""");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        org.apache.commons.cli.CommandLine commandLine24 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray26 = commandLine24.getOptionValues(""hi!"");
        java.lang.String[] strArray27 = commandLine24.getArgs();
        java.util.Properties properties28 = null;
        org.apache.commons.cli.CommandLine commandLine29 = posixParser17.parse(options18, strArray27, properties28);
        org.apache.commons.cli.CommandLine commandLine31 = posixParser10.parse(options16, strArray27, false);
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup35 = options32.getOptionGroup(option34);
        org.apache.commons.cli.Option option37 = org.apache.commons.cli.OptionBuilder.create('4');
        char char38 = option37.getValueSeparator();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        option37.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup44 = options32.getOptionGroup(option37);
        boolean boolean46 = options32.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser47 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options48 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option50 = org.apache.commons.cli.OptionBuilder.create('4');
        option50.setDescription("""");
        org.apache.commons.cli.Options options53 = options48.addOption(option50);
        org.apache.commons.cli.CommandLine commandLine54 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray56 = commandLine54.getOptionValues(""hi!"");
        java.lang.String[] strArray57 = commandLine54.getArgs();
        java.util.Properties properties58 = null;
        org.apache.commons.cli.CommandLine commandLine59 = posixParser47.parse(options48, strArray57, properties58);
        java.util.Properties properties60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser10.parse(options32, strArray57, properties60, true);
        org.apache.commons.cli.Options options63 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option65 = org.apache.commons.cli.OptionBuilder.create('4');
        option65.setDescription("""");
        org.apache.commons.cli.Options options68 = options63.addOption(option65);
        java.util.Collection collection69 = options63.getOptions();
        java.lang.String[] strArray70 = null;
        org.apache.commons.cli.CommandLine commandLine72 = posixParser10.parse(options63, strArray70, true);
        org.apache.commons.cli.PosixParser posixParser73 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options74 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option76 = org.apache.commons.cli.OptionBuilder.create('4');
        option76.setDescription("""");
        org.apache.commons.cli.Options options79 = options74.addOption(option76);
        org.apache.commons.cli.CommandLine commandLine80 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray82 = commandLine80.getOptionValues(""hi!"");
        java.lang.String[] strArray83 = commandLine80.getArgs();
        java.util.Properties properties84 = null;
        org.apache.commons.cli.CommandLine commandLine85 = posixParser73.parse(options74, strArray83, properties84);
        java.lang.String[] strArray88 = new java.lang.String[] { ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"", ""hi!"" };
        java.util.Properties properties89 = null;
        org.apache.commons.cli.CommandLine commandLine91 = posixParser10.parse(options74, strArray88, properties89, true);
        option3.setType((java.lang.Object) strArray88);
        option3.setRequired(false);
        org.junit.Assert.assertTrue(""'"" + boolean4 + ""' != '"" + false + ""'"", boolean4 == false);
        org.junit.Assert.assertEquals(""'"" + str6 + ""' != '"" + """" + ""'"", str6, """");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertNotNull(options16);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertNull(optionGroup35);
        org.junit.Assert.assertNotNull(option37);
        org.junit.Assert.assertTrue(""'"" + char38 + ""' != '"" + '\000' + ""'"", char38 == '\000');
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNull(optionGroup44);
        org.junit.Assert.assertTrue(""'"" + boolean46 + ""' != '"" + false + ""'"", boolean46 == false);
        org.junit.Assert.assertNotNull(option50);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertNull(strArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(commandLine59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(option65);
        org.junit.Assert.assertNotNull(options68);
        org.junit.Assert.assertNotNull(collection69);
        org.junit.Assert.assertNotNull(commandLine72);
        org.junit.Assert.assertNotNull(option76);
        org.junit.Assert.assertNotNull(options79);
        org.junit.Assert.assertNull(strArray82);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(commandLine85);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNotNull(commandLine91);"
64,273,7966,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0274"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("""");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("""");
        option26.setLongOpt(""hi!"");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues(""hi!"");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("""");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        org.apache.commons.cli.Options options50 = options40.addOption("""", false, ""arg"");
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup54 = options51.getOptionGroup(option53);
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        char char57 = option56.getValueSeparator();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        option59.setDescription("""");
        option56.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup63 = options51.getOptionGroup(option56);
        boolean boolean64 = option56.hasArgName();
        org.apache.commons.cli.Options options65 = options40.addOption(option56);
        org.apache.commons.cli.CommandLine commandLine66 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray68 = commandLine66.getOptionValues(""hi!"");
        java.lang.String str71 = commandLine66.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str73 = commandLine66.getOptionValue(""arg"");
        java.lang.String[] strArray74 = commandLine66.getArgs();
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options40, strArray74, properties75);
        org.apache.commons.cli.Options options77 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option79 = org.apache.commons.cli.OptionBuilder.create('4');
        char char80 = option79.getValueSeparator();
        org.apache.commons.cli.Option option82 = org.apache.commons.cli.OptionBuilder.create('4');
        option82.setDescription("""");
        option79.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup86 = options77.getOptionGroup(option79);
        java.lang.String[] strArray89 = new java.lang.String[] { ""4"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" };
        java.util.Properties properties90 = null;
        org.apache.commons.cli.CommandLine commandLine91 = posixParser0.parse(options77, strArray89, properties90);
        java.lang.String str93 = commandLine91.getOptionValue('\000');
        java.lang.Object obj95 = commandLine91.getOptionObject('=');
        boolean boolean97 = commandLine91.hasOption(' ');
        java.lang.String[] strArray98 = commandLine91.getArgs();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue(""'"" + boolean31 + ""' != '"" + true + ""'"", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNotNull(options50);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertTrue(""'"" + char57 + ""' != '"" + '\000' + ""'"", char57 == '\000');
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNull(optionGroup63);
        org.junit.Assert.assertTrue(""'"" + boolean64 + ""' != '"" + true + ""'"", boolean64 == true);
        org.junit.Assert.assertNotNull(options65);
        org.junit.Assert.assertNull(strArray68);
        org.junit.Assert.assertEquals(""'"" + str71 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str71, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(option79);
        org.junit.Assert.assertTrue(""'"" + char80 + ""' != '"" + '\000' + ""'"", char80 == '\000');
        org.junit.Assert.assertNotNull(option82);
        org.junit.Assert.assertNull(optionGroup86);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(commandLine91);
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertNull(obj95);
        org.junit.Assert.assertTrue(""'"" + boolean97 + ""' != '"" + false + ""'"", boolean97 == false);
        org.junit.Assert.assertNotNull(strArray98);"
65,431,7870,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0432"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option39 = org.apache.commons.cli.OptionBuilder.create('4');
        option39.setDescription("""");
        org.apache.commons.cli.Options options42 = options37.addOption(option39);
        option39.setArgs((int) '\000');
        org.apache.commons.cli.Options options45 = options22.addOption(option39);
        org.apache.commons.cli.PosixParser posixParser46 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option49 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup50 = options47.getOptionGroup(option49);
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        char char53 = option52.getValueSeparator();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("""");
        option52.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup59 = options47.getOptionGroup(option52);
        boolean boolean61 = options47.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser62 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options63 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option65 = org.apache.commons.cli.OptionBuilder.create('4');
        option65.setDescription("""");
        org.apache.commons.cli.Options options68 = options63.addOption(option65);
        org.apache.commons.cli.CommandLine commandLine69 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray71 = commandLine69.getOptionValues(""hi!"");
        java.lang.String str74 = commandLine69.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str76 = commandLine69.getOptionValue(""arg"");
        java.lang.String[] strArray77 = commandLine69.getArgs();
        java.lang.String[] strArray79 = posixParser62.flatten(options68, strArray77, false);
        java.util.Properties properties80 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser46.parse(options47, strArray79, properties80);
        java.util.List list82 = commandLine81.getArgList();
        java.lang.String[] strArray83 = commandLine81.getArgs();
        java.lang.String[] strArray84 = commandLine81.getArgs();
        java.util.Properties properties85 = null;
        org.apache.commons.cli.CommandLine commandLine86 = posixParser0.parse(options22, strArray84, properties85);
        java.lang.String[] strArray88 = commandLine86.getOptionValues(""org.apache.commons.cli.MissingOptionException: [ option: 4  :: null ]"");
        java.lang.Object obj90 = commandLine86.getOptionObject(""[ option:   [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]  :: null ]"");
        java.lang.String[] strArray92 = commandLine86.getOptionValues(""[ option: 4  ::  :: [] ]"");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue(""'"" + boolean36 + ""' != '"" + false + ""'"", boolean36 == false);
        org.junit.Assert.assertNotNull(option39);
        org.junit.Assert.assertNotNull(options42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(option49);
        org.junit.Assert.assertNull(optionGroup50);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertTrue(""'"" + char53 + ""' != '"" + '\000' + ""'"", char53 == '\000');
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNull(optionGroup59);
        org.junit.Assert.assertTrue(""'"" + boolean61 + ""' != '"" + false + ""'"", boolean61 == false);
        org.junit.Assert.assertNotNull(option65);
        org.junit.Assert.assertNotNull(options68);
        org.junit.Assert.assertNull(strArray71);
        org.junit.Assert.assertEquals(""'"" + str74 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str74, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(list82);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(commandLine86);
        org.junit.Assert.assertNull(strArray88);
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertNull(strArray92);"
66,60,7983,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0061"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues(""hi!"");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        java.util.Collection collection53 = options22.getOptionGroups();
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        option56.setDescription("""");
        org.apache.commons.cli.Options options59 = options54.addOption(option56);
        java.util.Collection collection60 = options54.getOptionGroups();
        org.apache.commons.cli.Options options64 = options54.addOption("""", false, ""arg"");
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option67 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup68 = options65.getOptionGroup(option67);
        org.apache.commons.cli.Option option70 = org.apache.commons.cli.OptionBuilder.create('4');
        char char71 = option70.getValueSeparator();
        org.apache.commons.cli.Option option73 = org.apache.commons.cli.OptionBuilder.create('4');
        option73.setDescription("""");
        option70.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup77 = options65.getOptionGroup(option70);
        boolean boolean78 = option70.hasArgName();
        org.apache.commons.cli.Options options79 = options54.addOption(option70);
        org.apache.commons.cli.Options options80 = options22.addOption(option70);
        org.apache.commons.cli.Option option82 = org.apache.commons.cli.OptionBuilder.create('4');
        char char83 = option82.getValueSeparator();
        boolean boolean84 = option82.hasArg();
        boolean boolean85 = option82.hasOptionalArg();
        org.apache.commons.cli.OptionGroup optionGroup86 = options22.getOptionGroup(option82);
        org.apache.commons.cli.Option option88 = options22.getOption(""arg"");
        org.apache.commons.cli.Option option89 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.OptionGroup optionGroup90 = options22.getOptionGroup(option89);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue(""'"" + boolean36 + ""' != '"" + false + ""'"", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(collection53);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNotNull(collection60);
        org.junit.Assert.assertNotNull(options64);
        org.junit.Assert.assertNotNull(option67);
        org.junit.Assert.assertNull(optionGroup68);
        org.junit.Assert.assertNotNull(option70);
        org.junit.Assert.assertTrue(""'"" + char71 + ""' != '"" + '\000' + ""'"", char71 == '\000');
        org.junit.Assert.assertNotNull(option73);
        org.junit.Assert.assertNull(optionGroup77);
        org.junit.Assert.assertTrue(""'"" + boolean78 + ""' != '"" + true + ""'"", boolean78 == true);
        org.junit.Assert.assertNotNull(options79);
        org.junit.Assert.assertNotNull(options80);
        org.junit.Assert.assertNotNull(option82);
        org.junit.Assert.assertTrue(""'"" + char83 + ""' != '"" + '\000' + ""'"", char83 == '\000');
        org.junit.Assert.assertTrue(""'"" + boolean84 + ""' != '"" + false + ""'"", boolean84 == false);
        org.junit.Assert.assertTrue(""'"" + boolean85 + ""' != '"" + false + ""'"", boolean85 == false);
        org.junit.Assert.assertNull(optionGroup86);
        org.junit.Assert.assertNull(option88);"
67,92,7689,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0093"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken(""hi!"", true);
        org.apache.commons.cli.PosixParser posixParser21 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create('4');
        option24.setDescription("""");
        org.apache.commons.cli.Options options27 = options22.addOption(option24);
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option31 = org.apache.commons.cli.OptionBuilder.create('4');
        option31.setDescription("""");
        org.apache.commons.cli.Options options34 = options29.addOption(option31);
        org.apache.commons.cli.CommandLine commandLine35 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray37 = commandLine35.getOptionValues(""hi!"");
        java.lang.String[] strArray38 = commandLine35.getArgs();
        java.util.Properties properties39 = null;
        org.apache.commons.cli.CommandLine commandLine40 = posixParser28.parse(options29, strArray38, properties39);
        org.apache.commons.cli.CommandLine commandLine42 = posixParser21.parse(options27, strArray38, false);
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup46 = options43.getOptionGroup(option45);
        org.apache.commons.cli.Option option48 = org.apache.commons.cli.OptionBuilder.create('4');
        char char49 = option48.getValueSeparator();
        org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create('4');
        option51.setDescription("""");
        option48.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup55 = options43.getOptionGroup(option48);
        boolean boolean57 = options43.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser58 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options59 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option61 = org.apache.commons.cli.OptionBuilder.create('4');
        option61.setDescription("""");
        org.apache.commons.cli.Options options64 = options59.addOption(option61);
        org.apache.commons.cli.CommandLine commandLine65 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray67 = commandLine65.getOptionValues(""hi!"");
        java.lang.String[] strArray68 = commandLine65.getArgs();
        java.util.Properties properties69 = null;
        org.apache.commons.cli.CommandLine commandLine70 = posixParser58.parse(options59, strArray68, properties69);
        java.util.Properties properties71 = null;
        org.apache.commons.cli.CommandLine commandLine73 = posixParser21.parse(options43, strArray68, properties71, true);
        java.lang.String str74 = options43.toString();
        org.apache.commons.cli.PosixParser posixParser75 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options76 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option78 = org.apache.commons.cli.OptionBuilder.create('4');
        option78.setDescription("""");
        org.apache.commons.cli.Options options81 = options76.addOption(option78);
        java.util.Collection collection82 = options76.getOptions();
        boolean boolean84 = options76.hasOption(""arg"");
        java.lang.String[] strArray87 = new java.lang.String[] { ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"", ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"" };
        org.apache.commons.cli.CommandLine commandLine88 = posixParser75.parse(options76, strArray87);
        org.apache.commons.cli.CommandLine commandLine90 = posixParser0.parse(options43, strArray87, false);
        java.lang.Class<?> wildcardClass91 = commandLine90.getClass();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNotNull(options27);
        org.junit.Assert.assertNotNull(option31);
        org.junit.Assert.assertNotNull(options34);
        org.junit.Assert.assertNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(commandLine40);
        org.junit.Assert.assertNotNull(commandLine42);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNull(optionGroup46);
        org.junit.Assert.assertNotNull(option48);
        org.junit.Assert.assertTrue(""'"" + char49 + ""' != '"" + '\000' + ""'"", char49 == '\000');
        org.junit.Assert.assertNotNull(option51);
        org.junit.Assert.assertNull(optionGroup55);
        org.junit.Assert.assertTrue(""'"" + boolean57 + ""' != '"" + false + ""'"", boolean57 == false);
        org.junit.Assert.assertNotNull(option61);
        org.junit.Assert.assertNotNull(options64);
        org.junit.Assert.assertNull(strArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(commandLine70);
        org.junit.Assert.assertNotNull(commandLine73);
        org.junit.Assert.assertEquals(""'"" + str74 + ""' != '"" + ""[ Options: [ short {} ] [ long {} ]"" + ""'"", str74, ""[ Options: [ short {} ] [ long {} ]"");
        org.junit.Assert.assertNotNull(option78);
        org.junit.Assert.assertNotNull(options81);
        org.junit.Assert.assertNotNull(collection82);
        org.junit.Assert.assertTrue(""'"" + boolean84 + ""' != '"" + false + ""'"", boolean84 == false);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(commandLine88);
        org.junit.Assert.assertNotNull(commandLine90);
        org.junit.Assert.assertNotNull(wildcardClass91);"
68,352,7987,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0353"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues(""hi!"");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.PosixParser posixParser53 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        option56.setDescription("""");
        org.apache.commons.cli.Options options59 = options54.addOption(option56);
        org.apache.commons.cli.CommandLine commandLine60 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray62 = commandLine60.getOptionValues(""hi!"");
        java.lang.String str65 = commandLine60.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str67 = commandLine60.getOptionValue(""arg"");
        java.lang.String[] strArray68 = commandLine60.getArgs();
        java.lang.String[] strArray70 = posixParser53.flatten(options59, strArray68, false);
        org.apache.commons.cli.PosixParser posixParser71 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options72 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option74 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup75 = options72.getOptionGroup(option74);
        org.apache.commons.cli.CommandLine commandLine76 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray78 = commandLine76.getOptionValues(""hi!"");
        java.lang.String str81 = commandLine76.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str83 = commandLine76.getOptionValue(""arg"");
        java.lang.String[] strArray84 = commandLine76.getArgs();
        java.lang.String[] strArray86 = posixParser71.flatten(options72, strArray84, true);
        org.apache.commons.cli.CommandLine commandLine88 = posixParser0.parse(options59, strArray84, false);
        java.lang.String str90 = commandLine88.getOptionValue("""");
        commandLine88.addArg(""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.util.Iterator iterator93 = commandLine88.iterator();
        java.lang.Object obj95 = commandLine88.getOptionObject(' ');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue(""'"" + boolean36 + ""' != '"" + false + ""'"", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNull(strArray62);
        org.junit.Assert.assertEquals(""'"" + str65 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str65, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(option74);
        org.junit.Assert.assertNull(optionGroup75);
        org.junit.Assert.assertNull(strArray78);
        org.junit.Assert.assertEquals(""'"" + str81 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str81, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(commandLine88);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertNotNull(iterator93);
        org.junit.Assert.assertNull(obj95);"
69,133,7751,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0134"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken(""hi!"", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("""");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptions();
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        char char31 = option30.getValueSeparator();
        org.apache.commons.cli.Option option33 = org.apache.commons.cli.OptionBuilder.create('4');
        option33.setDescription("""");
        option30.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup37 = options28.getOptionGroup(option30);
        option30.setOptionalArg(true);
        int int40 = option30.getId();
        org.apache.commons.cli.Options options41 = options21.addOption(option30);
        boolean boolean43 = options41.hasOption("""");
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setArgs((int) (short) 100);
        option45.setArgName(""[ option: 4  :: null ]"");
        java.lang.String str50 = option45.getLongOpt();
        boolean boolean51 = option45.hasLongOpt();
        org.apache.commons.cli.Options options52 = options41.addOption(option45);
        java.util.Collection collection53 = options41.getOptions();
        org.apache.commons.cli.PosixParser posixParser54 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = org.apache.commons.cli.OptionBuilder.create('4');
        option57.setDescription("""");
        org.apache.commons.cli.Options options60 = options55.addOption(option57);
        java.util.Collection collection61 = options55.getOptions();
        boolean boolean63 = options55.hasOption(""arg"");
        java.lang.String[] strArray66 = new java.lang.String[] { ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"", ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"" };
        org.apache.commons.cli.CommandLine commandLine67 = posixParser54.parse(options55, strArray66);
        java.lang.String[] strArray69 = posixParser0.flatten(options41, strArray66, false);
        org.apache.commons.cli.Options options70 = null;
        org.apache.commons.cli.CommandLine commandLine71 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray73 = commandLine71.getOptionValues(""hi!"");
        java.lang.Object obj75 = commandLine71.getOptionObject('a');
        org.apache.commons.cli.Option option77 = org.apache.commons.cli.OptionBuilder.create('4');
        option77.setDescription("""");
        org.apache.commons.cli.Options options80 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option82 = org.apache.commons.cli.OptionBuilder.create('4');
        option82.setDescription("""");
        org.apache.commons.cli.Options options85 = options80.addOption(option82);
        boolean boolean86 = option82.hasOptionalArg();
        option77.setType((java.lang.Object) boolean86);
        java.lang.String str88 = option77.getArgName();
        java.lang.Object obj89 = option77.getType();
        java.lang.String[] strArray90 = option77.getValues();
        commandLine71.addOption(option77);
        java.lang.String[] strArray92 = commandLine71.getArgs();
        java.util.Properties properties93 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.CommandLine commandLine95 = posixParser0.parse(options70, strArray92, properties93, true);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertTrue(""'"" + char31 + ""' != '"" + '\000' + ""'"", char31 == '\000');
        org.junit.Assert.assertNotNull(option33);
        org.junit.Assert.assertNull(optionGroup37);
        org.junit.Assert.assertTrue(""'"" + int40 + ""' != '"" + 52 + ""'"", int40 == 52);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertTrue(""'"" + boolean43 + ""' != '"" + false + ""'"", boolean43 == false);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue(""'"" + boolean51 + ""' != '"" + false + ""'"", boolean51 == false);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(collection53);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(collection61);
        org.junit.Assert.assertTrue(""'"" + boolean63 + ""' != '"" + false + ""'"", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNull(strArray73);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertNotNull(option77);
        org.junit.Assert.assertNotNull(option82);
        org.junit.Assert.assertNotNull(options85);
        org.junit.Assert.assertTrue(""'"" + boolean86 + ""' != '"" + false + ""'"", boolean86 == false);
        org.junit.Assert.assertEquals(""'"" + str88 + ""' != '"" + ""arg"" + ""'"", str88, ""arg"");
        org.junit.Assert.assertEquals(""'"" + obj89 + ""' != '"" + false + ""'"", obj89, false);
        org.junit.Assert.assertNull(strArray90);
        org.junit.Assert.assertNotNull(strArray92);"
70,475,7458,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0476"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.CommandLine commandLine5 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray7 = commandLine5.getOptionValues(""hi!"");
        java.lang.String str10 = commandLine5.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str12 = commandLine5.getOptionValue(""arg"");
        java.lang.String[] strArray13 = commandLine5.getArgs();
        java.lang.String[] strArray15 = posixParser0.flatten(options1, strArray13, true);
        org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup19 = options16.getOptionGroup(option18);
        org.apache.commons.cli.Option option21 = org.apache.commons.cli.OptionBuilder.create('4');
        char char22 = option21.getValueSeparator();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create('4');
        option24.setDescription("""");
        option21.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup28 = options16.getOptionGroup(option21);
        java.util.List list29 = options16.getRequiredOptions();
        boolean boolean31 = options16.hasOption(""[ option: 4  :: hi! ]"");
        org.apache.commons.cli.PosixParser posixParser32 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options33 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option35 = org.apache.commons.cli.OptionBuilder.create('4');
        option35.setDescription("""");
        org.apache.commons.cli.Options options38 = options33.addOption(option35);
        org.apache.commons.cli.CommandLine commandLine39 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine39.getOptionValues(""hi!"");
        java.lang.String str44 = commandLine39.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str46 = commandLine39.getOptionValue(""arg"");
        java.lang.String[] strArray47 = commandLine39.getArgs();
        java.lang.String[] strArray49 = posixParser32.flatten(options38, strArray47, false);
        posixParser32.burstToken(""hi!"", true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("""");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptionGroups();
        org.apache.commons.cli.Options options63 = options53.addOption("""", false, ""arg"");
        java.util.List list64 = options63.getRequiredOptions();
        org.apache.commons.cli.Option option66 = org.apache.commons.cli.OptionBuilder.create(""arg"");
        org.apache.commons.cli.Options options67 = options63.addOption(option66);
        boolean boolean69 = options63.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        java.util.Collection collection70 = options63.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine71 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray73 = commandLine71.getOptionValues(""hi!"");
        java.lang.String str76 = commandLine71.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str78 = commandLine71.getOptionValue(""arg"");
        java.lang.String[] strArray79 = commandLine71.getArgs();
        java.util.Properties properties80 = null;
        org.apache.commons.cli.CommandLine commandLine82 = posixParser32.parse(options63, strArray79, properties80, true);
        org.apache.commons.cli.Option[] optionArray83 = commandLine82.getOptions();
        java.lang.String[] strArray84 = commandLine82.getArgs();
        org.apache.commons.cli.CommandLine commandLine86 = posixParser0.parse(options16, strArray84, false);
        java.lang.String str88 = commandLine86.getOptionValue('=');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNull(strArray7);
        org.junit.Assert.assertEquals(""'"" + str10 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str10, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(option18);
        org.junit.Assert.assertNull(optionGroup19);
        org.junit.Assert.assertNotNull(option21);
        org.junit.Assert.assertTrue(""'"" + char22 + ""' != '"" + '\000' + ""'"", char22 == '\000');
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup28);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertTrue(""'"" + boolean31 + ""' != '"" + false + ""'"", boolean31 == false);
        org.junit.Assert.assertNotNull(option35);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertEquals(""'"" + str44 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str44, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(options63);
        org.junit.Assert.assertNotNull(list64);
        org.junit.Assert.assertNotNull(option66);
        org.junit.Assert.assertNotNull(options67);
        org.junit.Assert.assertTrue(""'"" + boolean69 + ""' != '"" + false + ""'"", boolean69 == false);
        org.junit.Assert.assertNotNull(collection70);
        org.junit.Assert.assertNull(strArray73);
        org.junit.Assert.assertEquals(""'"" + str76 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str76, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(optionArray83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(commandLine86);
        org.junit.Assert.assertNull(str88);"
71,402,7680,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0403"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option6.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create('4');
        option38.setDescription("""");
        org.apache.commons.cli.Options options41 = options36.addOption(option38);
        org.apache.commons.cli.Options options42 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        char char45 = option44.getValueSeparator();
        org.apache.commons.cli.Option option47 = org.apache.commons.cli.OptionBuilder.create('4');
        option47.setDescription("""");
        option44.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup51 = options42.getOptionGroup(option44);
        option44.setOptionalArg(true);
        int int54 = option44.getId();
        org.apache.commons.cli.OptionGroup optionGroup55 = options41.getOptionGroup(option44);
        org.apache.commons.cli.Options options56 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option58 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup59 = options56.getOptionGroup(option58);
        boolean boolean60 = option58.hasLongOpt();
        boolean boolean61 = option58.isRequired();
        org.apache.commons.cli.Options options62 = options41.addOption(option58);
        org.apache.commons.cli.PosixParser posixParser63 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option66 = org.apache.commons.cli.OptionBuilder.create('4');
        option66.setDescription("""");
        org.apache.commons.cli.Options options69 = options64.addOption(option66);
        org.apache.commons.cli.CommandLine commandLine70 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray72 = commandLine70.getOptionValues(""hi!"");
        java.lang.String str75 = commandLine70.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str77 = commandLine70.getOptionValue(""arg"");
        java.lang.String[] strArray78 = commandLine70.getArgs();
        java.lang.String[] strArray80 = posixParser63.flatten(options69, strArray78, false);
        org.apache.commons.cli.CommandLine commandLine82 = posixParser0.parse(options62, strArray80, false);
        java.lang.Object obj84 = commandLine82.getOptionObject(' ');
        java.lang.Object obj86 = commandLine82.getOptionObject(""[ option: 4  :: null ::  ]"");
        java.lang.String[] strArray88 = commandLine82.getOptionValues('4');
        boolean boolean90 = commandLine82.hasOption(""[ option: 4  :: null ::  ]"");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue(""'"" + char7 + ""' != '"" + '\000' + ""'"", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertTrue(""'"" + char45 + ""' != '"" + '\000' + ""'"", char45 == '\000');
        org.junit.Assert.assertNotNull(option47);
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertTrue(""'"" + int54 + ""' != '"" + 52 + ""'"", int54 == 52);
        org.junit.Assert.assertNull(optionGroup55);
        org.junit.Assert.assertNotNull(option58);
        org.junit.Assert.assertNull(optionGroup59);
        org.junit.Assert.assertTrue(""'"" + boolean60 + ""' != '"" + false + ""'"", boolean60 == false);
        org.junit.Assert.assertTrue(""'"" + boolean61 + ""' != '"" + false + ""'"", boolean61 == false);
        org.junit.Assert.assertNotNull(options62);
        org.junit.Assert.assertNotNull(option66);
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertNull(strArray72);
        org.junit.Assert.assertEquals(""'"" + str75 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str75, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNull(obj84);
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertNull(strArray88);
        org.junit.Assert.assertTrue(""'"" + boolean90 + ""' != '"" + false + ""'"", boolean90 == false);"
72,390,7940,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0391"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues(""hi!"");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.PosixParser posixParser53 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        option56.setDescription("""");
        org.apache.commons.cli.Options options59 = options54.addOption(option56);
        org.apache.commons.cli.CommandLine commandLine60 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray62 = commandLine60.getOptionValues(""hi!"");
        java.lang.String str65 = commandLine60.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str67 = commandLine60.getOptionValue(""arg"");
        java.lang.String[] strArray68 = commandLine60.getArgs();
        java.lang.String[] strArray70 = posixParser53.flatten(options59, strArray68, false);
        org.apache.commons.cli.PosixParser posixParser71 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options72 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option74 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup75 = options72.getOptionGroup(option74);
        org.apache.commons.cli.CommandLine commandLine76 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray78 = commandLine76.getOptionValues(""hi!"");
        java.lang.String str81 = commandLine76.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str83 = commandLine76.getOptionValue(""arg"");
        java.lang.String[] strArray84 = commandLine76.getArgs();
        java.lang.String[] strArray86 = posixParser71.flatten(options72, strArray84, true);
        org.apache.commons.cli.CommandLine commandLine88 = posixParser0.parse(options59, strArray84, false);
        java.lang.String[] strArray89 = commandLine88.getArgs();
        java.lang.String str91 = commandLine88.getOptionValue(""org.apache.commons.cli.MissingArgumentException: [ option:    :: null ]"");
        java.util.List list92 = commandLine88.getArgList();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue(""'"" + boolean36 + ""' != '"" + false + ""'"", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNull(strArray62);
        org.junit.Assert.assertEquals(""'"" + str65 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str65, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(option74);
        org.junit.Assert.assertNull(optionGroup75);
        org.junit.Assert.assertNull(strArray78);
        org.junit.Assert.assertEquals(""'"" + str81 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str81, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(commandLine88);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNull(str91);
        org.junit.Assert.assertNotNull(list92);"
73,153,7665,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0154"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken(""hi!"", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("""");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptionGroups();
        org.apache.commons.cli.Option option29 = org.apache.commons.cli.OptionBuilder.create('4');
        option29.setDescription("""");
        option29.setLongOpt(""hi!"");
        boolean boolean34 = option29.hasArgName();
        org.apache.commons.cli.Options options35 = options21.addOption(option29);
        java.util.Collection collection36 = options35.getOptionGroups();
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.PosixParser posixParser44 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options45 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option47 = org.apache.commons.cli.OptionBuilder.create('4');
        option47.setDescription("""");
        org.apache.commons.cli.Options options50 = options45.addOption(option47);
        org.apache.commons.cli.CommandLine commandLine51 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray53 = commandLine51.getOptionValues(""hi!"");
        java.lang.String[] strArray54 = commandLine51.getArgs();
        java.util.Properties properties55 = null;
        org.apache.commons.cli.CommandLine commandLine56 = posixParser44.parse(options45, strArray54, properties55);
        org.apache.commons.cli.CommandLine commandLine58 = posixParser37.parse(options43, strArray54, false);
        org.apache.commons.cli.Options options59 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option61 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup62 = options59.getOptionGroup(option61);
        org.apache.commons.cli.Option option64 = org.apache.commons.cli.OptionBuilder.create('4');
        char char65 = option64.getValueSeparator();
        org.apache.commons.cli.Option option67 = org.apache.commons.cli.OptionBuilder.create('4');
        option67.setDescription("""");
        option64.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup71 = options59.getOptionGroup(option64);
        boolean boolean73 = options59.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser74 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options75 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option77 = org.apache.commons.cli.OptionBuilder.create('4');
        option77.setDescription("""");
        org.apache.commons.cli.Options options80 = options75.addOption(option77);
        org.apache.commons.cli.CommandLine commandLine81 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray83 = commandLine81.getOptionValues(""hi!"");
        java.lang.String[] strArray84 = commandLine81.getArgs();
        java.util.Properties properties85 = null;
        org.apache.commons.cli.CommandLine commandLine86 = posixParser74.parse(options75, strArray84, properties85);
        java.util.Properties properties87 = null;
        org.apache.commons.cli.CommandLine commandLine89 = posixParser37.parse(options59, strArray84, properties87, true);
        java.util.Properties properties90 = null;
        org.apache.commons.cli.CommandLine commandLine92 = posixParser0.parse(options35, strArray84, properties90, true);
        org.apache.commons.cli.Option option94 = org.apache.commons.cli.OptionBuilder.create('4');
        option94.setArgs((int) (short) 100);
        org.apache.commons.cli.OptionGroup optionGroup97 = options35.getOptionGroup(option94);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(option29);
        org.junit.Assert.assertTrue(""'"" + boolean34 + ""' != '"" + true + ""'"", boolean34 == true);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertNotNull(collection36);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNotNull(option47);
        org.junit.Assert.assertNotNull(options50);
        org.junit.Assert.assertNull(strArray53);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(commandLine56);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertNotNull(option61);
        org.junit.Assert.assertNull(optionGroup62);
        org.junit.Assert.assertNotNull(option64);
        org.junit.Assert.assertTrue(""'"" + char65 + ""' != '"" + '\000' + ""'"", char65 == '\000');
        org.junit.Assert.assertNotNull(option67);
        org.junit.Assert.assertNull(optionGroup71);
        org.junit.Assert.assertTrue(""'"" + boolean73 + ""' != '"" + false + ""'"", boolean73 == false);
        org.junit.Assert.assertNotNull(option77);
        org.junit.Assert.assertNotNull(options80);
        org.junit.Assert.assertNull(strArray83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(commandLine86);
        org.junit.Assert.assertNotNull(commandLine89);
        org.junit.Assert.assertNotNull(commandLine92);
        org.junit.Assert.assertNotNull(option94);
        org.junit.Assert.assertNull(optionGroup97);"
74,322,7778,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0323"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option39 = org.apache.commons.cli.OptionBuilder.create('4');
        option39.setDescription("""");
        org.apache.commons.cli.Options options42 = options37.addOption(option39);
        option39.setArgs((int) '\000');
        org.apache.commons.cli.Options options45 = options22.addOption(option39);
        org.apache.commons.cli.PosixParser posixParser46 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option49 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup50 = options47.getOptionGroup(option49);
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        char char53 = option52.getValueSeparator();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("""");
        option52.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup59 = options47.getOptionGroup(option52);
        boolean boolean61 = options47.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser62 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options63 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option65 = org.apache.commons.cli.OptionBuilder.create('4');
        option65.setDescription("""");
        org.apache.commons.cli.Options options68 = options63.addOption(option65);
        org.apache.commons.cli.CommandLine commandLine69 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray71 = commandLine69.getOptionValues(""hi!"");
        java.lang.String str74 = commandLine69.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str76 = commandLine69.getOptionValue(""arg"");
        java.lang.String[] strArray77 = commandLine69.getArgs();
        java.lang.String[] strArray79 = posixParser62.flatten(options68, strArray77, false);
        java.util.Properties properties80 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser46.parse(options47, strArray79, properties80);
        java.util.List list82 = commandLine81.getArgList();
        java.lang.String[] strArray83 = commandLine81.getArgs();
        java.lang.String[] strArray84 = commandLine81.getArgs();
        java.util.Properties properties85 = null;
        org.apache.commons.cli.CommandLine commandLine86 = posixParser0.parse(options22, strArray84, properties85);
        org.apache.commons.cli.OptionGroup optionGroup87 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options88 = options22.addOptionGroup(optionGroup87);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue(""'"" + boolean36 + ""' != '"" + false + ""'"", boolean36 == false);
        org.junit.Assert.assertNotNull(option39);
        org.junit.Assert.assertNotNull(options42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(option49);
        org.junit.Assert.assertNull(optionGroup50);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertTrue(""'"" + char53 + ""' != '"" + '\000' + ""'"", char53 == '\000');
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNull(optionGroup59);
        org.junit.Assert.assertTrue(""'"" + boolean61 + ""' != '"" + false + ""'"", boolean61 == false);
        org.junit.Assert.assertNotNull(option65);
        org.junit.Assert.assertNotNull(options68);
        org.junit.Assert.assertNull(strArray71);
        org.junit.Assert.assertEquals(""'"" + str74 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str74, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(list82);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(commandLine86);"
75,25,7931,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0026"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues(""hi!"");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("""");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        org.apache.commons.cli.Options options63 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option65 = org.apache.commons.cli.OptionBuilder.create('4');
        option65.setDescription("""");
        org.apache.commons.cli.Options options68 = options63.addOption(option65);
        java.util.Collection collection69 = options63.getOptionGroups();
        org.apache.commons.cli.Options options73 = options63.addOption("""", false, ""arg"");
        java.util.List list74 = options73.getRequiredOptions();
        org.apache.commons.cli.Option option76 = org.apache.commons.cli.OptionBuilder.create(""arg"");
        org.apache.commons.cli.Options options77 = options73.addOption(option76);
        org.apache.commons.cli.Option option79 = org.apache.commons.cli.OptionBuilder.create('4');
        option79.setArgs((int) (short) 100);
        option79.setArgName(""[ option: 4  :: null ]"");
        java.lang.String str84 = option79.getLongOpt();
        java.lang.String str86 = option79.getValue((int) (short) -1);
        org.apache.commons.cli.Options options87 = options77.addOption(option79);
        org.apache.commons.cli.CommandLine commandLine88 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray90 = commandLine88.getOptionValues(""hi!"");
        java.lang.String str93 = commandLine88.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str95 = commandLine88.getOptionValue(""arg"");
        java.lang.String[] strArray96 = commandLine88.getArgs();
        org.apache.commons.cli.CommandLine commandLine98 = posixParser0.parse(options87, strArray96, false);
        java.util.Collection collection99 = options87.getOptionGroups();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue(""'"" + boolean36 + ""' != '"" + false + ""'"", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(option65);
        org.junit.Assert.assertNotNull(options68);
        org.junit.Assert.assertNotNull(collection69);
        org.junit.Assert.assertNotNull(options73);
        org.junit.Assert.assertNotNull(list74);
        org.junit.Assert.assertNotNull(option76);
        org.junit.Assert.assertNotNull(options77);
        org.junit.Assert.assertNotNull(option79);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNotNull(options87);
        org.junit.Assert.assertNull(strArray90);
        org.junit.Assert.assertEquals(""'"" + str93 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str93, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str95);
        org.junit.Assert.assertNotNull(strArray96);
        org.junit.Assert.assertNotNull(commandLine98);
        org.junit.Assert.assertNotNull(collection99);"
76,123,7921,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0124"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues(""hi!"");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("""");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        org.apache.commons.cli.Options options63 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option65 = org.apache.commons.cli.OptionBuilder.create('4');
        option65.setDescription("""");
        org.apache.commons.cli.Options options68 = options63.addOption(option65);
        java.util.Collection collection69 = options63.getOptionGroups();
        org.apache.commons.cli.Options options73 = options63.addOption("""", false, ""arg"");
        java.util.List list74 = options73.getRequiredOptions();
        org.apache.commons.cli.Option option76 = org.apache.commons.cli.OptionBuilder.create(""arg"");
        org.apache.commons.cli.Options options77 = options73.addOption(option76);
        org.apache.commons.cli.Option option79 = org.apache.commons.cli.OptionBuilder.create('4');
        option79.setArgs((int) (short) 100);
        option79.setArgName(""[ option: 4  :: null ]"");
        java.lang.String str84 = option79.getLongOpt();
        java.lang.String str86 = option79.getValue((int) (short) -1);
        org.apache.commons.cli.Options options87 = options77.addOption(option79);
        org.apache.commons.cli.CommandLine commandLine88 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray90 = commandLine88.getOptionValues(""hi!"");
        java.lang.String str93 = commandLine88.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str95 = commandLine88.getOptionValue(""arg"");
        java.lang.String[] strArray96 = commandLine88.getArgs();
        org.apache.commons.cli.CommandLine commandLine98 = posixParser0.parse(options87, strArray96, false);
        java.lang.String[] strArray99 = commandLine98.getArgs();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue(""'"" + boolean36 + ""' != '"" + false + ""'"", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(option65);
        org.junit.Assert.assertNotNull(options68);
        org.junit.Assert.assertNotNull(collection69);
        org.junit.Assert.assertNotNull(options73);
        org.junit.Assert.assertNotNull(list74);
        org.junit.Assert.assertNotNull(option76);
        org.junit.Assert.assertNotNull(options77);
        org.junit.Assert.assertNotNull(option79);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNotNull(options87);
        org.junit.Assert.assertNull(strArray90);
        org.junit.Assert.assertEquals(""'"" + str93 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str93, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str95);
        org.junit.Assert.assertNotNull(strArray96);
        org.junit.Assert.assertNotNull(commandLine98);
        org.junit.Assert.assertNotNull(strArray99);"
77,311,7509,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0312"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptions();
        boolean boolean9 = options1.hasOption(""arg"");
        java.lang.String[] strArray12 = new java.lang.String[] { ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"", ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"" };
        org.apache.commons.cli.CommandLine commandLine13 = posixParser0.parse(options1, strArray12);
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = org.apache.commons.cli.OptionBuilder.create('4');
        option16.setDescription("""");
        org.apache.commons.cli.Options options19 = options14.addOption(option16);
        java.util.Collection collection20 = options14.getOptionGroups();
        org.apache.commons.cli.Options options24 = options14.addOption("""", false, ""arg"");
        java.util.List list25 = options24.getRequiredOptions();
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create(""arg"");
        org.apache.commons.cli.Options options28 = options24.addOption(option27);
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setArgs((int) (short) 100);
        option30.setArgName(""[ option: 4  :: null ]"");
        java.lang.String str35 = option30.getLongOpt();
        java.lang.String str37 = option30.getValue((int) (short) -1);
        org.apache.commons.cli.Options options38 = options28.addOption(option30);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup42 = options39.getOptionGroup(option41);
        boolean boolean43 = option41.hasLongOpt();
        boolean boolean44 = option41.isRequired();
        java.util.List list45 = option41.getValuesList();
        option41.setDescription(""[ option: 4  ::  ]"");
        org.apache.commons.cli.Options options48 = options38.addOption(option41);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        option52.setDescription("""");
        org.apache.commons.cli.Options options55 = options50.addOption(option52);
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray58 = commandLine56.getOptionValues(""hi!"");
        java.lang.String str61 = commandLine56.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str63 = commandLine56.getOptionValue(""arg"");
        java.lang.String[] strArray64 = commandLine56.getArgs();
        java.lang.String[] strArray66 = posixParser49.flatten(options55, strArray64, false);
        org.apache.commons.cli.CommandLine commandLine68 = posixParser0.parse(options38, strArray64, true);
        org.apache.commons.cli.OptionBuilder optionBuilder69 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options38);
        java.lang.String str70 = options38.toString();
        java.lang.String str71 = options38.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options76 = options38.addOption(""org.apache.commons.cli.ParseException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"", ""org.apache.commons.cli.ParseException: [ option:    :: null ]"", true, ""[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]"");
            org.junit.Assert.fail(""Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '.'"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertTrue(""'"" + boolean9 + ""' != '"" + false + ""'"", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine13);
        org.junit.Assert.assertNotNull(option16);
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertNotNull(collection20);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertTrue(""'"" + boolean43 + ""' != '"" + false + ""'"", boolean43 == false);
        org.junit.Assert.assertTrue(""'"" + boolean44 + ""' != '"" + false + ""'"", boolean44 == false);
        org.junit.Assert.assertNotNull(list45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNull(strArray58);
        org.junit.Assert.assertEquals(""'"" + str61 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str61, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertNotNull(optionBuilder69);
        org.junit.Assert.assertEquals(""'"" + str70 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]"" + ""'"", str70, ""[ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]"");
        org.junit.Assert.assertEquals(""'"" + str71 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]"" + ""'"", str71, ""[ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]"");"
78,131,7885,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0132"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues(""hi!"");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.PosixParser posixParser53 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        option56.setDescription("""");
        org.apache.commons.cli.Options options59 = options54.addOption(option56);
        org.apache.commons.cli.CommandLine commandLine60 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray62 = commandLine60.getOptionValues(""hi!"");
        java.lang.String str65 = commandLine60.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str67 = commandLine60.getOptionValue(""arg"");
        java.lang.String[] strArray68 = commandLine60.getArgs();
        java.lang.String[] strArray70 = posixParser53.flatten(options59, strArray68, false);
        org.apache.commons.cli.PosixParser posixParser71 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options72 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option74 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup75 = options72.getOptionGroup(option74);
        org.apache.commons.cli.CommandLine commandLine76 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray78 = commandLine76.getOptionValues(""hi!"");
        java.lang.String str81 = commandLine76.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str83 = commandLine76.getOptionValue(""arg"");
        java.lang.String[] strArray84 = commandLine76.getArgs();
        java.lang.String[] strArray86 = posixParser71.flatten(options72, strArray84, true);
        org.apache.commons.cli.CommandLine commandLine88 = posixParser0.parse(options59, strArray84, false);
        java.util.Iterator iterator89 = commandLine88.iterator();
        boolean boolean91 = commandLine88.hasOption(""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue(""'"" + boolean36 + ""' != '"" + false + ""'"", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNull(strArray62);
        org.junit.Assert.assertEquals(""'"" + str65 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str65, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(option74);
        org.junit.Assert.assertNull(optionGroup75);
        org.junit.Assert.assertNull(strArray78);
        org.junit.Assert.assertEquals(""'"" + str81 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str81, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(commandLine88);
        org.junit.Assert.assertNotNull(iterator89);
        org.junit.Assert.assertTrue(""'"" + boolean91 + ""' != '"" + false + ""'"", boolean91 == false);"
79,39,7617,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0040"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken(""hi!"", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("""");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptionGroups();
        org.apache.commons.cli.Options options31 = options21.addOption("""", false, ""arg"");
        java.util.List list32 = options31.getRequiredOptions();
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create(""arg"");
        org.apache.commons.cli.Options options35 = options31.addOption(option34);
        boolean boolean37 = options31.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        java.util.Collection collection38 = options31.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine39 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine39.getOptionValues(""hi!"");
        java.lang.String str44 = commandLine39.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str46 = commandLine39.getOptionValue(""arg"");
        java.lang.String[] strArray47 = commandLine39.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine50 = posixParser0.parse(options31, strArray47, properties48, true);
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create('4');
        option53.setDescription("""");
        org.apache.commons.cli.Options options56 = options51.addOption(option53);
        java.util.Collection collection57 = options51.getOptionGroups();
        java.util.Collection collection58 = options51.getOptionGroups();
        java.util.Collection collection59 = options51.getOptionGroups();
        org.apache.commons.cli.PosixParser posixParser60 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options61 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option63 = org.apache.commons.cli.OptionBuilder.create('4');
        option63.setDescription("""");
        org.apache.commons.cli.Options options66 = options61.addOption(option63);
        org.apache.commons.cli.CommandLine commandLine67 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray69 = commandLine67.getOptionValues(""hi!"");
        java.lang.String str72 = commandLine67.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str74 = commandLine67.getOptionValue(""arg"");
        java.lang.String[] strArray75 = commandLine67.getArgs();
        java.lang.String[] strArray77 = posixParser60.flatten(options66, strArray75, false);
        java.util.Properties properties78 = null;
        org.apache.commons.cli.CommandLine commandLine79 = posixParser0.parse(options51, strArray77, properties78);
        org.apache.commons.cli.Option option81 = org.apache.commons.cli.OptionBuilder.create('4');
        char char82 = option81.getValueSeparator();
        boolean boolean83 = option81.hasArg();
        java.lang.String str84 = option81.getArgName();
        java.util.ListIterator listIterator85 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option81, listIterator85);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(options31);
        org.junit.Assert.assertNotNull(list32);
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertTrue(""'"" + boolean37 + ""' != '"" + false + ""'"", boolean37 == false);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertEquals(""'"" + str44 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str44, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNotNull(options56);
        org.junit.Assert.assertNotNull(collection57);
        org.junit.Assert.assertNotNull(collection58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(option63);
        org.junit.Assert.assertNotNull(options66);
        org.junit.Assert.assertNull(strArray69);
        org.junit.Assert.assertEquals(""'"" + str72 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str72, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(commandLine79);
        org.junit.Assert.assertNotNull(option81);
        org.junit.Assert.assertTrue(""'"" + char82 + ""' != '"" + '\000' + ""'"", char82 == '\000');
        org.junit.Assert.assertTrue(""'"" + boolean83 + ""' != '"" + false + ""'"", boolean83 == false);
        org.junit.Assert.assertEquals(""'"" + str84 + ""' != '"" + ""arg"" + ""'"", str84, ""arg"");"
80,281,7437,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0282"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String[] strArray10 = commandLine7.getArgs();
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser0.parse(options1, strArray10, properties11);
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option15 = org.apache.commons.cli.OptionBuilder.create('4');
        char char16 = option15.getValueSeparator();
        org.apache.commons.cli.Option option18 = org.apache.commons.cli.OptionBuilder.create('4');
        option18.setDescription("""");
        option15.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup22 = options13.getOptionGroup(option15);
        java.util.List list23 = options13.helpOptions();
        org.apache.commons.cli.PosixParser posixParser24 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup28 = options25.getOptionGroup(option27);
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray31 = commandLine29.getOptionValues(""hi!"");
        java.lang.String str34 = commandLine29.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str36 = commandLine29.getOptionValue(""arg"");
        java.lang.String[] strArray37 = commandLine29.getArgs();
        java.lang.String[] strArray39 = posixParser24.flatten(options25, strArray37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("""");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine47 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray49 = commandLine47.getOptionValues(""hi!"");
        java.lang.String str52 = commandLine47.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str54 = commandLine47.getOptionValue(""arg"");
        java.lang.String[] strArray55 = commandLine47.getArgs();
        java.util.Properties properties56 = null;
        org.apache.commons.cli.CommandLine commandLine58 = posixParser24.parse(options40, strArray55, properties56, false);
        org.apache.commons.cli.CommandLine commandLine59 = posixParser0.parse(options13, strArray55);
        org.apache.commons.cli.Options options60 = null;
        org.apache.commons.cli.CommandLine commandLine61 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray63 = commandLine61.getOptionValues(""hi!"");
        java.lang.Object obj65 = commandLine61.getOptionObject('a');
        org.apache.commons.cli.Option option67 = org.apache.commons.cli.OptionBuilder.create('4');
        option67.setDescription("""");
        org.apache.commons.cli.Options options70 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option72 = org.apache.commons.cli.OptionBuilder.create('4');
        option72.setDescription("""");
        org.apache.commons.cli.Options options75 = options70.addOption(option72);
        boolean boolean76 = option72.hasOptionalArg();
        option67.setType((java.lang.Object) boolean76);
        java.lang.String str78 = option67.getArgName();
        java.lang.Object obj79 = option67.getType();
        java.lang.String[] strArray80 = option67.getValues();
        commandLine61.addOption(option67);
        java.lang.String[] strArray82 = commandLine61.getArgs();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.CommandLine commandLine83 = posixParser0.parse(options60, strArray82);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertNotNull(option15);
        org.junit.Assert.assertTrue(""'"" + char16 + ""' != '"" + '\000' + ""'"", char16 == '\000');
        org.junit.Assert.assertNotNull(option18);
        org.junit.Assert.assertNull(optionGroup22);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertNull(optionGroup28);
        org.junit.Assert.assertNull(strArray31);
        org.junit.Assert.assertEquals(""'"" + str34 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str34, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNull(strArray49);
        org.junit.Assert.assertEquals(""'"" + str52 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str52, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertNotNull(commandLine59);
        org.junit.Assert.assertNull(strArray63);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertNotNull(option67);
        org.junit.Assert.assertNotNull(option72);
        org.junit.Assert.assertNotNull(options75);
        org.junit.Assert.assertTrue(""'"" + boolean76 + ""' != '"" + false + ""'"", boolean76 == false);
        org.junit.Assert.assertEquals(""'"" + str78 + ""' != '"" + ""arg"" + ""'"", str78, ""arg"");
        org.junit.Assert.assertEquals(""'"" + obj79 + ""' != '"" + false + ""'"", obj79, false);
        org.junit.Assert.assertNull(strArray80);
        org.junit.Assert.assertNotNull(strArray82);"
81,213,7589,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0214"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken(""hi!"", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("""");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptions();
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        char char31 = option30.getValueSeparator();
        org.apache.commons.cli.Option option33 = org.apache.commons.cli.OptionBuilder.create('4');
        option33.setDescription("""");
        option30.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup37 = options28.getOptionGroup(option30);
        option30.setOptionalArg(true);
        int int40 = option30.getId();
        org.apache.commons.cli.Options options41 = options21.addOption(option30);
        boolean boolean43 = options41.hasOption("""");
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setArgs((int) (short) 100);
        option45.setArgName(""[ option: 4  :: null ]"");
        java.lang.String str50 = option45.getLongOpt();
        boolean boolean51 = option45.hasLongOpt();
        org.apache.commons.cli.Options options52 = options41.addOption(option45);
        java.util.Collection collection53 = options41.getOptions();
        org.apache.commons.cli.PosixParser posixParser54 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = org.apache.commons.cli.OptionBuilder.create('4');
        option57.setDescription("""");
        org.apache.commons.cli.Options options60 = options55.addOption(option57);
        java.util.Collection collection61 = options55.getOptions();
        boolean boolean63 = options55.hasOption(""arg"");
        java.lang.String[] strArray66 = new java.lang.String[] { ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"", ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"" };
        org.apache.commons.cli.CommandLine commandLine67 = posixParser54.parse(options55, strArray66);
        java.lang.String[] strArray69 = posixParser0.flatten(options41, strArray66, false);
        posixParser0.burstToken(""hi!"", false);
        org.apache.commons.cli.Options options73 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option75 = org.apache.commons.cli.OptionBuilder.create('4');
        option75.setDescription("""");
        org.apache.commons.cli.Options options78 = options73.addOption(option75);
        java.util.Collection collection79 = options73.getOptions();
        org.apache.commons.cli.Options options80 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option82 = org.apache.commons.cli.OptionBuilder.create('4');
        char char83 = option82.getValueSeparator();
        org.apache.commons.cli.Option option85 = org.apache.commons.cli.OptionBuilder.create('4');
        option85.setDescription("""");
        option82.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup89 = options80.getOptionGroup(option82);
        option82.setOptionalArg(true);
        int int92 = option82.getId();
        org.apache.commons.cli.Options options93 = options73.addOption(option82);
        java.lang.String[] strArray94 = null;
        java.util.Properties properties95 = null;
        org.apache.commons.cli.CommandLine commandLine97 = posixParser0.parse(options73, strArray94, properties95, false);
        java.lang.String str99 = commandLine97.getOptionValue(""[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertTrue(""'"" + char31 + ""' != '"" + '\000' + ""'"", char31 == '\000');
        org.junit.Assert.assertNotNull(option33);
        org.junit.Assert.assertNull(optionGroup37);
        org.junit.Assert.assertTrue(""'"" + int40 + ""' != '"" + 52 + ""'"", int40 == 52);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertTrue(""'"" + boolean43 + ""' != '"" + false + ""'"", boolean43 == false);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue(""'"" + boolean51 + ""' != '"" + false + ""'"", boolean51 == false);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(collection53);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(collection61);
        org.junit.Assert.assertTrue(""'"" + boolean63 + ""' != '"" + false + ""'"", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(option75);
        org.junit.Assert.assertNotNull(options78);
        org.junit.Assert.assertNotNull(collection79);
        org.junit.Assert.assertNotNull(option82);
        org.junit.Assert.assertTrue(""'"" + char83 + ""' != '"" + '\000' + ""'"", char83 == '\000');
        org.junit.Assert.assertNotNull(option85);
        org.junit.Assert.assertNull(optionGroup89);
        org.junit.Assert.assertTrue(""'"" + int92 + ""' != '"" + 52 + ""'"", int92 == 52);
        org.junit.Assert.assertNotNull(options93);
        org.junit.Assert.assertNotNull(commandLine97);
        org.junit.Assert.assertNull(str99);"
82,488,7529,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0489"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option6.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create('4');
        option38.setDescription("""");
        org.apache.commons.cli.Options options41 = options36.addOption(option38);
        org.apache.commons.cli.Options options42 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        char char45 = option44.getValueSeparator();
        org.apache.commons.cli.Option option47 = org.apache.commons.cli.OptionBuilder.create('4');
        option47.setDescription("""");
        option44.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup51 = options42.getOptionGroup(option44);
        option44.setOptionalArg(true);
        int int54 = option44.getId();
        org.apache.commons.cli.OptionGroup optionGroup55 = options41.getOptionGroup(option44);
        org.apache.commons.cli.Options options56 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option58 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup59 = options56.getOptionGroup(option58);
        boolean boolean60 = option58.hasLongOpt();
        boolean boolean61 = option58.isRequired();
        org.apache.commons.cli.Options options62 = options41.addOption(option58);
        org.apache.commons.cli.PosixParser posixParser63 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option66 = org.apache.commons.cli.OptionBuilder.create('4');
        option66.setDescription("""");
        org.apache.commons.cli.Options options69 = options64.addOption(option66);
        org.apache.commons.cli.CommandLine commandLine70 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray72 = commandLine70.getOptionValues(""hi!"");
        java.lang.String str75 = commandLine70.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str77 = commandLine70.getOptionValue(""arg"");
        java.lang.String[] strArray78 = commandLine70.getArgs();
        java.lang.String[] strArray80 = posixParser63.flatten(options69, strArray78, false);
        org.apache.commons.cli.CommandLine commandLine82 = posixParser0.parse(options62, strArray80, false);
        org.apache.commons.cli.Option option87 = new org.apache.commons.cli.Option(""arg"", """", false, """");
        option87.setValueSeparator('#');
        org.apache.commons.cli.Options options90 = options62.addOption(option87);
        java.util.Collection collection91 = options62.getOptionGroups();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue(""'"" + char7 + ""' != '"" + '\000' + ""'"", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertTrue(""'"" + char45 + ""' != '"" + '\000' + ""'"", char45 == '\000');
        org.junit.Assert.assertNotNull(option47);
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertTrue(""'"" + int54 + ""' != '"" + 52 + ""'"", int54 == 52);
        org.junit.Assert.assertNull(optionGroup55);
        org.junit.Assert.assertNotNull(option58);
        org.junit.Assert.assertNull(optionGroup59);
        org.junit.Assert.assertTrue(""'"" + boolean60 + ""' != '"" + false + ""'"", boolean60 == false);
        org.junit.Assert.assertTrue(""'"" + boolean61 + ""' != '"" + false + ""'"", boolean61 == false);
        org.junit.Assert.assertNotNull(options62);
        org.junit.Assert.assertNotNull(option66);
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertNull(strArray72);
        org.junit.Assert.assertEquals(""'"" + str75 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str75, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(options90);
        org.junit.Assert.assertNotNull(collection91);"
83,110,7694,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0111"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("""");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("""");
        option26.setLongOpt(""hi!"");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues(""hi!"");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("""");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        org.apache.commons.cli.Options options50 = options40.addOption("""", false, ""arg"");
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup54 = options51.getOptionGroup(option53);
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        char char57 = option56.getValueSeparator();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        option59.setDescription("""");
        option56.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup63 = options51.getOptionGroup(option56);
        boolean boolean64 = option56.hasArgName();
        org.apache.commons.cli.Options options65 = options40.addOption(option56);
        org.apache.commons.cli.CommandLine commandLine66 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray68 = commandLine66.getOptionValues(""hi!"");
        java.lang.String str71 = commandLine66.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str73 = commandLine66.getOptionValue(""arg"");
        java.lang.String[] strArray74 = commandLine66.getArgs();
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options40, strArray74, properties75);
        posixParser0.burstToken(""[ option: 4  :: null ]"", true);
        org.apache.commons.cli.Option option81 = org.apache.commons.cli.OptionBuilder.create('4');
        option81.setDescription("""");
        option81.setLongOpt(""hi!"");
        option81.setArgName(""arg"");
        org.apache.commons.cli.Options options88 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option90 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup91 = options88.getOptionGroup(option90);
        option81.setType((java.lang.Object) options88);
        java.util.List list93 = options88.getRequiredOptions();
        java.util.List list94 = options88.helpOptions();
        java.lang.String[] strArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray97 = posixParser0.flatten(options88, strArray95, false);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue(""'"" + boolean31 + ""' != '"" + true + ""'"", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNotNull(options50);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertTrue(""'"" + char57 + ""' != '"" + '\000' + ""'"", char57 == '\000');
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNull(optionGroup63);
        org.junit.Assert.assertTrue(""'"" + boolean64 + ""' != '"" + true + ""'"", boolean64 == true);
        org.junit.Assert.assertNotNull(options65);
        org.junit.Assert.assertNull(strArray68);
        org.junit.Assert.assertEquals(""'"" + str71 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str71, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(option81);
        org.junit.Assert.assertNotNull(option90);
        org.junit.Assert.assertNull(optionGroup91);
        org.junit.Assert.assertNotNull(list93);
        org.junit.Assert.assertNotNull(list94);"
84,229,7770,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0230"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues(""hi!"");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.PosixParser posixParser53 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        option56.setDescription("""");
        org.apache.commons.cli.Options options59 = options54.addOption(option56);
        org.apache.commons.cli.CommandLine commandLine60 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray62 = commandLine60.getOptionValues(""hi!"");
        java.lang.String str65 = commandLine60.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str67 = commandLine60.getOptionValue(""arg"");
        java.lang.String[] strArray68 = commandLine60.getArgs();
        java.lang.String[] strArray70 = posixParser53.flatten(options59, strArray68, false);
        org.apache.commons.cli.PosixParser posixParser71 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options72 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option74 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup75 = options72.getOptionGroup(option74);
        org.apache.commons.cli.CommandLine commandLine76 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray78 = commandLine76.getOptionValues(""hi!"");
        java.lang.String str81 = commandLine76.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str83 = commandLine76.getOptionValue(""arg"");
        java.lang.String[] strArray84 = commandLine76.getArgs();
        java.lang.String[] strArray86 = posixParser71.flatten(options72, strArray84, true);
        org.apache.commons.cli.CommandLine commandLine88 = posixParser0.parse(options59, strArray84, false);
        boolean boolean90 = commandLine88.hasOption(""[ option: 4  :: [ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ] ::  ]"");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue(""'"" + boolean36 + ""' != '"" + false + ""'"", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNull(strArray62);
        org.junit.Assert.assertEquals(""'"" + str65 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str65, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(option74);
        org.junit.Assert.assertNull(optionGroup75);
        org.junit.Assert.assertNull(strArray78);
        org.junit.Assert.assertEquals(""'"" + str81 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str81, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(commandLine88);
        org.junit.Assert.assertTrue(""'"" + boolean90 + ""' != '"" + false + ""'"", boolean90 == false);"
85,212,7704,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0213"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("""");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("""");
        option26.setLongOpt(""hi!"");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues(""hi!"");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("""");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        org.apache.commons.cli.Options options50 = options40.addOption("""", false, ""arg"");
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup54 = options51.getOptionGroup(option53);
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        char char57 = option56.getValueSeparator();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        option59.setDescription("""");
        option56.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup63 = options51.getOptionGroup(option56);
        boolean boolean64 = option56.hasArgName();
        org.apache.commons.cli.Options options65 = options40.addOption(option56);
        org.apache.commons.cli.CommandLine commandLine66 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray68 = commandLine66.getOptionValues(""hi!"");
        java.lang.String str71 = commandLine66.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str73 = commandLine66.getOptionValue(""arg"");
        java.lang.String[] strArray74 = commandLine66.getArgs();
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options40, strArray74, properties75);
        org.apache.commons.cli.Options options77 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option79 = org.apache.commons.cli.OptionBuilder.create('4');
        char char80 = option79.getValueSeparator();
        org.apache.commons.cli.Option option82 = org.apache.commons.cli.OptionBuilder.create('4');
        option82.setDescription("""");
        option79.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup86 = options77.getOptionGroup(option79);
        java.lang.String[] strArray89 = new java.lang.String[] { ""4"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" };
        java.util.Properties properties90 = null;
        org.apache.commons.cli.CommandLine commandLine91 = posixParser0.parse(options77, strArray89, properties90);
        posixParser0.burstToken(""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"", true);
        posixParser0.burstToken(""org.apache.commons.cli.UnrecognizedOptionException: "", true);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue(""'"" + boolean31 + ""' != '"" + true + ""'"", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNotNull(options50);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertTrue(""'"" + char57 + ""' != '"" + '\000' + ""'"", char57 == '\000');
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNull(optionGroup63);
        org.junit.Assert.assertTrue(""'"" + boolean64 + ""' != '"" + true + ""'"", boolean64 == true);
        org.junit.Assert.assertNotNull(options65);
        org.junit.Assert.assertNull(strArray68);
        org.junit.Assert.assertEquals(""'"" + str71 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str71, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(option79);
        org.junit.Assert.assertTrue(""'"" + char80 + ""' != '"" + '\000' + ""'"", char80 == '\000');
        org.junit.Assert.assertNotNull(option82);
        org.junit.Assert.assertNull(optionGroup86);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(commandLine91);"
86,375,7466,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0376"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option6.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken(""[ option: 4  :: null ::  ]"", true);
        posixParser0.burstToken(""[ Options: [ short {} ] [ long {} ]"", true);
        org.apache.commons.cli.PosixParser posixParser42 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setDescription("""");
        org.apache.commons.cli.Options options48 = options43.addOption(option45);
        org.apache.commons.cli.CommandLine commandLine49 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray51 = commandLine49.getOptionValues(""hi!"");
        java.lang.String str54 = commandLine49.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str56 = commandLine49.getOptionValue(""arg"");
        java.lang.String[] strArray57 = commandLine49.getArgs();
        java.lang.String[] strArray59 = posixParser42.flatten(options48, strArray57, false);
        boolean boolean61 = options48.hasOption(""arg"");
        java.util.Collection collection62 = options48.getOptions();
        org.apache.commons.cli.CommandLine commandLine63 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray65 = commandLine63.getOptionValues(""hi!"");
        java.lang.String[] strArray66 = commandLine63.getArgs();
        java.util.Iterator iterator67 = commandLine63.iterator();
        boolean boolean69 = commandLine63.hasOption(""[ option: 4  :: null ]"");
        java.lang.String str72 = commandLine63.getOptionValue(""[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]"", ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"");
        java.lang.String[] strArray73 = commandLine63.getArgs();
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options48, strArray73, properties74, true);
        org.apache.commons.cli.Option option78 = org.apache.commons.cli.OptionBuilder.create('4');
        option78.setOptionalArg(false);
        int int81 = option78.getArgs();
        char char82 = option78.getValueSeparator();
        java.util.ListIterator listIterator83 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option78, listIterator83);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue(""'"" + char7 + ""' != '"" + '\000' + ""'"", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNull(strArray51);
        org.junit.Assert.assertEquals(""'"" + str54 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str54, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue(""'"" + boolean61 + ""' != '"" + false + ""'"", boolean61 == false);
        org.junit.Assert.assertNotNull(collection62);
        org.junit.Assert.assertNull(strArray65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(iterator67);
        org.junit.Assert.assertTrue(""'"" + boolean69 + ""' != '"" + false + ""'"", boolean69 == false);
        org.junit.Assert.assertEquals(""'"" + str72 + ""' != '"" + ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"" + ""'"", str72, ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"");
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(option78);
        org.junit.Assert.assertTrue(""'"" + int81 + ""' != '"" + (-1) + ""'"", int81 == (-1));
        org.junit.Assert.assertTrue(""'"" + char82 + ""' != '"" + '\000' + ""'"", char82 == '\000');"
87,298,7535,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0299"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken(""hi!"", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("""");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptions();
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        char char31 = option30.getValueSeparator();
        org.apache.commons.cli.Option option33 = org.apache.commons.cli.OptionBuilder.create('4');
        option33.setDescription("""");
        option30.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup37 = options28.getOptionGroup(option30);
        option30.setOptionalArg(true);
        int int40 = option30.getId();
        org.apache.commons.cli.Options options41 = options21.addOption(option30);
        boolean boolean43 = options41.hasOption("""");
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setArgs((int) (short) 100);
        option45.setArgName(""[ option: 4  :: null ]"");
        java.lang.String str50 = option45.getLongOpt();
        boolean boolean51 = option45.hasLongOpt();
        org.apache.commons.cli.Options options52 = options41.addOption(option45);
        java.util.Collection collection53 = options41.getOptions();
        org.apache.commons.cli.PosixParser posixParser54 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = org.apache.commons.cli.OptionBuilder.create('4');
        option57.setDescription("""");
        org.apache.commons.cli.Options options60 = options55.addOption(option57);
        java.util.Collection collection61 = options55.getOptions();
        boolean boolean63 = options55.hasOption(""arg"");
        java.lang.String[] strArray66 = new java.lang.String[] { ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"", ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"" };
        org.apache.commons.cli.CommandLine commandLine67 = posixParser54.parse(options55, strArray66);
        java.lang.String[] strArray69 = posixParser0.flatten(options41, strArray66, false);
        posixParser0.burstToken(""hi!"", false);
        org.apache.commons.cli.Options options73 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option75 = org.apache.commons.cli.OptionBuilder.create('4');
        option75.setDescription("""");
        org.apache.commons.cli.Options options78 = options73.addOption(option75);
        java.util.Collection collection79 = options73.getOptions();
        org.apache.commons.cli.Options options80 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option82 = org.apache.commons.cli.OptionBuilder.create('4');
        char char83 = option82.getValueSeparator();
        org.apache.commons.cli.Option option85 = org.apache.commons.cli.OptionBuilder.create('4');
        option85.setDescription("""");
        option82.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup89 = options80.getOptionGroup(option82);
        option82.setOptionalArg(true);
        int int92 = option82.getId();
        org.apache.commons.cli.Options options93 = options73.addOption(option82);
        java.lang.String[] strArray94 = null;
        java.util.Properties properties95 = null;
        org.apache.commons.cli.CommandLine commandLine97 = posixParser0.parse(options73, strArray94, properties95, false);
        java.util.List list98 = options73.getRequiredOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertTrue(""'"" + char31 + ""' != '"" + '\000' + ""'"", char31 == '\000');
        org.junit.Assert.assertNotNull(option33);
        org.junit.Assert.assertNull(optionGroup37);
        org.junit.Assert.assertTrue(""'"" + int40 + ""' != '"" + 52 + ""'"", int40 == 52);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertTrue(""'"" + boolean43 + ""' != '"" + false + ""'"", boolean43 == false);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue(""'"" + boolean51 + ""' != '"" + false + ""'"", boolean51 == false);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(collection53);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(collection61);
        org.junit.Assert.assertTrue(""'"" + boolean63 + ""' != '"" + false + ""'"", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(option75);
        org.junit.Assert.assertNotNull(options78);
        org.junit.Assert.assertNotNull(collection79);
        org.junit.Assert.assertNotNull(option82);
        org.junit.Assert.assertTrue(""'"" + char83 + ""' != '"" + '\000' + ""'"", char83 == '\000');
        org.junit.Assert.assertNotNull(option85);
        org.junit.Assert.assertNull(optionGroup89);
        org.junit.Assert.assertTrue(""'"" + int92 + ""' != '"" + 52 + ""'"", int92 == 52);
        org.junit.Assert.assertNotNull(options93);
        org.junit.Assert.assertNotNull(commandLine97);
        org.junit.Assert.assertNotNull(list98);"
88,307,7463,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0308"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken(""hi!"", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("""");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptionGroups();
        org.apache.commons.cli.Option option29 = org.apache.commons.cli.OptionBuilder.create('4');
        option29.setDescription("""");
        option29.setLongOpt(""hi!"");
        boolean boolean34 = option29.hasArgName();
        org.apache.commons.cli.Options options35 = options21.addOption(option29);
        java.util.Collection collection36 = options35.getOptionGroups();
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.PosixParser posixParser44 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options45 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option47 = org.apache.commons.cli.OptionBuilder.create('4');
        option47.setDescription("""");
        org.apache.commons.cli.Options options50 = options45.addOption(option47);
        org.apache.commons.cli.CommandLine commandLine51 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray53 = commandLine51.getOptionValues(""hi!"");
        java.lang.String[] strArray54 = commandLine51.getArgs();
        java.util.Properties properties55 = null;
        org.apache.commons.cli.CommandLine commandLine56 = posixParser44.parse(options45, strArray54, properties55);
        org.apache.commons.cli.CommandLine commandLine58 = posixParser37.parse(options43, strArray54, false);
        org.apache.commons.cli.Options options59 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option61 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup62 = options59.getOptionGroup(option61);
        org.apache.commons.cli.Option option64 = org.apache.commons.cli.OptionBuilder.create('4');
        char char65 = option64.getValueSeparator();
        org.apache.commons.cli.Option option67 = org.apache.commons.cli.OptionBuilder.create('4');
        option67.setDescription("""");
        option64.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup71 = options59.getOptionGroup(option64);
        boolean boolean73 = options59.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser74 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options75 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option77 = org.apache.commons.cli.OptionBuilder.create('4');
        option77.setDescription("""");
        org.apache.commons.cli.Options options80 = options75.addOption(option77);
        org.apache.commons.cli.CommandLine commandLine81 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray83 = commandLine81.getOptionValues(""hi!"");
        java.lang.String[] strArray84 = commandLine81.getArgs();
        java.util.Properties properties85 = null;
        org.apache.commons.cli.CommandLine commandLine86 = posixParser74.parse(options75, strArray84, properties85);
        java.util.Properties properties87 = null;
        org.apache.commons.cli.CommandLine commandLine89 = posixParser37.parse(options59, strArray84, properties87, true);
        java.util.Properties properties90 = null;
        org.apache.commons.cli.CommandLine commandLine92 = posixParser0.parse(options35, strArray84, properties90, true);
        org.apache.commons.cli.Option[] optionArray93 = commandLine92.getOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(option29);
        org.junit.Assert.assertTrue(""'"" + boolean34 + ""' != '"" + true + ""'"", boolean34 == true);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertNotNull(collection36);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNotNull(option47);
        org.junit.Assert.assertNotNull(options50);
        org.junit.Assert.assertNull(strArray53);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(commandLine56);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertNotNull(option61);
        org.junit.Assert.assertNull(optionGroup62);
        org.junit.Assert.assertNotNull(option64);
        org.junit.Assert.assertTrue(""'"" + char65 + ""' != '"" + '\000' + ""'"", char65 == '\000');
        org.junit.Assert.assertNotNull(option67);
        org.junit.Assert.assertNull(optionGroup71);
        org.junit.Assert.assertTrue(""'"" + boolean73 + ""' != '"" + false + ""'"", boolean73 == false);
        org.junit.Assert.assertNotNull(option77);
        org.junit.Assert.assertNotNull(options80);
        org.junit.Assert.assertNull(strArray83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(commandLine86);
        org.junit.Assert.assertNotNull(commandLine89);
        org.junit.Assert.assertNotNull(commandLine92);
        org.junit.Assert.assertNotNull(optionArray93);"
89,232,7749,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0233"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues(""hi!"");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.PosixParser posixParser53 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        option56.setDescription("""");
        org.apache.commons.cli.Options options59 = options54.addOption(option56);
        org.apache.commons.cli.CommandLine commandLine60 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray62 = commandLine60.getOptionValues(""hi!"");
        java.lang.String str65 = commandLine60.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str67 = commandLine60.getOptionValue(""arg"");
        java.lang.String[] strArray68 = commandLine60.getArgs();
        java.lang.String[] strArray70 = posixParser53.flatten(options59, strArray68, false);
        org.apache.commons.cli.PosixParser posixParser71 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options72 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option74 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup75 = options72.getOptionGroup(option74);
        org.apache.commons.cli.CommandLine commandLine76 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray78 = commandLine76.getOptionValues(""hi!"");
        java.lang.String str81 = commandLine76.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str83 = commandLine76.getOptionValue(""arg"");
        java.lang.String[] strArray84 = commandLine76.getArgs();
        java.lang.String[] strArray86 = posixParser71.flatten(options72, strArray84, true);
        org.apache.commons.cli.CommandLine commandLine88 = posixParser0.parse(options59, strArray84, false);
        java.util.List list89 = commandLine88.getArgList();
        java.util.List list90 = commandLine88.getArgList();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue(""'"" + boolean36 + ""' != '"" + false + ""'"", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNull(strArray62);
        org.junit.Assert.assertEquals(""'"" + str65 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str65, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(option74);
        org.junit.Assert.assertNull(optionGroup75);
        org.junit.Assert.assertNull(strArray78);
        org.junit.Assert.assertEquals(""'"" + str81 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str81, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(commandLine88);
        org.junit.Assert.assertNotNull(list89);
        org.junit.Assert.assertNotNull(list90);"
90,132,7449,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0133"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken(""hi!"", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("""");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptionGroups();
        org.apache.commons.cli.Option option29 = org.apache.commons.cli.OptionBuilder.create('4');
        option29.setDescription("""");
        option29.setLongOpt(""hi!"");
        boolean boolean34 = option29.hasArgName();
        org.apache.commons.cli.Options options35 = options21.addOption(option29);
        java.util.Collection collection36 = options35.getOptionGroups();
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.PosixParser posixParser44 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options45 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option47 = org.apache.commons.cli.OptionBuilder.create('4');
        option47.setDescription("""");
        org.apache.commons.cli.Options options50 = options45.addOption(option47);
        org.apache.commons.cli.CommandLine commandLine51 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray53 = commandLine51.getOptionValues(""hi!"");
        java.lang.String[] strArray54 = commandLine51.getArgs();
        java.util.Properties properties55 = null;
        org.apache.commons.cli.CommandLine commandLine56 = posixParser44.parse(options45, strArray54, properties55);
        org.apache.commons.cli.CommandLine commandLine58 = posixParser37.parse(options43, strArray54, false);
        org.apache.commons.cli.Options options59 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option61 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup62 = options59.getOptionGroup(option61);
        org.apache.commons.cli.Option option64 = org.apache.commons.cli.OptionBuilder.create('4');
        char char65 = option64.getValueSeparator();
        org.apache.commons.cli.Option option67 = org.apache.commons.cli.OptionBuilder.create('4');
        option67.setDescription("""");
        option64.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup71 = options59.getOptionGroup(option64);
        boolean boolean73 = options59.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser74 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options75 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option77 = org.apache.commons.cli.OptionBuilder.create('4');
        option77.setDescription("""");
        org.apache.commons.cli.Options options80 = options75.addOption(option77);
        org.apache.commons.cli.CommandLine commandLine81 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray83 = commandLine81.getOptionValues(""hi!"");
        java.lang.String[] strArray84 = commandLine81.getArgs();
        java.util.Properties properties85 = null;
        org.apache.commons.cli.CommandLine commandLine86 = posixParser74.parse(options75, strArray84, properties85);
        java.util.Properties properties87 = null;
        org.apache.commons.cli.CommandLine commandLine89 = posixParser37.parse(options59, strArray84, properties87, true);
        java.util.Properties properties90 = null;
        org.apache.commons.cli.CommandLine commandLine92 = posixParser0.parse(options35, strArray84, properties90, true);
        java.lang.String[] strArray94 = commandLine92.getOptionValues('4');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(option29);
        org.junit.Assert.assertTrue(""'"" + boolean34 + ""' != '"" + true + ""'"", boolean34 == true);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertNotNull(collection36);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNotNull(option47);
        org.junit.Assert.assertNotNull(options50);
        org.junit.Assert.assertNull(strArray53);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(commandLine56);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertNotNull(option61);
        org.junit.Assert.assertNull(optionGroup62);
        org.junit.Assert.assertNotNull(option64);
        org.junit.Assert.assertTrue(""'"" + char65 + ""' != '"" + '\000' + ""'"", char65 == '\000');
        org.junit.Assert.assertNotNull(option67);
        org.junit.Assert.assertNull(optionGroup71);
        org.junit.Assert.assertTrue(""'"" + boolean73 + ""' != '"" + false + ""'"", boolean73 == false);
        org.junit.Assert.assertNotNull(option77);
        org.junit.Assert.assertNotNull(options80);
        org.junit.Assert.assertNull(strArray83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(commandLine86);
        org.junit.Assert.assertNotNull(commandLine89);
        org.junit.Assert.assertNotNull(commandLine92);
        org.junit.Assert.assertNull(strArray94);"
91,155,7418,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0156"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option6.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken(""org.apache.commons.cli.MissingOptionException: hi!"", false);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create('4');
        option41.setDescription("""");
        org.apache.commons.cli.Options options44 = options39.addOption(option41);
        java.util.Collection collection45 = options39.getOptionGroups();
        org.apache.commons.cli.Options options49 = options39.addOption("""", false, ""arg"");
        org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create('4');
        boolean boolean52 = option51.hasOptionalArg();
        org.apache.commons.cli.Options options53 = options39.addOption(option51);
        org.apache.commons.cli.PosixParser posixParser54 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = org.apache.commons.cli.OptionBuilder.create('4');
        option57.setDescription("""");
        org.apache.commons.cli.Options options60 = options55.addOption(option57);
        org.apache.commons.cli.PosixParser posixParser61 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options62 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option64 = org.apache.commons.cli.OptionBuilder.create('4');
        option64.setDescription("""");
        org.apache.commons.cli.Options options67 = options62.addOption(option64);
        org.apache.commons.cli.CommandLine commandLine68 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray70 = commandLine68.getOptionValues(""hi!"");
        java.lang.String[] strArray71 = commandLine68.getArgs();
        java.util.Properties properties72 = null;
        org.apache.commons.cli.CommandLine commandLine73 = posixParser61.parse(options62, strArray71, properties72);
        org.apache.commons.cli.CommandLine commandLine75 = posixParser54.parse(options60, strArray71, false);
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options53, strArray71);
        org.apache.commons.cli.Options options77 = null;
        org.apache.commons.cli.CommandLine commandLine78 = new org.apache.commons.cli.CommandLine();
        java.util.Iterator iterator79 = commandLine78.iterator();
        boolean boolean81 = commandLine78.hasOption(""[ option: 4  :: [ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ] ::  ]"");
        java.lang.String str83 = commandLine78.getOptionValue('=');
        java.lang.String[] strArray84 = commandLine78.getArgs();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.CommandLine commandLine86 = posixParser0.parse(options77, strArray84, true);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue(""'"" + char7 + ""' != '"" + '\000' + ""'"", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNotNull(collection45);
        org.junit.Assert.assertNotNull(options49);
        org.junit.Assert.assertNotNull(option51);
        org.junit.Assert.assertTrue(""'"" + boolean52 + ""' != '"" + false + ""'"", boolean52 == false);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(option64);
        org.junit.Assert.assertNotNull(options67);
        org.junit.Assert.assertNull(strArray70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(commandLine73);
        org.junit.Assert.assertNotNull(commandLine75);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(iterator79);
        org.junit.Assert.assertTrue(""'"" + boolean81 + ""' != '"" + false + ""'"", boolean81 == false);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(strArray84);"
92,143,7236,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0144"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine8 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine8.getOptionValues(""hi!"");
        java.lang.String str13 = commandLine8.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str15 = commandLine8.getOptionValue(""arg"");
        java.lang.String[] strArray16 = commandLine8.getArgs();
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser0.parse(options1, strArray16, properties17);
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option22 = org.apache.commons.cli.OptionBuilder.create('4');
        option22.setDescription("""");
        org.apache.commons.cli.Options options25 = options20.addOption(option22);
        org.apache.commons.cli.CommandLine commandLine26 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray28 = commandLine26.getOptionValues(""hi!"");
        java.lang.String[] strArray29 = commandLine26.getArgs();
        java.util.Properties properties30 = null;
        org.apache.commons.cli.CommandLine commandLine31 = posixParser19.parse(options20, strArray29, properties30);
        org.apache.commons.cli.PosixParser posixParser32 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options33 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option35 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup36 = options33.getOptionGroup(option35);
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create('4');
        char char39 = option38.getValueSeparator();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create('4');
        option41.setDescription("""");
        option38.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup45 = options33.getOptionGroup(option38);
        boolean boolean47 = options33.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser48 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create('4');
        option51.setDescription("""");
        org.apache.commons.cli.Options options54 = options49.addOption(option51);
        org.apache.commons.cli.CommandLine commandLine55 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray57 = commandLine55.getOptionValues(""hi!"");
        java.lang.String str60 = commandLine55.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str62 = commandLine55.getOptionValue(""arg"");
        java.lang.String[] strArray63 = commandLine55.getArgs();
        java.lang.String[] strArray65 = posixParser48.flatten(options54, strArray63, false);
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser32.parse(options33, strArray65, properties66);
        java.util.List list68 = commandLine67.getArgList();
        java.lang.String[] strArray69 = commandLine67.getArgs();
        java.lang.String[] strArray71 = posixParser0.flatten(options20, strArray69, false);
        org.apache.commons.cli.Options options76 = options20.addOption("""", ""[ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ]"", true, ""org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options81 = options76.addOption(""org.apache.commons.cli.MissingArgumentException: [ option: 4  ::  ]"", ""[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]"", false, ""[ option:    :: null :: arg ]"");
            org.junit.Assert.fail(""Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '.'"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertEquals(""'"" + str13 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str13, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(option22);
        org.junit.Assert.assertNotNull(options25);
        org.junit.Assert.assertNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(option35);
        org.junit.Assert.assertNull(optionGroup36);
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertTrue(""'"" + char39 + ""' != '"" + '\000' + ""'"", char39 == '\000');
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup45);
        org.junit.Assert.assertTrue(""'"" + boolean47 + ""' != '"" + false + ""'"", boolean47 == false);
        org.junit.Assert.assertNotNull(option51);
        org.junit.Assert.assertNotNull(options54);
        org.junit.Assert.assertNull(strArray57);
        org.junit.Assert.assertEquals(""'"" + str60 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str60, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(list68);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(options76);"
93,231,7652,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0232"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("""");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("""");
        option26.setLongOpt(""hi!"");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues(""hi!"");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("""");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        org.apache.commons.cli.Options options50 = options40.addOption("""", false, ""arg"");
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup54 = options51.getOptionGroup(option53);
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        char char57 = option56.getValueSeparator();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        option59.setDescription("""");
        option56.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup63 = options51.getOptionGroup(option56);
        boolean boolean64 = option56.hasArgName();
        org.apache.commons.cli.Options options65 = options40.addOption(option56);
        org.apache.commons.cli.CommandLine commandLine66 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray68 = commandLine66.getOptionValues(""hi!"");
        java.lang.String str71 = commandLine66.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str73 = commandLine66.getOptionValue(""arg"");
        java.lang.String[] strArray74 = commandLine66.getArgs();
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options40, strArray74, properties75);
        org.apache.commons.cli.Options options77 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option79 = org.apache.commons.cli.OptionBuilder.create('4');
        char char80 = option79.getValueSeparator();
        org.apache.commons.cli.Option option82 = org.apache.commons.cli.OptionBuilder.create('4');
        option82.setDescription("""");
        option79.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup86 = options77.getOptionGroup(option79);
        java.lang.String[] strArray89 = new java.lang.String[] { ""4"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" };
        java.util.Properties properties90 = null;
        org.apache.commons.cli.CommandLine commandLine91 = posixParser0.parse(options77, strArray89, properties90);
        org.apache.commons.cli.Option option93 = options77.getOption(""[ option: 4  :: null :: [ option:   [ option: 4  ::  ]  :: null ] ]"");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue(""'"" + boolean31 + ""' != '"" + true + ""'"", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNotNull(options50);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertTrue(""'"" + char57 + ""' != '"" + '\000' + ""'"", char57 == '\000');
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNull(optionGroup63);
        org.junit.Assert.assertTrue(""'"" + boolean64 + ""' != '"" + true + ""'"", boolean64 == true);
        org.junit.Assert.assertNotNull(options65);
        org.junit.Assert.assertNull(strArray68);
        org.junit.Assert.assertEquals(""'"" + str71 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str71, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(option79);
        org.junit.Assert.assertTrue(""'"" + char80 + ""' != '"" + '\000' + ""'"", char80 == '\000');
        org.junit.Assert.assertNotNull(option82);
        org.junit.Assert.assertNull(optionGroup86);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(commandLine91);
        org.junit.Assert.assertNull(option93);"
94,372,7559,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0373"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option39 = org.apache.commons.cli.OptionBuilder.create('4');
        option39.setDescription("""");
        org.apache.commons.cli.Options options42 = options37.addOption(option39);
        option39.setArgs((int) '\000');
        org.apache.commons.cli.Options options45 = options22.addOption(option39);
        org.apache.commons.cli.PosixParser posixParser46 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option49 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup50 = options47.getOptionGroup(option49);
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        char char53 = option52.getValueSeparator();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("""");
        option52.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup59 = options47.getOptionGroup(option52);
        boolean boolean61 = options47.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser62 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options63 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option65 = org.apache.commons.cli.OptionBuilder.create('4');
        option65.setDescription("""");
        org.apache.commons.cli.Options options68 = options63.addOption(option65);
        org.apache.commons.cli.CommandLine commandLine69 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray71 = commandLine69.getOptionValues(""hi!"");
        java.lang.String str74 = commandLine69.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str76 = commandLine69.getOptionValue(""arg"");
        java.lang.String[] strArray77 = commandLine69.getArgs();
        java.lang.String[] strArray79 = posixParser62.flatten(options68, strArray77, false);
        java.util.Properties properties80 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser46.parse(options47, strArray79, properties80);
        java.util.List list82 = commandLine81.getArgList();
        java.lang.String[] strArray83 = commandLine81.getArgs();
        java.lang.String[] strArray84 = commandLine81.getArgs();
        java.util.Properties properties85 = null;
        org.apache.commons.cli.CommandLine commandLine86 = posixParser0.parse(options22, strArray84, properties85);
        java.lang.String str89 = commandLine86.getOptionValue("""", ""[ option:    :: null :: arg ]"");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue(""'"" + boolean36 + ""' != '"" + false + ""'"", boolean36 == false);
        org.junit.Assert.assertNotNull(option39);
        org.junit.Assert.assertNotNull(options42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(option49);
        org.junit.Assert.assertNull(optionGroup50);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertTrue(""'"" + char53 + ""' != '"" + '\000' + ""'"", char53 == '\000');
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNull(optionGroup59);
        org.junit.Assert.assertTrue(""'"" + boolean61 + ""' != '"" + false + ""'"", boolean61 == false);
        org.junit.Assert.assertNotNull(option65);
        org.junit.Assert.assertNotNull(options68);
        org.junit.Assert.assertNull(strArray71);
        org.junit.Assert.assertEquals(""'"" + str74 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str74, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(list82);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(commandLine86);
        org.junit.Assert.assertEquals(""'"" + str89 + ""' != '"" + ""[ option:    :: null :: arg ]"" + ""'"", str89, ""[ option:    :: null :: arg ]"");"
95,135,7211,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0136"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine8 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine8.getOptionValues(""hi!"");
        java.lang.String str13 = commandLine8.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str15 = commandLine8.getOptionValue(""arg"");
        java.lang.String[] strArray16 = commandLine8.getArgs();
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser0.parse(options1, strArray16, properties17);
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option22 = org.apache.commons.cli.OptionBuilder.create('4');
        option22.setDescription("""");
        org.apache.commons.cli.Options options25 = options20.addOption(option22);
        org.apache.commons.cli.CommandLine commandLine26 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray28 = commandLine26.getOptionValues(""hi!"");
        java.lang.String[] strArray29 = commandLine26.getArgs();
        java.util.Properties properties30 = null;
        org.apache.commons.cli.CommandLine commandLine31 = posixParser19.parse(options20, strArray29, properties30);
        org.apache.commons.cli.PosixParser posixParser32 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options33 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option35 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup36 = options33.getOptionGroup(option35);
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create('4');
        char char39 = option38.getValueSeparator();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create('4');
        option41.setDescription("""");
        option38.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup45 = options33.getOptionGroup(option38);
        boolean boolean47 = options33.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser48 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create('4');
        option51.setDescription("""");
        org.apache.commons.cli.Options options54 = options49.addOption(option51);
        org.apache.commons.cli.CommandLine commandLine55 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray57 = commandLine55.getOptionValues(""hi!"");
        java.lang.String str60 = commandLine55.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str62 = commandLine55.getOptionValue(""arg"");
        java.lang.String[] strArray63 = commandLine55.getArgs();
        java.lang.String[] strArray65 = posixParser48.flatten(options54, strArray63, false);
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser32.parse(options33, strArray65, properties66);
        java.util.List list68 = commandLine67.getArgList();
        java.lang.String[] strArray69 = commandLine67.getArgs();
        java.lang.String[] strArray71 = posixParser0.flatten(options20, strArray69, false);
        org.apache.commons.cli.CommandLine commandLine72 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray74 = commandLine72.getOptionValues(""hi!"");
        java.lang.String[] strArray75 = commandLine72.getArgs();
        java.lang.String str77 = commandLine72.getOptionValue(""hi!"");
        org.apache.commons.cli.Option option79 = org.apache.commons.cli.OptionBuilder.create(' ');
        commandLine72.addOption(option79);
        org.apache.commons.cli.OptionGroup optionGroup81 = options20.getOptionGroup(option79);
        java.lang.String str82 = option79.getDescription();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertEquals(""'"" + str13 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str13, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(option22);
        org.junit.Assert.assertNotNull(options25);
        org.junit.Assert.assertNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(option35);
        org.junit.Assert.assertNull(optionGroup36);
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertTrue(""'"" + char39 + ""' != '"" + '\000' + ""'"", char39 == '\000');
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup45);
        org.junit.Assert.assertTrue(""'"" + boolean47 + ""' != '"" + false + ""'"", boolean47 == false);
        org.junit.Assert.assertNotNull(option51);
        org.junit.Assert.assertNotNull(options54);
        org.junit.Assert.assertNull(strArray57);
        org.junit.Assert.assertEquals(""'"" + str60 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str60, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(list68);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNull(strArray74);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(option79);
        org.junit.Assert.assertNull(optionGroup81);
        org.junit.Assert.assertNull(str82);"
96,42,7632,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0043"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("""");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("""");
        option26.setLongOpt(""hi!"");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues(""hi!"");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("""");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        org.apache.commons.cli.Options options50 = options40.addOption("""", false, ""arg"");
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup54 = options51.getOptionGroup(option53);
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        char char57 = option56.getValueSeparator();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        option59.setDescription("""");
        option56.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup63 = options51.getOptionGroup(option56);
        boolean boolean64 = option56.hasArgName();
        org.apache.commons.cli.Options options65 = options40.addOption(option56);
        org.apache.commons.cli.CommandLine commandLine66 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray68 = commandLine66.getOptionValues(""hi!"");
        java.lang.String str71 = commandLine66.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str73 = commandLine66.getOptionValue(""arg"");
        java.lang.String[] strArray74 = commandLine66.getArgs();
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options40, strArray74, properties75);
        org.apache.commons.cli.Options options77 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option79 = org.apache.commons.cli.OptionBuilder.create('4');
        char char80 = option79.getValueSeparator();
        org.apache.commons.cli.Option option82 = org.apache.commons.cli.OptionBuilder.create('4');
        option82.setDescription("""");
        option79.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup86 = options77.getOptionGroup(option79);
        java.lang.String[] strArray89 = new java.lang.String[] { ""4"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" };
        java.util.Properties properties90 = null;
        org.apache.commons.cli.CommandLine commandLine91 = posixParser0.parse(options77, strArray89, properties90);
        posixParser0.burstToken("""", true);
        posixParser0.burstToken(""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"", true);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue(""'"" + boolean31 + ""' != '"" + true + ""'"", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNotNull(options50);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertTrue(""'"" + char57 + ""' != '"" + '\000' + ""'"", char57 == '\000');
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNull(optionGroup63);
        org.junit.Assert.assertTrue(""'"" + boolean64 + ""' != '"" + true + ""'"", boolean64 == true);
        org.junit.Assert.assertNotNull(options65);
        org.junit.Assert.assertNull(strArray68);
        org.junit.Assert.assertEquals(""'"" + str71 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str71, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(option79);
        org.junit.Assert.assertTrue(""'"" + char80 + ""' != '"" + '\000' + ""'"", char80 == '\000');
        org.junit.Assert.assertNotNull(option82);
        org.junit.Assert.assertNull(optionGroup86);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(commandLine91);"
97,284,7464,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0285"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("""");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("""");
        option26.setLongOpt(""hi!"");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues(""hi!"");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        posixParser0.burstToken(""4"", false);
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setDescription("""");
        org.apache.commons.cli.Options options48 = options43.addOption(option45);
        java.util.Collection collection49 = options43.getOptionGroups();
        org.apache.commons.cli.Options options53 = options43.addOption("""", false, ""arg"");
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        boolean boolean56 = option55.hasOptionalArg();
        org.apache.commons.cli.Options options57 = options43.addOption(option55);
        boolean boolean59 = options43.hasOption("""");
        org.apache.commons.cli.PosixParser posixParser60 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options61 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option63 = org.apache.commons.cli.OptionBuilder.create('4');
        option63.setDescription("""");
        org.apache.commons.cli.Options options66 = options61.addOption(option63);
        org.apache.commons.cli.CommandLine commandLine67 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray69 = commandLine67.getOptionValues(""hi!"");
        java.lang.String str72 = commandLine67.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str74 = commandLine67.getOptionValue(""arg"");
        java.lang.String[] strArray75 = commandLine67.getArgs();
        java.lang.String[] strArray77 = posixParser60.flatten(options66, strArray75, false);
        org.apache.commons.cli.CommandLine commandLine79 = posixParser0.parse(options43, strArray75, false);
        org.apache.commons.cli.Options options80 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option82 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup83 = options80.getOptionGroup(option82);
        boolean boolean84 = option82.hasLongOpt();
        boolean boolean85 = option82.isRequired();
        java.util.List list86 = option82.getValuesList();
        java.lang.String str87 = option82.getLongOpt();
        java.util.ListIterator listIterator88 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option82, listIterator88);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue(""'"" + boolean31 + ""' != '"" + true + ""'"", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(collection49);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertTrue(""'"" + boolean56 + ""' != '"" + false + ""'"", boolean56 == false);
        org.junit.Assert.assertNotNull(options57);
        org.junit.Assert.assertTrue(""'"" + boolean59 + ""' != '"" + true + ""'"", boolean59 == true);
        org.junit.Assert.assertNotNull(option63);
        org.junit.Assert.assertNotNull(options66);
        org.junit.Assert.assertNull(strArray69);
        org.junit.Assert.assertEquals(""'"" + str72 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str72, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(commandLine79);
        org.junit.Assert.assertNotNull(option82);
        org.junit.Assert.assertNull(optionGroup83);
        org.junit.Assert.assertTrue(""'"" + boolean84 + ""' != '"" + false + ""'"", boolean84 == false);
        org.junit.Assert.assertTrue(""'"" + boolean85 + ""' != '"" + false + ""'"", boolean85 == false);
        org.junit.Assert.assertNotNull(list86);
        org.junit.Assert.assertNull(str87);"
98,63,7658,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0064"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues(""hi!"");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.PosixParser posixParser53 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        option56.setDescription("""");
        org.apache.commons.cli.Options options59 = options54.addOption(option56);
        org.apache.commons.cli.CommandLine commandLine60 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray62 = commandLine60.getOptionValues(""hi!"");
        java.lang.String str65 = commandLine60.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str67 = commandLine60.getOptionValue(""arg"");
        java.lang.String[] strArray68 = commandLine60.getArgs();
        java.lang.String[] strArray70 = posixParser53.flatten(options59, strArray68, false);
        org.apache.commons.cli.PosixParser posixParser71 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options72 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option74 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup75 = options72.getOptionGroup(option74);
        org.apache.commons.cli.CommandLine commandLine76 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray78 = commandLine76.getOptionValues(""hi!"");
        java.lang.String str81 = commandLine76.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str83 = commandLine76.getOptionValue(""arg"");
        java.lang.String[] strArray84 = commandLine76.getArgs();
        java.lang.String[] strArray86 = posixParser71.flatten(options72, strArray84, true);
        org.apache.commons.cli.CommandLine commandLine88 = posixParser0.parse(options59, strArray84, false);
        java.lang.String[] strArray90 = commandLine88.getOptionValues('a');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue(""'"" + boolean36 + ""' != '"" + false + ""'"", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNull(strArray62);
        org.junit.Assert.assertEquals(""'"" + str65 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str65, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(option74);
        org.junit.Assert.assertNull(optionGroup75);
        org.junit.Assert.assertNull(strArray78);
        org.junit.Assert.assertEquals(""'"" + str81 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str81, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(commandLine88);
        org.junit.Assert.assertNull(strArray90);"
99,166,7589,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0167"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("""");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("""");
        option26.setLongOpt(""hi!"");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues(""hi!"");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("""");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        org.apache.commons.cli.Options options50 = options40.addOption("""", false, ""arg"");
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup54 = options51.getOptionGroup(option53);
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        char char57 = option56.getValueSeparator();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        option59.setDescription("""");
        option56.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup63 = options51.getOptionGroup(option56);
        boolean boolean64 = option56.hasArgName();
        org.apache.commons.cli.Options options65 = options40.addOption(option56);
        org.apache.commons.cli.CommandLine commandLine66 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray68 = commandLine66.getOptionValues(""hi!"");
        java.lang.String str71 = commandLine66.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str73 = commandLine66.getOptionValue(""arg"");
        java.lang.String[] strArray74 = commandLine66.getArgs();
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options40, strArray74, properties75);
        org.apache.commons.cli.Options options77 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option79 = org.apache.commons.cli.OptionBuilder.create('4');
        char char80 = option79.getValueSeparator();
        org.apache.commons.cli.Option option82 = org.apache.commons.cli.OptionBuilder.create('4');
        option82.setDescription("""");
        option79.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup86 = options77.getOptionGroup(option79);
        java.lang.String[] strArray89 = new java.lang.String[] { ""4"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" };
        java.util.Properties properties90 = null;
        org.apache.commons.cli.CommandLine commandLine91 = posixParser0.parse(options77, strArray89, properties90);
        commandLine91.addArg(""[ option: 4  :: null ]"");
        commandLine91.addArg(""[ Options: [ short {} ] [ long {} ]"");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue(""'"" + boolean31 + ""' != '"" + true + ""'"", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNotNull(options50);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertTrue(""'"" + char57 + ""' != '"" + '\000' + ""'"", char57 == '\000');
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNull(optionGroup63);
        org.junit.Assert.assertTrue(""'"" + boolean64 + ""' != '"" + true + ""'"", boolean64 == true);
        org.junit.Assert.assertNotNull(options65);
        org.junit.Assert.assertNull(strArray68);
        org.junit.Assert.assertEquals(""'"" + str71 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str71, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(option79);
        org.junit.Assert.assertTrue(""'"" + char80 + ""' != '"" + '\000' + ""'"", char80 == '\000');
        org.junit.Assert.assertNotNull(option82);
        org.junit.Assert.assertNull(optionGroup86);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(commandLine91);"
100,332,7197,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0333"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptions();
        boolean boolean9 = options1.hasOption(""arg"");
        java.lang.String[] strArray12 = new java.lang.String[] { ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"", ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"" };
        org.apache.commons.cli.CommandLine commandLine13 = posixParser0.parse(options1, strArray12);
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = org.apache.commons.cli.OptionBuilder.create('4');
        option16.setDescription("""");
        org.apache.commons.cli.Options options19 = options14.addOption(option16);
        java.util.Collection collection20 = options14.getOptionGroups();
        org.apache.commons.cli.Options options24 = options14.addOption("""", false, ""arg"");
        java.util.List list25 = options24.getRequiredOptions();
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create(""arg"");
        org.apache.commons.cli.Options options28 = options24.addOption(option27);
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setArgs((int) (short) 100);
        option30.setArgName(""[ option: 4  :: null ]"");
        java.lang.String str35 = option30.getLongOpt();
        java.lang.String str37 = option30.getValue((int) (short) -1);
        org.apache.commons.cli.Options options38 = options28.addOption(option30);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup42 = options39.getOptionGroup(option41);
        boolean boolean43 = option41.hasLongOpt();
        boolean boolean44 = option41.isRequired();
        java.util.List list45 = option41.getValuesList();
        option41.setDescription(""[ option: 4  ::  ]"");
        org.apache.commons.cli.Options options48 = options38.addOption(option41);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        option52.setDescription("""");
        org.apache.commons.cli.Options options55 = options50.addOption(option52);
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray58 = commandLine56.getOptionValues(""hi!"");
        java.lang.String str61 = commandLine56.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str63 = commandLine56.getOptionValue(""arg"");
        java.lang.String[] strArray64 = commandLine56.getArgs();
        java.lang.String[] strArray66 = posixParser49.flatten(options55, strArray64, false);
        org.apache.commons.cli.CommandLine commandLine68 = posixParser0.parse(options38, strArray64, true);
        org.apache.commons.cli.Option option70 = org.apache.commons.cli.OptionBuilder.create('4');
        char char71 = option70.getValueSeparator();
        org.apache.commons.cli.Option option73 = org.apache.commons.cli.OptionBuilder.create('4');
        option73.setDescription("""");
        option70.setType((java.lang.Object) """");
        boolean boolean77 = option70.isRequired();
        option70.setDescription("""");
        boolean boolean80 = option70.hasLongOpt();
        org.apache.commons.cli.Options options81 = options38.addOption(option70);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options85 = options38.addOption(""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"", false, ""org.apache.commons.cli.MissingOptionException: hi!"");
            org.junit.Assert.fail(""Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertTrue(""'"" + boolean9 + ""' != '"" + false + ""'"", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine13);
        org.junit.Assert.assertNotNull(option16);
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertNotNull(collection20);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertTrue(""'"" + boolean43 + ""' != '"" + false + ""'"", boolean43 == false);
        org.junit.Assert.assertTrue(""'"" + boolean44 + ""' != '"" + false + ""'"", boolean44 == false);
        org.junit.Assert.assertNotNull(list45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNull(strArray58);
        org.junit.Assert.assertEquals(""'"" + str61 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str61, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertNotNull(option70);
        org.junit.Assert.assertTrue(""'"" + char71 + ""' != '"" + '\000' + ""'"", char71 == '\000');
        org.junit.Assert.assertNotNull(option73);
        org.junit.Assert.assertTrue(""'"" + boolean77 + ""' != '"" + false + ""'"", boolean77 == false);
        org.junit.Assert.assertTrue(""'"" + boolean80 + ""' != '"" + false + ""'"", boolean80 == false);
        org.junit.Assert.assertNotNull(options81);"
101,303,7562,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0304"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("""");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("""");
        option26.setLongOpt(""hi!"");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues(""hi!"");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("""");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        org.apache.commons.cli.Options options50 = options40.addOption("""", false, ""arg"");
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup54 = options51.getOptionGroup(option53);
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        char char57 = option56.getValueSeparator();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        option59.setDescription("""");
        option56.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup63 = options51.getOptionGroup(option56);
        boolean boolean64 = option56.hasArgName();
        org.apache.commons.cli.Options options65 = options40.addOption(option56);
        org.apache.commons.cli.CommandLine commandLine66 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray68 = commandLine66.getOptionValues(""hi!"");
        java.lang.String str71 = commandLine66.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str73 = commandLine66.getOptionValue(""arg"");
        java.lang.String[] strArray74 = commandLine66.getArgs();
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options40, strArray74, properties75);
        org.apache.commons.cli.Options options77 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option79 = org.apache.commons.cli.OptionBuilder.create('4');
        char char80 = option79.getValueSeparator();
        org.apache.commons.cli.Option option82 = org.apache.commons.cli.OptionBuilder.create('4');
        option82.setDescription("""");
        option79.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup86 = options77.getOptionGroup(option79);
        java.lang.String[] strArray89 = new java.lang.String[] { ""4"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" };
        java.util.Properties properties90 = null;
        org.apache.commons.cli.CommandLine commandLine91 = posixParser0.parse(options77, strArray89, properties90);
        posixParser0.burstToken(""org.apache.commons.cli.UnrecognizedOptionException: hi!"", true);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue(""'"" + boolean31 + ""' != '"" + true + ""'"", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNotNull(options50);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertTrue(""'"" + char57 + ""' != '"" + '\000' + ""'"", char57 == '\000');
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNull(optionGroup63);
        org.junit.Assert.assertTrue(""'"" + boolean64 + ""' != '"" + true + ""'"", boolean64 == true);
        org.junit.Assert.assertNotNull(options65);
        org.junit.Assert.assertNull(strArray68);
        org.junit.Assert.assertEquals(""'"" + str71 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str71, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(option79);
        org.junit.Assert.assertTrue(""'"" + char80 + ""' != '"" + '\000' + ""'"", char80 == '\000');
        org.junit.Assert.assertNotNull(option82);
        org.junit.Assert.assertNull(optionGroup86);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(commandLine91);"
102,37,7551,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0038"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("""");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("""");
        option26.setLongOpt(""hi!"");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues(""hi!"");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("""");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        org.apache.commons.cli.Options options50 = options40.addOption("""", false, ""arg"");
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup54 = options51.getOptionGroup(option53);
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        char char57 = option56.getValueSeparator();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        option59.setDescription("""");
        option56.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup63 = options51.getOptionGroup(option56);
        boolean boolean64 = option56.hasArgName();
        org.apache.commons.cli.Options options65 = options40.addOption(option56);
        org.apache.commons.cli.CommandLine commandLine66 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray68 = commandLine66.getOptionValues(""hi!"");
        java.lang.String str71 = commandLine66.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str73 = commandLine66.getOptionValue(""arg"");
        java.lang.String[] strArray74 = commandLine66.getArgs();
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options40, strArray74, properties75);
        org.apache.commons.cli.Options options77 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option79 = org.apache.commons.cli.OptionBuilder.create('4');
        char char80 = option79.getValueSeparator();
        org.apache.commons.cli.Option option82 = org.apache.commons.cli.OptionBuilder.create('4');
        option82.setDescription("""");
        option79.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup86 = options77.getOptionGroup(option79);
        java.lang.String[] strArray89 = new java.lang.String[] { ""4"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" };
        java.util.Properties properties90 = null;
        org.apache.commons.cli.CommandLine commandLine91 = posixParser0.parse(options77, strArray89, properties90);
        posixParser0.burstToken("""", true);
        posixParser0.burstToken("""", false);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue(""'"" + boolean31 + ""' != '"" + true + ""'"", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNotNull(options50);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertTrue(""'"" + char57 + ""' != '"" + '\000' + ""'"", char57 == '\000');
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNull(optionGroup63);
        org.junit.Assert.assertTrue(""'"" + boolean64 + ""' != '"" + true + ""'"", boolean64 == true);
        org.junit.Assert.assertNotNull(options65);
        org.junit.Assert.assertNull(strArray68);
        org.junit.Assert.assertEquals(""'"" + str71 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str71, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(option79);
        org.junit.Assert.assertTrue(""'"" + char80 + ""' != '"" + '\000' + ""'"", char80 == '\000');
        org.junit.Assert.assertNotNull(option82);
        org.junit.Assert.assertNull(optionGroup86);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(commandLine91);"
103,4,7521,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0005"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("""");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("""");
        option26.setLongOpt(""hi!"");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues(""hi!"");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("""");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        org.apache.commons.cli.Options options50 = options40.addOption("""", false, ""arg"");
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup54 = options51.getOptionGroup(option53);
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        char char57 = option56.getValueSeparator();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        option59.setDescription("""");
        option56.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup63 = options51.getOptionGroup(option56);
        boolean boolean64 = option56.hasArgName();
        org.apache.commons.cli.Options options65 = options40.addOption(option56);
        org.apache.commons.cli.CommandLine commandLine66 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray68 = commandLine66.getOptionValues(""hi!"");
        java.lang.String str71 = commandLine66.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str73 = commandLine66.getOptionValue(""arg"");
        java.lang.String[] strArray74 = commandLine66.getArgs();
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options40, strArray74, properties75);
        posixParser0.burstToken(""[ option: 4  :: null ]"", true);
        org.apache.commons.cli.Options options80 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option82 = org.apache.commons.cli.OptionBuilder.create('4');
        char char83 = option82.getValueSeparator();
        org.apache.commons.cli.Option option85 = org.apache.commons.cli.OptionBuilder.create('4');
        option85.setDescription("""");
        option82.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup89 = options80.getOptionGroup(option82);
        java.util.ListIterator listIterator90 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option82, listIterator90);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue(""'"" + boolean31 + ""' != '"" + true + ""'"", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNotNull(options50);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertTrue(""'"" + char57 + ""' != '"" + '\000' + ""'"", char57 == '\000');
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNull(optionGroup63);
        org.junit.Assert.assertTrue(""'"" + boolean64 + ""' != '"" + true + ""'"", boolean64 == true);
        org.junit.Assert.assertNotNull(options65);
        org.junit.Assert.assertNull(strArray68);
        org.junit.Assert.assertEquals(""'"" + str71 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str71, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(option82);
        org.junit.Assert.assertTrue(""'"" + char83 + ""' != '"" + '\000' + ""'"", char83 == '\000');
        org.junit.Assert.assertNotNull(option85);
        org.junit.Assert.assertNull(optionGroup89);"
104,258,7179,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0259"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptions();
        boolean boolean9 = options1.hasOption(""arg"");
        java.lang.String[] strArray12 = new java.lang.String[] { ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"", ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"" };
        org.apache.commons.cli.CommandLine commandLine13 = posixParser0.parse(options1, strArray12);
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = org.apache.commons.cli.OptionBuilder.create('4');
        option16.setDescription("""");
        org.apache.commons.cli.Options options19 = options14.addOption(option16);
        java.util.Collection collection20 = options14.getOptionGroups();
        org.apache.commons.cli.Options options24 = options14.addOption("""", false, ""arg"");
        java.util.List list25 = options24.getRequiredOptions();
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create(""arg"");
        org.apache.commons.cli.Options options28 = options24.addOption(option27);
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setArgs((int) (short) 100);
        option30.setArgName(""[ option: 4  :: null ]"");
        java.lang.String str35 = option30.getLongOpt();
        java.lang.String str37 = option30.getValue((int) (short) -1);
        org.apache.commons.cli.Options options38 = options28.addOption(option30);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup42 = options39.getOptionGroup(option41);
        boolean boolean43 = option41.hasLongOpt();
        boolean boolean44 = option41.isRequired();
        java.util.List list45 = option41.getValuesList();
        option41.setDescription(""[ option: 4  ::  ]"");
        org.apache.commons.cli.Options options48 = options38.addOption(option41);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        option52.setDescription("""");
        org.apache.commons.cli.Options options55 = options50.addOption(option52);
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray58 = commandLine56.getOptionValues(""hi!"");
        java.lang.String str61 = commandLine56.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str63 = commandLine56.getOptionValue(""arg"");
        java.lang.String[] strArray64 = commandLine56.getArgs();
        java.lang.String[] strArray66 = posixParser49.flatten(options55, strArray64, false);
        org.apache.commons.cli.CommandLine commandLine68 = posixParser0.parse(options38, strArray64, true);
        org.apache.commons.cli.OptionBuilder optionBuilder69 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options38);
        java.lang.String str70 = options38.toString();
        java.lang.String str71 = options38.toString();
        org.apache.commons.cli.OptionGroup optionGroup72 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options73 = options38.addOptionGroup(optionGroup72);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertTrue(""'"" + boolean9 + ""' != '"" + false + ""'"", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine13);
        org.junit.Assert.assertNotNull(option16);
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertNotNull(collection20);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertTrue(""'"" + boolean43 + ""' != '"" + false + ""'"", boolean43 == false);
        org.junit.Assert.assertTrue(""'"" + boolean44 + ""' != '"" + false + ""'"", boolean44 == false);
        org.junit.Assert.assertNotNull(list45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNull(strArray58);
        org.junit.Assert.assertEquals(""'"" + str61 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str61, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertNotNull(optionBuilder69);
        org.junit.Assert.assertEquals(""'"" + str70 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]"" + ""'"", str70, ""[ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]"");
        org.junit.Assert.assertEquals(""'"" + str71 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]"" + ""'"", str71, ""[ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]"");"
105,248,7602,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0249"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues(""hi!"");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("""");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptionGroups();
        org.apache.commons.cli.Option option61 = org.apache.commons.cli.OptionBuilder.create('4');
        option61.setDescription("""");
        option61.setLongOpt(""hi!"");
        boolean boolean66 = option61.hasArgName();
        org.apache.commons.cli.Options options67 = options53.addOption(option61);
        org.apache.commons.cli.PosixParser posixParser68 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options69 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option71 = org.apache.commons.cli.OptionBuilder.create('4');
        option71.setDescription("""");
        org.apache.commons.cli.Options options74 = options69.addOption(option71);
        org.apache.commons.cli.CommandLine commandLine75 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray77 = commandLine75.getOptionValues(""hi!"");
        java.lang.String str80 = commandLine75.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str82 = commandLine75.getOptionValue(""arg"");
        java.lang.String[] strArray83 = commandLine75.getArgs();
        java.lang.String[] strArray85 = posixParser68.flatten(options74, strArray83, false);
        org.apache.commons.cli.CommandLine commandLine86 = posixParser0.parse(options53, strArray85);
        posixParser0.burstToken(""hi!"", true);
        org.apache.commons.cli.Option option90 = null;
        java.util.ListIterator listIterator91 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option90, listIterator91);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue(""'"" + boolean36 + ""' != '"" + false + ""'"", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(option61);
        org.junit.Assert.assertTrue(""'"" + boolean66 + ""' != '"" + true + ""'"", boolean66 == true);
        org.junit.Assert.assertNotNull(options67);
        org.junit.Assert.assertNotNull(option71);
        org.junit.Assert.assertNotNull(options74);
        org.junit.Assert.assertNull(strArray77);
        org.junit.Assert.assertEquals(""'"" + str80 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str80, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(commandLine86);"
106,38,7597,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0039"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues(""hi!"");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("""");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptionGroups();
        org.apache.commons.cli.Option option61 = org.apache.commons.cli.OptionBuilder.create('4');
        option61.setDescription("""");
        option61.setLongOpt(""hi!"");
        boolean boolean66 = option61.hasArgName();
        org.apache.commons.cli.Options options67 = options53.addOption(option61);
        org.apache.commons.cli.PosixParser posixParser68 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options69 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option71 = org.apache.commons.cli.OptionBuilder.create('4');
        option71.setDescription("""");
        org.apache.commons.cli.Options options74 = options69.addOption(option71);
        org.apache.commons.cli.CommandLine commandLine75 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray77 = commandLine75.getOptionValues(""hi!"");
        java.lang.String str80 = commandLine75.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str82 = commandLine75.getOptionValue(""arg"");
        java.lang.String[] strArray83 = commandLine75.getArgs();
        java.lang.String[] strArray85 = posixParser68.flatten(options74, strArray83, false);
        org.apache.commons.cli.CommandLine commandLine86 = posixParser0.parse(options53, strArray85);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options91 = options53.addOption(""org.apache.commons.cli.UnrecognizedOptionException: hi!"", ""[ option: 4  ::  ]"", true, ""hi!"");
            org.junit.Assert.fail(""Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '.'"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue(""'"" + boolean36 + ""' != '"" + false + ""'"", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(option61);
        org.junit.Assert.assertTrue(""'"" + boolean66 + ""' != '"" + true + ""'"", boolean66 == true);
        org.junit.Assert.assertNotNull(options67);
        org.junit.Assert.assertNotNull(option71);
        org.junit.Assert.assertNotNull(options74);
        org.junit.Assert.assertNull(strArray77);
        org.junit.Assert.assertEquals(""'"" + str80 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str80, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(commandLine86);"
107,118,7569,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0119"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues(""hi!"");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("""");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptionGroups();
        org.apache.commons.cli.Option option61 = org.apache.commons.cli.OptionBuilder.create('4');
        option61.setDescription("""");
        option61.setLongOpt(""hi!"");
        boolean boolean66 = option61.hasArgName();
        org.apache.commons.cli.Options options67 = options53.addOption(option61);
        org.apache.commons.cli.PosixParser posixParser68 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options69 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option71 = org.apache.commons.cli.OptionBuilder.create('4');
        option71.setDescription("""");
        org.apache.commons.cli.Options options74 = options69.addOption(option71);
        org.apache.commons.cli.CommandLine commandLine75 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray77 = commandLine75.getOptionValues(""hi!"");
        java.lang.String str80 = commandLine75.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str82 = commandLine75.getOptionValue(""arg"");
        java.lang.String[] strArray83 = commandLine75.getArgs();
        java.lang.String[] strArray85 = posixParser68.flatten(options74, strArray83, false);
        org.apache.commons.cli.CommandLine commandLine86 = posixParser0.parse(options53, strArray85);
        java.lang.Object obj88 = commandLine86.getOptionObject('a');
        java.lang.String[] strArray89 = commandLine86.getArgs();
        org.apache.commons.cli.Option[] optionArray90 = commandLine86.getOptions();
        java.util.Iterator iterator91 = commandLine86.iterator();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue(""'"" + boolean36 + ""' != '"" + false + ""'"", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(option61);
        org.junit.Assert.assertTrue(""'"" + boolean66 + ""' != '"" + true + ""'"", boolean66 == true);
        org.junit.Assert.assertNotNull(options67);
        org.junit.Assert.assertNotNull(option71);
        org.junit.Assert.assertNotNull(options74);
        org.junit.Assert.assertNull(strArray77);
        org.junit.Assert.assertEquals(""'"" + str80 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str80, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(commandLine86);
        org.junit.Assert.assertNull(obj88);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(optionArray90);
        org.junit.Assert.assertNotNull(iterator91);"
108,335,7565,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0336"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues(""hi!"");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("""");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptionGroups();
        org.apache.commons.cli.Option option61 = org.apache.commons.cli.OptionBuilder.create('4');
        option61.setDescription("""");
        option61.setLongOpt(""hi!"");
        boolean boolean66 = option61.hasArgName();
        org.apache.commons.cli.Options options67 = options53.addOption(option61);
        org.apache.commons.cli.PosixParser posixParser68 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options69 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option71 = org.apache.commons.cli.OptionBuilder.create('4');
        option71.setDescription("""");
        org.apache.commons.cli.Options options74 = options69.addOption(option71);
        org.apache.commons.cli.CommandLine commandLine75 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray77 = commandLine75.getOptionValues(""hi!"");
        java.lang.String str80 = commandLine75.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str82 = commandLine75.getOptionValue(""arg"");
        java.lang.String[] strArray83 = commandLine75.getArgs();
        java.lang.String[] strArray85 = posixParser68.flatten(options74, strArray83, false);
        org.apache.commons.cli.CommandLine commandLine86 = posixParser0.parse(options53, strArray85);
        java.util.Iterator iterator87 = commandLine86.iterator();
        java.util.List list88 = commandLine86.getArgList();
        java.lang.String str90 = commandLine86.getOptionValue(""[ option: 4  ::  ]"");
        java.lang.Class<?> wildcardClass91 = commandLine86.getClass();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue(""'"" + boolean36 + ""' != '"" + false + ""'"", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(option61);
        org.junit.Assert.assertTrue(""'"" + boolean66 + ""' != '"" + true + ""'"", boolean66 == true);
        org.junit.Assert.assertNotNull(options67);
        org.junit.Assert.assertNotNull(option71);
        org.junit.Assert.assertNotNull(options74);
        org.junit.Assert.assertNull(strArray77);
        org.junit.Assert.assertEquals(""'"" + str80 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str80, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(commandLine86);
        org.junit.Assert.assertNotNull(iterator87);
        org.junit.Assert.assertNotNull(list88);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertNotNull(wildcardClass91);"
109,421,7069,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0422"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptions();
        boolean boolean9 = options1.hasOption(""arg"");
        java.lang.String[] strArray12 = new java.lang.String[] { ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"", ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"" };
        org.apache.commons.cli.CommandLine commandLine13 = posixParser0.parse(options1, strArray12);
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = org.apache.commons.cli.OptionBuilder.create('4');
        option16.setDescription("""");
        org.apache.commons.cli.Options options19 = options14.addOption(option16);
        java.util.Collection collection20 = options14.getOptionGroups();
        org.apache.commons.cli.Options options24 = options14.addOption("""", false, ""arg"");
        java.util.List list25 = options24.getRequiredOptions();
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create(""arg"");
        org.apache.commons.cli.Options options28 = options24.addOption(option27);
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setArgs((int) (short) 100);
        option30.setArgName(""[ option: 4  :: null ]"");
        java.lang.String str35 = option30.getLongOpt();
        java.lang.String str37 = option30.getValue((int) (short) -1);
        org.apache.commons.cli.Options options38 = options28.addOption(option30);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup42 = options39.getOptionGroup(option41);
        boolean boolean43 = option41.hasLongOpt();
        boolean boolean44 = option41.isRequired();
        java.util.List list45 = option41.getValuesList();
        option41.setDescription(""[ option: 4  ::  ]"");
        org.apache.commons.cli.Options options48 = options38.addOption(option41);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        option52.setDescription("""");
        org.apache.commons.cli.Options options55 = options50.addOption(option52);
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray58 = commandLine56.getOptionValues(""hi!"");
        java.lang.String str61 = commandLine56.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str63 = commandLine56.getOptionValue(""arg"");
        java.lang.String[] strArray64 = commandLine56.getArgs();
        java.lang.String[] strArray66 = posixParser49.flatten(options55, strArray64, false);
        org.apache.commons.cli.CommandLine commandLine68 = posixParser0.parse(options38, strArray64, true);
        boolean boolean70 = commandLine68.hasOption(""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"");
        java.lang.String[] strArray72 = commandLine68.getOptionValues(""[ Options: [ short {4=[ option: 4  :: null ::  ]} ] [ long {} ]"");
        org.apache.commons.cli.Option option74 = org.apache.commons.cli.OptionBuilder.create('4');
        java.lang.String str76 = option74.getValue(""arg"");
        org.apache.commons.cli.MissingOptionException missingOptionException78 = new org.apache.commons.cli.MissingOptionException(""hi!"");
        boolean boolean79 = option74.equals((java.lang.Object) ""hi!"");
        java.lang.String str80 = option74.toString();
        option74.setDescription("""");
        commandLine68.addOption(option74);
        option74.setLongOpt(""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ], arg=[ option: arg  :: null ]} ] [ long {} ]"");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertTrue(""'"" + boolean9 + ""' != '"" + false + ""'"", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine13);
        org.junit.Assert.assertNotNull(option16);
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertNotNull(collection20);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertTrue(""'"" + boolean43 + ""' != '"" + false + ""'"", boolean43 == false);
        org.junit.Assert.assertTrue(""'"" + boolean44 + ""' != '"" + false + ""'"", boolean44 == false);
        org.junit.Assert.assertNotNull(list45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNull(strArray58);
        org.junit.Assert.assertEquals(""'"" + str61 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str61, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertTrue(""'"" + boolean70 + ""' != '"" + false + ""'"", boolean70 == false);
        org.junit.Assert.assertNull(strArray72);
        org.junit.Assert.assertNotNull(option74);
        org.junit.Assert.assertEquals(""'"" + str76 + ""' != '"" + ""arg"" + ""'"", str76, ""arg"");
        org.junit.Assert.assertTrue(""'"" + boolean79 + ""' != '"" + false + ""'"", boolean79 == false);
        org.junit.Assert.assertEquals(""'"" + str80 + ""' != '"" + ""[ option: 4  :: null ]"" + ""'"", str80, ""[ option: 4  :: null ]"");"
110,362,7064,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0363"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptions();
        boolean boolean9 = options1.hasOption(""arg"");
        java.lang.String[] strArray12 = new java.lang.String[] { ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"", ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"" };
        org.apache.commons.cli.CommandLine commandLine13 = posixParser0.parse(options1, strArray12);
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = org.apache.commons.cli.OptionBuilder.create('4');
        option16.setDescription("""");
        org.apache.commons.cli.Options options19 = options14.addOption(option16);
        java.util.Collection collection20 = options14.getOptionGroups();
        org.apache.commons.cli.Options options24 = options14.addOption("""", false, ""arg"");
        java.util.List list25 = options24.getRequiredOptions();
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create(""arg"");
        org.apache.commons.cli.Options options28 = options24.addOption(option27);
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setArgs((int) (short) 100);
        option30.setArgName(""[ option: 4  :: null ]"");
        java.lang.String str35 = option30.getLongOpt();
        java.lang.String str37 = option30.getValue((int) (short) -1);
        org.apache.commons.cli.Options options38 = options28.addOption(option30);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup42 = options39.getOptionGroup(option41);
        boolean boolean43 = option41.hasLongOpt();
        boolean boolean44 = option41.isRequired();
        java.util.List list45 = option41.getValuesList();
        option41.setDescription(""[ option: 4  ::  ]"");
        org.apache.commons.cli.Options options48 = options38.addOption(option41);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        option52.setDescription("""");
        org.apache.commons.cli.Options options55 = options50.addOption(option52);
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray58 = commandLine56.getOptionValues(""hi!"");
        java.lang.String str61 = commandLine56.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str63 = commandLine56.getOptionValue(""arg"");
        java.lang.String[] strArray64 = commandLine56.getArgs();
        java.lang.String[] strArray66 = posixParser49.flatten(options55, strArray64, false);
        org.apache.commons.cli.CommandLine commandLine68 = posixParser0.parse(options38, strArray64, true);
        boolean boolean70 = commandLine68.hasOption(""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"");
        java.lang.String[] strArray72 = commandLine68.getOptionValues(""[ Options: [ short {4=[ option: 4  :: null ::  ]} ] [ long {} ]"");
        org.apache.commons.cli.Option option74 = org.apache.commons.cli.OptionBuilder.create('4');
        java.lang.String str76 = option74.getValue(""arg"");
        org.apache.commons.cli.MissingOptionException missingOptionException78 = new org.apache.commons.cli.MissingOptionException(""hi!"");
        boolean boolean79 = option74.equals((java.lang.Object) ""hi!"");
        java.lang.String str80 = option74.toString();
        option74.setDescription("""");
        commandLine68.addOption(option74);
        java.lang.Object obj85 = commandLine68.getOptionObject(""[ option: 4  ::  :: [] ]"");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertTrue(""'"" + boolean9 + ""' != '"" + false + ""'"", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine13);
        org.junit.Assert.assertNotNull(option16);
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertNotNull(collection20);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertTrue(""'"" + boolean43 + ""' != '"" + false + ""'"", boolean43 == false);
        org.junit.Assert.assertTrue(""'"" + boolean44 + ""' != '"" + false + ""'"", boolean44 == false);
        org.junit.Assert.assertNotNull(list45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNull(strArray58);
        org.junit.Assert.assertEquals(""'"" + str61 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str61, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertTrue(""'"" + boolean70 + ""' != '"" + false + ""'"", boolean70 == false);
        org.junit.Assert.assertNull(strArray72);
        org.junit.Assert.assertNotNull(option74);
        org.junit.Assert.assertEquals(""'"" + str76 + ""' != '"" + ""arg"" + ""'"", str76, ""arg"");
        org.junit.Assert.assertTrue(""'"" + boolean79 + ""' != '"" + false + ""'"", boolean79 == false);
        org.junit.Assert.assertEquals(""'"" + str80 + ""' != '"" + ""[ option: 4  :: null ]"" + ""'"", str80, ""[ option: 4  :: null ]"");
        org.junit.Assert.assertNull(obj85);"
111,416,7476,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0417"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues(""hi!"");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("""");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptionGroups();
        org.apache.commons.cli.Option option61 = org.apache.commons.cli.OptionBuilder.create('4');
        option61.setDescription("""");
        option61.setLongOpt(""hi!"");
        boolean boolean66 = option61.hasArgName();
        org.apache.commons.cli.Options options67 = options53.addOption(option61);
        org.apache.commons.cli.PosixParser posixParser68 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options69 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option71 = org.apache.commons.cli.OptionBuilder.create('4');
        option71.setDescription("""");
        org.apache.commons.cli.Options options74 = options69.addOption(option71);
        org.apache.commons.cli.CommandLine commandLine75 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray77 = commandLine75.getOptionValues(""hi!"");
        java.lang.String str80 = commandLine75.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str82 = commandLine75.getOptionValue(""arg"");
        java.lang.String[] strArray83 = commandLine75.getArgs();
        java.lang.String[] strArray85 = posixParser68.flatten(options74, strArray83, false);
        org.apache.commons.cli.CommandLine commandLine86 = posixParser0.parse(options53, strArray85);
        java.lang.String str89 = commandLine86.getOptionValue(""[ option: 4 hi!  ::  ]"", """");
        java.util.List list90 = commandLine86.getArgList();
        java.util.List list91 = commandLine86.getArgList();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue(""'"" + boolean36 + ""' != '"" + false + ""'"", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(option61);
        org.junit.Assert.assertTrue(""'"" + boolean66 + ""' != '"" + true + ""'"", boolean66 == true);
        org.junit.Assert.assertNotNull(options67);
        org.junit.Assert.assertNotNull(option71);
        org.junit.Assert.assertNotNull(options74);
        org.junit.Assert.assertNull(strArray77);
        org.junit.Assert.assertEquals(""'"" + str80 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str80, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(commandLine86);
        org.junit.Assert.assertEquals(""'"" + str89 + ""' != '"" + """" + ""'"", str89, """");
        org.junit.Assert.assertNotNull(list90);
        org.junit.Assert.assertNotNull(list91);"
112,172,6973,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0173"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String[] strArray10 = commandLine7.getArgs();
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser0.parse(options1, strArray10, properties11);
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option15 = org.apache.commons.cli.OptionBuilder.create('4');
        option15.setDescription("""");
        org.apache.commons.cli.Options options18 = options13.addOption(option15);
        java.util.Collection collection19 = options13.getOptionGroups();
        org.apache.commons.cli.Options options23 = options13.addOption("""", false, ""arg"");
        org.apache.commons.cli.Option option27 = new org.apache.commons.cli.Option("""", true, """");
        boolean boolean28 = option27.hasOptionalArg();
        option27.setOptionalArg(false);
        org.apache.commons.cli.OptionGroup optionGroup31 = options23.getOptionGroup(option27);
        java.util.Collection collection32 = options23.getOptionGroups();
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option36 = org.apache.commons.cli.OptionBuilder.create('4');
        option36.setDescription("""");
        org.apache.commons.cli.Options options39 = options34.addOption(option36);
        java.util.Collection collection40 = options34.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine41 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray43 = commandLine41.getOptionValues(""hi!"");
        java.lang.String str46 = commandLine41.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str48 = commandLine41.getOptionValue(""arg"");
        java.lang.String[] strArray49 = commandLine41.getArgs();
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine51 = posixParser33.parse(options34, strArray49, properties50);
        java.lang.String[] strArray53 = posixParser0.flatten(options23, strArray49, true);
        posixParser0.burstToken("""", true);
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        option59.setDescription("""");
        org.apache.commons.cli.Options options62 = options57.addOption(option59);
        java.util.Collection collection63 = options57.getOptionGroups();
        org.apache.commons.cli.Options options67 = options57.addOption("""", false, ""arg"");
        org.apache.commons.cli.Options options68 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option70 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup71 = options68.getOptionGroup(option70);
        org.apache.commons.cli.Option option73 = org.apache.commons.cli.OptionBuilder.create('4');
        char char74 = option73.getValueSeparator();
        org.apache.commons.cli.Option option76 = org.apache.commons.cli.OptionBuilder.create('4');
        option76.setDescription("""");
        option73.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup80 = options68.getOptionGroup(option73);
        boolean boolean81 = option73.hasArgName();
        org.apache.commons.cli.Options options82 = options57.addOption(option73);
        org.apache.commons.cli.Option option84 = options82.getOption("" "");
        java.util.List list85 = options82.getRequiredOptions();
        java.lang.String[] strArray86 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray88 = posixParser0.flatten(options82, strArray86, true);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertNotNull(option15);
        org.junit.Assert.assertNotNull(options18);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertTrue(""'"" + boolean28 + ""' != '"" + false + ""'"", boolean28 == false);
        org.junit.Assert.assertNull(optionGroup31);
        org.junit.Assert.assertNotNull(collection32);
        org.junit.Assert.assertNotNull(option36);
        org.junit.Assert.assertNotNull(options39);
        org.junit.Assert.assertNotNull(collection40);
        org.junit.Assert.assertNull(strArray43);
        org.junit.Assert.assertEquals(""'"" + str46 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str46, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNotNull(options62);
        org.junit.Assert.assertNotNull(collection63);
        org.junit.Assert.assertNotNull(options67);
        org.junit.Assert.assertNotNull(option70);
        org.junit.Assert.assertNull(optionGroup71);
        org.junit.Assert.assertNotNull(option73);
        org.junit.Assert.assertTrue(""'"" + char74 + ""' != '"" + '\000' + ""'"", char74 == '\000');
        org.junit.Assert.assertNotNull(option76);
        org.junit.Assert.assertNull(optionGroup80);
        org.junit.Assert.assertTrue(""'"" + boolean81 + ""' != '"" + true + ""'"", boolean81 == true);
        org.junit.Assert.assertNotNull(options82);
        org.junit.Assert.assertNull(option84);
        org.junit.Assert.assertNotNull(list85);"
113,341,7417,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0342"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues(""hi!"");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("""");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptionGroups();
        org.apache.commons.cli.Option option61 = org.apache.commons.cli.OptionBuilder.create('4');
        option61.setDescription("""");
        option61.setLongOpt(""hi!"");
        boolean boolean66 = option61.hasArgName();
        org.apache.commons.cli.Options options67 = options53.addOption(option61);
        org.apache.commons.cli.PosixParser posixParser68 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options69 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option71 = org.apache.commons.cli.OptionBuilder.create('4');
        option71.setDescription("""");
        org.apache.commons.cli.Options options74 = options69.addOption(option71);
        org.apache.commons.cli.CommandLine commandLine75 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray77 = commandLine75.getOptionValues(""hi!"");
        java.lang.String str80 = commandLine75.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str82 = commandLine75.getOptionValue(""arg"");
        java.lang.String[] strArray83 = commandLine75.getArgs();
        java.lang.String[] strArray85 = posixParser68.flatten(options74, strArray83, false);
        org.apache.commons.cli.CommandLine commandLine86 = posixParser0.parse(options53, strArray85);
        java.lang.String str89 = commandLine86.getOptionValue(""[ option: 4 hi!  ::  ]"", """");
        boolean boolean91 = commandLine86.hasOption('=');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue(""'"" + boolean36 + ""' != '"" + false + ""'"", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(option61);
        org.junit.Assert.assertTrue(""'"" + boolean66 + ""' != '"" + true + ""'"", boolean66 == true);
        org.junit.Assert.assertNotNull(options67);
        org.junit.Assert.assertNotNull(option71);
        org.junit.Assert.assertNotNull(options74);
        org.junit.Assert.assertNull(strArray77);
        org.junit.Assert.assertEquals(""'"" + str80 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str80, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(commandLine86);
        org.junit.Assert.assertEquals(""'"" + str89 + ""' != '"" + """" + ""'"", str89, """");
        org.junit.Assert.assertTrue(""'"" + boolean91 + ""' != '"" + false + ""'"", boolean91 == false);"
114,221,7031,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0222"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option6.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken(""[ option: 4  :: null ::  ]"", true);
        posixParser0.burstToken(""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"", false);
        org.apache.commons.cli.PosixParser posixParser42 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setDescription("""");
        org.apache.commons.cli.Options options48 = options43.addOption(option45);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        option52.setDescription("""");
        org.apache.commons.cli.Options options55 = options50.addOption(option52);
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray58 = commandLine56.getOptionValues(""hi!"");
        java.lang.String[] strArray59 = commandLine56.getArgs();
        java.util.Properties properties60 = null;
        org.apache.commons.cli.CommandLine commandLine61 = posixParser49.parse(options50, strArray59, properties60);
        org.apache.commons.cli.CommandLine commandLine63 = posixParser42.parse(options48, strArray59, false);
        java.util.Collection collection64 = options48.getOptionGroups();
        org.apache.commons.cli.PosixParser posixParser65 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options66 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option68 = org.apache.commons.cli.OptionBuilder.create('4');
        option68.setDescription("""");
        org.apache.commons.cli.Options options71 = options66.addOption(option68);
        org.apache.commons.cli.CommandLine commandLine72 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray74 = commandLine72.getOptionValues(""hi!"");
        java.lang.String str77 = commandLine72.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str79 = commandLine72.getOptionValue(""arg"");
        java.lang.String[] strArray80 = commandLine72.getArgs();
        java.lang.String[] strArray82 = posixParser65.flatten(options71, strArray80, false);
        org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options48, strArray80, false);
        org.apache.commons.cli.Option[] optionArray85 = commandLine84.getOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue(""'"" + char7 + ""' != '"" + '\000' + ""'"", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNull(strArray58);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(commandLine61);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(collection64);
        org.junit.Assert.assertNotNull(option68);
        org.junit.Assert.assertNotNull(options71);
        org.junit.Assert.assertNull(strArray74);
        org.junit.Assert.assertEquals(""'"" + str77 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str77, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNotNull(optionArray85);"
115,478,7396,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0479"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues(""hi!"");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("""");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptionGroups();
        org.apache.commons.cli.Option option61 = org.apache.commons.cli.OptionBuilder.create('4');
        option61.setDescription("""");
        option61.setLongOpt(""hi!"");
        boolean boolean66 = option61.hasArgName();
        org.apache.commons.cli.Options options67 = options53.addOption(option61);
        org.apache.commons.cli.PosixParser posixParser68 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options69 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option71 = org.apache.commons.cli.OptionBuilder.create('4');
        option71.setDescription("""");
        org.apache.commons.cli.Options options74 = options69.addOption(option71);
        org.apache.commons.cli.CommandLine commandLine75 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray77 = commandLine75.getOptionValues(""hi!"");
        java.lang.String str80 = commandLine75.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str82 = commandLine75.getOptionValue(""arg"");
        java.lang.String[] strArray83 = commandLine75.getArgs();
        java.lang.String[] strArray85 = posixParser68.flatten(options74, strArray83, false);
        org.apache.commons.cli.CommandLine commandLine86 = posixParser0.parse(options53, strArray85);
        java.lang.String str89 = commandLine86.getOptionValue(""[ option: 4 hi!  ::  ]"", """");
        commandLine86.addArg(""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue(""'"" + boolean36 + ""' != '"" + false + ""'"", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(option61);
        org.junit.Assert.assertTrue(""'"" + boolean66 + ""' != '"" + true + ""'"", boolean66 == true);
        org.junit.Assert.assertNotNull(options67);
        org.junit.Assert.assertNotNull(option71);
        org.junit.Assert.assertNotNull(options74);
        org.junit.Assert.assertNull(strArray77);
        org.junit.Assert.assertEquals(""'"" + str80 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str80, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(commandLine86);
        org.junit.Assert.assertEquals(""'"" + str89 + ""' != '"" + """" + ""'"", str89, """");"
116,71,7008,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0072"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option6.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken(""[ option: 4  :: null ::  ]"", true);
        posixParser0.burstToken(""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"", false);
        org.apache.commons.cli.PosixParser posixParser42 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setDescription("""");
        org.apache.commons.cli.Options options48 = options43.addOption(option45);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        option52.setDescription("""");
        org.apache.commons.cli.Options options55 = options50.addOption(option52);
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray58 = commandLine56.getOptionValues(""hi!"");
        java.lang.String[] strArray59 = commandLine56.getArgs();
        java.util.Properties properties60 = null;
        org.apache.commons.cli.CommandLine commandLine61 = posixParser49.parse(options50, strArray59, properties60);
        org.apache.commons.cli.CommandLine commandLine63 = posixParser42.parse(options48, strArray59, false);
        java.util.Collection collection64 = options48.getOptionGroups();
        org.apache.commons.cli.PosixParser posixParser65 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options66 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option68 = org.apache.commons.cli.OptionBuilder.create('4');
        option68.setDescription("""");
        org.apache.commons.cli.Options options71 = options66.addOption(option68);
        org.apache.commons.cli.CommandLine commandLine72 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray74 = commandLine72.getOptionValues(""hi!"");
        java.lang.String str77 = commandLine72.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str79 = commandLine72.getOptionValue(""arg"");
        java.lang.String[] strArray80 = commandLine72.getArgs();
        java.lang.String[] strArray82 = posixParser65.flatten(options71, strArray80, false);
        org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options48, strArray80, false);
        java.lang.Object obj86 = commandLine84.getOptionObject('\000');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue(""'"" + char7 + ""' != '"" + '\000' + ""'"", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNull(strArray58);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(commandLine61);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(collection64);
        org.junit.Assert.assertNotNull(option68);
        org.junit.Assert.assertNotNull(options71);
        org.junit.Assert.assertNull(strArray74);
        org.junit.Assert.assertEquals(""'"" + str77 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str77, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNull(obj86);"
117,161,7005,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0162"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option6.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken(""[ option: 4  :: null ::  ]"", true);
        posixParser0.burstToken(""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"", false);
        org.apache.commons.cli.PosixParser posixParser42 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setDescription("""");
        org.apache.commons.cli.Options options48 = options43.addOption(option45);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        option52.setDescription("""");
        org.apache.commons.cli.Options options55 = options50.addOption(option52);
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray58 = commandLine56.getOptionValues(""hi!"");
        java.lang.String[] strArray59 = commandLine56.getArgs();
        java.util.Properties properties60 = null;
        org.apache.commons.cli.CommandLine commandLine61 = posixParser49.parse(options50, strArray59, properties60);
        org.apache.commons.cli.CommandLine commandLine63 = posixParser42.parse(options48, strArray59, false);
        java.util.Collection collection64 = options48.getOptionGroups();
        org.apache.commons.cli.PosixParser posixParser65 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options66 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option68 = org.apache.commons.cli.OptionBuilder.create('4');
        option68.setDescription("""");
        org.apache.commons.cli.Options options71 = options66.addOption(option68);
        org.apache.commons.cli.CommandLine commandLine72 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray74 = commandLine72.getOptionValues(""hi!"");
        java.lang.String str77 = commandLine72.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str79 = commandLine72.getOptionValue(""arg"");
        java.lang.String[] strArray80 = commandLine72.getArgs();
        java.lang.String[] strArray82 = posixParser65.flatten(options71, strArray80, false);
        org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options48, strArray80, false);
        java.lang.Object obj86 = commandLine84.getOptionObject('4');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue(""'"" + char7 + ""' != '"" + '\000' + ""'"", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNull(strArray58);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(commandLine61);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(collection64);
        org.junit.Assert.assertNotNull(option68);
        org.junit.Assert.assertNotNull(options71);
        org.junit.Assert.assertNull(strArray74);
        org.junit.Assert.assertEquals(""'"" + str77 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str77, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNull(obj86);"
118,159,7371,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0160"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues(""hi!"");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("""");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        org.apache.commons.cli.PosixParser posixParser63 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option66 = org.apache.commons.cli.OptionBuilder.create('4');
        option66.setDescription("""");
        org.apache.commons.cli.Options options69 = options64.addOption(option66);
        org.apache.commons.cli.CommandLine commandLine70 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray72 = commandLine70.getOptionValues(""hi!"");
        java.lang.String[] strArray73 = commandLine70.getArgs();
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine75 = posixParser63.parse(options64, strArray73, properties74);
        java.lang.String[] strArray78 = new java.lang.String[] { ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"", ""hi!"" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser0.parse(options64, strArray78, properties79, true);
        java.util.List list82 = commandLine81.getArgList();
        java.lang.String str85 = commandLine81.getOptionValue('#', ""[ option: 4  :: null ]"");
        java.lang.String[] strArray86 = commandLine81.getArgs();
        java.lang.Object obj88 = commandLine81.getOptionObject(' ');
        java.lang.Object obj90 = commandLine81.getOptionObject(""[ option: 4  :: null :: [ option:   [ option: 4  ::  ]  :: null ] ]"");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue(""'"" + boolean36 + ""' != '"" + false + ""'"", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(option66);
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertNull(strArray72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine75);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(list82);
        org.junit.Assert.assertEquals(""'"" + str85 + ""' != '"" + ""[ option: 4  :: null ]"" + ""'"", str85, ""[ option: 4  :: null ]"");
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNull(obj88);
        org.junit.Assert.assertNull(obj90);"
119,45,7165,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0046"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        org.apache.commons.cli.Option option36 = org.apache.commons.cli.OptionBuilder.create('4');
        boolean boolean37 = option36.isRequired();
        org.apache.commons.cli.Options options38 = options22.addOption(option36);
        java.util.List list39 = options38.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser40 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options41 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option43 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup44 = options41.getOptionGroup(option43);
        org.apache.commons.cli.Option option46 = org.apache.commons.cli.OptionBuilder.create('4');
        char char47 = option46.getValueSeparator();
        org.apache.commons.cli.Option option49 = org.apache.commons.cli.OptionBuilder.create('4');
        option49.setDescription("""");
        option46.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup53 = options41.getOptionGroup(option46);
        boolean boolean55 = options41.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        option59.setDescription("""");
        org.apache.commons.cli.Options options62 = options57.addOption(option59);
        org.apache.commons.cli.CommandLine commandLine63 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray65 = commandLine63.getOptionValues(""hi!"");
        java.lang.String str68 = commandLine63.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str70 = commandLine63.getOptionValue(""arg"");
        java.lang.String[] strArray71 = commandLine63.getArgs();
        java.lang.String[] strArray73 = posixParser56.flatten(options62, strArray71, false);
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine75 = posixParser40.parse(options41, strArray73, properties74);
        java.util.List list76 = commandLine75.getArgList();
        java.lang.String[] strArray77 = commandLine75.getArgs();
        java.util.Properties properties78 = null;
        org.apache.commons.cli.CommandLine commandLine80 = posixParser0.parse(options38, strArray77, properties78, false);
        org.apache.commons.cli.OptionBuilder optionBuilder81 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) strArray77);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertNotNull(option36);
        org.junit.Assert.assertTrue(""'"" + boolean37 + ""' != '"" + false + ""'"", boolean37 == false);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(list39);
        org.junit.Assert.assertNotNull(option43);
        org.junit.Assert.assertNull(optionGroup44);
        org.junit.Assert.assertNotNull(option46);
        org.junit.Assert.assertTrue(""'"" + char47 + ""' != '"" + '\000' + ""'"", char47 == '\000');
        org.junit.Assert.assertNotNull(option49);
        org.junit.Assert.assertNull(optionGroup53);
        org.junit.Assert.assertTrue(""'"" + boolean55 + ""' != '"" + false + ""'"", boolean55 == false);
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNotNull(options62);
        org.junit.Assert.assertNull(strArray65);
        org.junit.Assert.assertEquals(""'"" + str68 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str68, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine75);
        org.junit.Assert.assertNotNull(list76);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(commandLine80);
        org.junit.Assert.assertNotNull(optionBuilder81);"
120,126,7288,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0127"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues(""hi!"");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        java.util.Collection collection53 = options22.getOptionGroups();
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        option56.setDescription("""");
        org.apache.commons.cli.Options options59 = options54.addOption(option56);
        java.util.Collection collection60 = options54.getOptionGroups();
        org.apache.commons.cli.Options options64 = options54.addOption("""", false, ""arg"");
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option67 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup68 = options65.getOptionGroup(option67);
        org.apache.commons.cli.Option option70 = org.apache.commons.cli.OptionBuilder.create('4');
        char char71 = option70.getValueSeparator();
        org.apache.commons.cli.Option option73 = org.apache.commons.cli.OptionBuilder.create('4');
        option73.setDescription("""");
        option70.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup77 = options65.getOptionGroup(option70);
        boolean boolean78 = option70.hasArgName();
        org.apache.commons.cli.Options options79 = options54.addOption(option70);
        org.apache.commons.cli.Options options80 = options22.addOption(option70);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options85 = options80.addOption(""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ::  ]} ] [ long {} ]"", ""[ option: 4  :: [ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ] ::  ]"", true, ""[ option:  +ARG ::  ]"");
            org.junit.Assert.fail(""Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue(""'"" + boolean36 + ""' != '"" + false + ""'"", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(collection53);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNotNull(collection60);
        org.junit.Assert.assertNotNull(options64);
        org.junit.Assert.assertNotNull(option67);
        org.junit.Assert.assertNull(optionGroup68);
        org.junit.Assert.assertNotNull(option70);
        org.junit.Assert.assertTrue(""'"" + char71 + ""' != '"" + '\000' + ""'"", char71 == '\000');
        org.junit.Assert.assertNotNull(option73);
        org.junit.Assert.assertNull(optionGroup77);
        org.junit.Assert.assertTrue(""'"" + boolean78 + ""' != '"" + true + ""'"", boolean78 == true);
        org.junit.Assert.assertNotNull(options79);
        org.junit.Assert.assertNotNull(options80);"
121,244,7138,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0245"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        org.apache.commons.cli.Option option36 = org.apache.commons.cli.OptionBuilder.create('4');
        boolean boolean37 = option36.isRequired();
        org.apache.commons.cli.Options options38 = options22.addOption(option36);
        java.util.List list39 = options38.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser40 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options41 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option43 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup44 = options41.getOptionGroup(option43);
        org.apache.commons.cli.Option option46 = org.apache.commons.cli.OptionBuilder.create('4');
        char char47 = option46.getValueSeparator();
        org.apache.commons.cli.Option option49 = org.apache.commons.cli.OptionBuilder.create('4');
        option49.setDescription("""");
        option46.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup53 = options41.getOptionGroup(option46);
        boolean boolean55 = options41.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        option59.setDescription("""");
        org.apache.commons.cli.Options options62 = options57.addOption(option59);
        org.apache.commons.cli.CommandLine commandLine63 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray65 = commandLine63.getOptionValues(""hi!"");
        java.lang.String str68 = commandLine63.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str70 = commandLine63.getOptionValue(""arg"");
        java.lang.String[] strArray71 = commandLine63.getArgs();
        java.lang.String[] strArray73 = posixParser56.flatten(options62, strArray71, false);
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine75 = posixParser40.parse(options41, strArray73, properties74);
        java.util.List list76 = commandLine75.getArgList();
        java.lang.String[] strArray77 = commandLine75.getArgs();
        java.util.Properties properties78 = null;
        org.apache.commons.cli.CommandLine commandLine80 = posixParser0.parse(options38, strArray77, properties78, false);
        org.apache.commons.cli.Option option82 = options38.getOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertNotNull(option36);
        org.junit.Assert.assertTrue(""'"" + boolean37 + ""' != '"" + false + ""'"", boolean37 == false);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(list39);
        org.junit.Assert.assertNotNull(option43);
        org.junit.Assert.assertNull(optionGroup44);
        org.junit.Assert.assertNotNull(option46);
        org.junit.Assert.assertTrue(""'"" + char47 + ""' != '"" + '\000' + ""'"", char47 == '\000');
        org.junit.Assert.assertNotNull(option49);
        org.junit.Assert.assertNull(optionGroup53);
        org.junit.Assert.assertTrue(""'"" + boolean55 + ""' != '"" + false + ""'"", boolean55 == false);
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNotNull(options62);
        org.junit.Assert.assertNull(strArray65);
        org.junit.Assert.assertEquals(""'"" + str68 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str68, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine75);
        org.junit.Assert.assertNotNull(list76);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(commandLine80);
        org.junit.Assert.assertNull(option82);"
122,158,7320,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0159"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues(""hi!"");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("""");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        org.apache.commons.cli.PosixParser posixParser63 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option66 = org.apache.commons.cli.OptionBuilder.create('4');
        option66.setDescription("""");
        org.apache.commons.cli.Options options69 = options64.addOption(option66);
        org.apache.commons.cli.CommandLine commandLine70 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray72 = commandLine70.getOptionValues(""hi!"");
        java.lang.String[] strArray73 = commandLine70.getArgs();
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine75 = posixParser63.parse(options64, strArray73, properties74);
        java.lang.String[] strArray78 = new java.lang.String[] { ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"", ""hi!"" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser0.parse(options64, strArray78, properties79, true);
        java.util.List list82 = commandLine81.getArgList();
        java.lang.String str85 = commandLine81.getOptionValue('#', ""[ option: 4  :: null ]"");
        java.lang.String[] strArray86 = commandLine81.getArgs();
        java.lang.Object obj88 = commandLine81.getOptionObject(' ');
        java.lang.Class<?> wildcardClass89 = commandLine81.getClass();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue(""'"" + boolean36 + ""' != '"" + false + ""'"", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(option66);
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertNull(strArray72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine75);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(list82);
        org.junit.Assert.assertEquals(""'"" + str85 + ""' != '"" + ""[ option: 4  :: null ]"" + ""'"", str85, ""[ option: 4  :: null ]"");
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNull(obj88);
        org.junit.Assert.assertNotNull(wildcardClass89);"
123,95,7307,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0096"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues(""hi!"");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("""");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptionGroups();
        org.apache.commons.cli.Option option61 = org.apache.commons.cli.OptionBuilder.create('4');
        option61.setDescription("""");
        option61.setLongOpt(""hi!"");
        boolean boolean66 = option61.hasArgName();
        org.apache.commons.cli.Options options67 = options53.addOption(option61);
        org.apache.commons.cli.PosixParser posixParser68 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options69 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option71 = org.apache.commons.cli.OptionBuilder.create('4');
        option71.setDescription("""");
        org.apache.commons.cli.Options options74 = options69.addOption(option71);
        org.apache.commons.cli.CommandLine commandLine75 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray77 = commandLine75.getOptionValues(""hi!"");
        java.lang.String str80 = commandLine75.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str82 = commandLine75.getOptionValue(""arg"");
        java.lang.String[] strArray83 = commandLine75.getArgs();
        java.lang.String[] strArray85 = posixParser68.flatten(options74, strArray83, false);
        org.apache.commons.cli.CommandLine commandLine86 = posixParser0.parse(options53, strArray85);
        posixParser0.burstToken(""hi!"", true);
        posixParser0.burstToken(""[ option:    :: null ]"", true);
        posixParser0.burstToken(""org.apache.commons.cli.MissingArgumentException: [ option:    :: null ]"", true);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue(""'"" + boolean36 + ""' != '"" + false + ""'"", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(option61);
        org.junit.Assert.assertTrue(""'"" + boolean66 + ""' != '"" + true + ""'"", boolean66 == true);
        org.junit.Assert.assertNotNull(options67);
        org.junit.Assert.assertNotNull(option71);
        org.junit.Assert.assertNotNull(options74);
        org.junit.Assert.assertNull(strArray77);
        org.junit.Assert.assertEquals(""'"" + str80 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str80, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(commandLine86);"
124,499,7282,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0500"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues(""hi!"");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("""");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        org.apache.commons.cli.PosixParser posixParser63 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option66 = org.apache.commons.cli.OptionBuilder.create('4');
        option66.setDescription("""");
        org.apache.commons.cli.Options options69 = options64.addOption(option66);
        org.apache.commons.cli.CommandLine commandLine70 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray72 = commandLine70.getOptionValues(""hi!"");
        java.lang.String[] strArray73 = commandLine70.getArgs();
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine75 = posixParser63.parse(options64, strArray73, properties74);
        java.lang.String[] strArray78 = new java.lang.String[] { ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"", ""hi!"" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser0.parse(options64, strArray78, properties79, true);
        java.util.List list82 = commandLine81.getArgList();
        java.lang.String str84 = commandLine81.getOptionValue(""[ option:  +ARG ::  ]"");
        java.util.List list85 = commandLine81.getArgList();
        commandLine81.addArg(""[ Options: [ short {4=[ option: 4  ::  ], arg=[ option: arg org.apache.commons.cli.UnrecognizedOptionException: hi!  ::  ]} ] [ long {org.apache.commons.cli.UnrecognizedOptionException: hi!=[ option: arg org.apache.commons.cli.UnrecognizedOptionException: hi!  ::  ]} ]"");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue(""'"" + boolean36 + ""' != '"" + false + ""'"", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(option66);
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertNull(strArray72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine75);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(list82);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNotNull(list85);"
125,495,6773,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0496"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptions();
        boolean boolean9 = options1.hasOption(""arg"");
        java.lang.String[] strArray12 = new java.lang.String[] { ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"", ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"" };
        org.apache.commons.cli.CommandLine commandLine13 = posixParser0.parse(options1, strArray12);
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = org.apache.commons.cli.OptionBuilder.create('4');
        option16.setDescription("""");
        org.apache.commons.cli.Options options19 = options14.addOption(option16);
        java.util.Collection collection20 = options14.getOptionGroups();
        org.apache.commons.cli.Options options24 = options14.addOption("""", false, ""arg"");
        java.util.List list25 = options24.getRequiredOptions();
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create(""arg"");
        org.apache.commons.cli.Options options28 = options24.addOption(option27);
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setArgs((int) (short) 100);
        option30.setArgName(""[ option: 4  :: null ]"");
        java.lang.String str35 = option30.getLongOpt();
        java.lang.String str37 = option30.getValue((int) (short) -1);
        org.apache.commons.cli.Options options38 = options28.addOption(option30);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup42 = options39.getOptionGroup(option41);
        boolean boolean43 = option41.hasLongOpt();
        boolean boolean44 = option41.isRequired();
        java.util.List list45 = option41.getValuesList();
        option41.setDescription(""[ option: 4  ::  ]"");
        org.apache.commons.cli.Options options48 = options38.addOption(option41);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        option52.setDescription("""");
        org.apache.commons.cli.Options options55 = options50.addOption(option52);
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray58 = commandLine56.getOptionValues(""hi!"");
        java.lang.String str61 = commandLine56.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str63 = commandLine56.getOptionValue(""arg"");
        java.lang.String[] strArray64 = commandLine56.getArgs();
        java.lang.String[] strArray66 = posixParser49.flatten(options55, strArray64, false);
        org.apache.commons.cli.CommandLine commandLine68 = posixParser0.parse(options38, strArray64, true);
        boolean boolean70 = commandLine68.hasOption(""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"");
        java.lang.String[] strArray71 = commandLine68.getArgs();
        org.apache.commons.cli.Option option75 = new org.apache.commons.cli.Option("""", true, """");
        boolean boolean76 = option75.hasOptionalArg();
        java.lang.String str77 = option75.getOpt();
        option75.setDescription(""[ Options: [ short {4=[ option: 4  :: null ::  ]} ] [ long {} ]"");
        java.lang.Object obj80 = option75.getType();
        commandLine68.addOption(option75);
        boolean boolean83 = commandLine68.hasOption('4');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertTrue(""'"" + boolean9 + ""' != '"" + false + ""'"", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine13);
        org.junit.Assert.assertNotNull(option16);
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertNotNull(collection20);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertTrue(""'"" + boolean43 + ""' != '"" + false + ""'"", boolean43 == false);
        org.junit.Assert.assertTrue(""'"" + boolean44 + ""' != '"" + false + ""'"", boolean44 == false);
        org.junit.Assert.assertNotNull(list45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNull(strArray58);
        org.junit.Assert.assertEquals(""'"" + str61 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str61, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertTrue(""'"" + boolean70 + ""' != '"" + false + ""'"", boolean70 == false);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue(""'"" + boolean76 + ""' != '"" + false + ""'"", boolean76 == false);
        org.junit.Assert.assertEquals(""'"" + str77 + ""' != '"" + """" + ""'"", str77, """");
        org.junit.Assert.assertNull(obj80);
        org.junit.Assert.assertTrue(""'"" + boolean83 + ""' != '"" + false + ""'"", boolean83 == false);"
126,250,6310,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0251"");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option2 = org.apache.commons.cli.OptionBuilder.create('4');
        option2.setDescription("""");
        org.apache.commons.cli.Options options5 = options0.addOption(option2);
        java.util.Collection collection6 = options0.getOptionGroups();
        org.apache.commons.cli.Options options10 = options0.addOption("""", false, ""arg"");
        org.apache.commons.cli.Option option14 = new org.apache.commons.cli.Option("""", true, """");
        boolean boolean15 = option14.hasOptionalArg();
        option14.setOptionalArg(false);
        org.apache.commons.cli.OptionGroup optionGroup18 = options10.getOptionGroup(option14);
        java.lang.String str20 = option14.getValue(""[ option: 4  :: [ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ] ::  ]"");
        org.apache.commons.cli.PosixParser posixParser21 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues(""hi!"");
        java.lang.String str49 = commandLine44.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str51 = commandLine44.getOptionValue(""arg"");
        java.lang.String[] strArray52 = commandLine44.getArgs();
        java.lang.String[] strArray54 = posixParser37.flatten(options43, strArray52, false);
        java.util.Properties properties55 = null;
        org.apache.commons.cli.CommandLine commandLine56 = posixParser21.parse(options22, strArray54, properties55);
        posixParser21.burstToken(""[ option: 4  :: null ::  ]"", true);
        posixParser21.burstToken(""[ Options: [ short {} ] [ long {} ]"", true);
        boolean boolean63 = option14.equals((java.lang.Object) posixParser21);
        org.apache.commons.cli.Options options64 = null;
        org.apache.commons.cli.CommandLine commandLine65 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray67 = commandLine65.getOptionValues(""hi!"");
        java.lang.String str70 = commandLine65.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str72 = commandLine65.getOptionValue(""arg"");
        java.lang.String[] strArray73 = commandLine65.getArgs();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.CommandLine commandLine75 = posixParser21.parse(options64, strArray73, true);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option2);
        org.junit.Assert.assertNotNull(options5);
        org.junit.Assert.assertNotNull(collection6);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertNull(optionGroup18);
        org.junit.Assert.assertEquals(""'"" + str20 + ""' != '"" + ""[ option: 4  :: [ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ] ::  ]"" + ""'"", str20, ""[ option: 4  :: [ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ] ::  ]"");
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue(""'"" + boolean36 + ""' != '"" + false + ""'"", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertEquals(""'"" + str49 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str49, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(commandLine56);
        org.junit.Assert.assertTrue(""'"" + boolean63 + ""' != '"" + false + ""'"", boolean63 == false);
        org.junit.Assert.assertNull(strArray67);
        org.junit.Assert.assertEquals(""'"" + str70 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str70, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(strArray73);"
127,481,6943,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0482"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken(""hi!"", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("""");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptions();
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        char char31 = option30.getValueSeparator();
        org.apache.commons.cli.Option option33 = org.apache.commons.cli.OptionBuilder.create('4');
        option33.setDescription("""");
        option30.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup37 = options28.getOptionGroup(option30);
        option30.setOptionalArg(true);
        int int40 = option30.getId();
        org.apache.commons.cli.Options options41 = options21.addOption(option30);
        boolean boolean43 = options41.hasOption("""");
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setArgs((int) (short) 100);
        option45.setArgName(""[ option: 4  :: null ]"");
        java.lang.String str50 = option45.getLongOpt();
        boolean boolean51 = option45.hasLongOpt();
        org.apache.commons.cli.Options options52 = options41.addOption(option45);
        java.util.Collection collection53 = options41.getOptions();
        org.apache.commons.cli.PosixParser posixParser54 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = org.apache.commons.cli.OptionBuilder.create('4');
        option57.setDescription("""");
        org.apache.commons.cli.Options options60 = options55.addOption(option57);
        java.util.Collection collection61 = options55.getOptions();
        boolean boolean63 = options55.hasOption(""arg"");
        java.lang.String[] strArray66 = new java.lang.String[] { ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"", ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"" };
        org.apache.commons.cli.CommandLine commandLine67 = posixParser54.parse(options55, strArray66);
        java.lang.String[] strArray69 = posixParser0.flatten(options41, strArray66, false);
        java.util.List list70 = options41.helpOptions();
        java.lang.String str71 = options41.toString();
        org.apache.commons.cli.Option option75 = new org.apache.commons.cli.Option(""4"", false, ""[ option: 4  ::  ]"");
        java.lang.String str76 = option75.getDescription();
        org.apache.commons.cli.Options options77 = options41.addOption(option75);
        org.apache.commons.cli.Option option79 = options41.getOption(""[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.apache.commons.cli.OptionGroup optionGroup80 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options81 = options41.addOptionGroup(optionGroup80);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertTrue(""'"" + char31 + ""' != '"" + '\000' + ""'"", char31 == '\000');
        org.junit.Assert.assertNotNull(option33);
        org.junit.Assert.assertNull(optionGroup37);
        org.junit.Assert.assertTrue(""'"" + int40 + ""' != '"" + 52 + ""'"", int40 == 52);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertTrue(""'"" + boolean43 + ""' != '"" + false + ""'"", boolean43 == false);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue(""'"" + boolean51 + ""' != '"" + false + ""'"", boolean51 == false);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(collection53);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(collection61);
        org.junit.Assert.assertTrue(""'"" + boolean63 + ""' != '"" + false + ""'"", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(list70);
        org.junit.Assert.assertEquals(""'"" + str71 + ""' != '"" + ""[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]"" + ""'"", str71, ""[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]"");
        org.junit.Assert.assertEquals(""'"" + str76 + ""' != '"" + ""[ option: 4  ::  ]"" + ""'"", str76, ""[ option: 4  ::  ]"");
        org.junit.Assert.assertNotNull(options77);
        org.junit.Assert.assertNull(option79);"
128,100,7230,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0101"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues(""hi!"");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("""");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        org.apache.commons.cli.PosixParser posixParser63 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option66 = org.apache.commons.cli.OptionBuilder.create('4');
        option66.setDescription("""");
        org.apache.commons.cli.Options options69 = options64.addOption(option66);
        org.apache.commons.cli.CommandLine commandLine70 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray72 = commandLine70.getOptionValues(""hi!"");
        java.lang.String[] strArray73 = commandLine70.getArgs();
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine75 = posixParser63.parse(options64, strArray73, properties74);
        java.lang.String[] strArray78 = new java.lang.String[] { ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"", ""hi!"" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser0.parse(options64, strArray78, properties79, true);
        java.util.List list82 = commandLine81.getArgList();
        java.lang.String str85 = commandLine81.getOptionValue('#', ""[ option: 4  :: null ]"");
        java.lang.String str88 = commandLine81.getOptionValue("""", """");
        java.lang.String str90 = commandLine81.getOptionValue('4');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue(""'"" + boolean36 + ""' != '"" + false + ""'"", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(option66);
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertNull(strArray72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine75);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(list82);
        org.junit.Assert.assertEquals(""'"" + str85 + ""' != '"" + ""[ option: 4  :: null ]"" + ""'"", str85, ""[ option: 4  :: null ]"");
        org.junit.Assert.assertEquals(""'"" + str88 + ""' != '"" + """" + ""'"", str88, """");
        org.junit.Assert.assertNull(str90);"
129,412,6614,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0413"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptions();
        boolean boolean9 = options1.hasOption(""arg"");
        java.lang.String[] strArray12 = new java.lang.String[] { ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"", ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"" };
        org.apache.commons.cli.CommandLine commandLine13 = posixParser0.parse(options1, strArray12);
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = org.apache.commons.cli.OptionBuilder.create('4');
        char char17 = option16.getValueSeparator();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        option16.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup23 = options14.getOptionGroup(option16);
        java.util.List list24 = options14.helpOptions();
        java.util.Collection collection25 = options14.getOptionGroups();
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option28 = org.apache.commons.cli.OptionBuilder.create('4');
        option28.setDescription("""");
        org.apache.commons.cli.Options options31 = options26.addOption(option28);
        java.util.Collection collection32 = options26.getOptionGroups();
        org.apache.commons.cli.Options options36 = options26.addOption("""", false, ""arg"");
        java.util.Collection collection37 = options26.getOptionGroups();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        option40.setValueSeparator(' ');
        org.apache.commons.cli.OptionGroup optionGroup46 = options26.getOptionGroup(option40);
        option40.setRequired(false);
        org.apache.commons.cli.CommandLine commandLine49 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray51 = commandLine49.getOptionValues(""hi!"");
        java.lang.String[] strArray52 = commandLine49.getArgs();
        boolean boolean53 = option40.equals((java.lang.Object) strArray52);
        org.apache.commons.cli.CommandLine commandLine55 = posixParser0.parse(options14, strArray52, true);
        org.apache.commons.cli.Options options56 = null;
        org.apache.commons.cli.PosixParser posixParser57 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options58 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option60 = org.apache.commons.cli.OptionBuilder.create('4');
        option60.setDescription("""");
        org.apache.commons.cli.Options options63 = options58.addOption(option60);
        java.util.Collection collection64 = options58.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine65 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray67 = commandLine65.getOptionValues(""hi!"");
        java.lang.String str70 = commandLine65.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str72 = commandLine65.getOptionValue(""arg"");
        java.lang.String[] strArray73 = commandLine65.getArgs();
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine75 = posixParser57.parse(options58, strArray73, properties74);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options56, strArray73, true);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertTrue(""'"" + boolean9 + ""' != '"" + false + ""'"", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine13);
        org.junit.Assert.assertNotNull(option16);
        org.junit.Assert.assertTrue(""'"" + char17 + ""' != '"" + '\000' + ""'"", char17 == '\000');
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNull(optionGroup23);
        org.junit.Assert.assertNotNull(list24);
        org.junit.Assert.assertNotNull(collection25);
        org.junit.Assert.assertNotNull(option28);
        org.junit.Assert.assertNotNull(options31);
        org.junit.Assert.assertNotNull(collection32);
        org.junit.Assert.assertNotNull(options36);
        org.junit.Assert.assertNotNull(collection37);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(optionGroup46);
        org.junit.Assert.assertNull(strArray51);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue(""'"" + boolean53 + ""' != '"" + false + ""'"", boolean53 == false);
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNotNull(option60);
        org.junit.Assert.assertNotNull(options63);
        org.junit.Assert.assertNotNull(collection64);
        org.junit.Assert.assertNull(strArray67);
        org.junit.Assert.assertEquals(""'"" + str70 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str70, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine75);"
130,75,7067,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0076"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("""");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("""");
        option26.setLongOpt(""hi!"");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues(""hi!"");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("""");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        org.apache.commons.cli.Options options50 = options40.addOption("""", false, ""arg"");
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup54 = options51.getOptionGroup(option53);
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        char char57 = option56.getValueSeparator();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        option59.setDescription("""");
        option56.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup63 = options51.getOptionGroup(option56);
        boolean boolean64 = option56.hasArgName();
        org.apache.commons.cli.Options options65 = options40.addOption(option56);
        org.apache.commons.cli.CommandLine commandLine66 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray68 = commandLine66.getOptionValues(""hi!"");
        java.lang.String str71 = commandLine66.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str73 = commandLine66.getOptionValue(""arg"");
        java.lang.String[] strArray74 = commandLine66.getArgs();
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options40, strArray74, properties75);
        java.util.List list77 = options40.helpOptions();
        java.util.Collection collection78 = options40.getOptionGroups();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options83 = options40.addOption(""org.apache.commons.cli.UnrecognizedOptionException: hi!"", """", true, ""org.apache.commons.cli.MissingArgumentException: [ option:    :: null ]"");
            org.junit.Assert.fail(""Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '.'"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue(""'"" + boolean31 + ""' != '"" + true + ""'"", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNotNull(options50);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertTrue(""'"" + char57 + ""' != '"" + '\000' + ""'"", char57 == '\000');
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNull(optionGroup63);
        org.junit.Assert.assertTrue(""'"" + boolean64 + ""' != '"" + true + ""'"", boolean64 == true);
        org.junit.Assert.assertNotNull(options65);
        org.junit.Assert.assertNull(strArray68);
        org.junit.Assert.assertEquals(""'"" + str71 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str71, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(list77);
        org.junit.Assert.assertNotNull(collection78);"
131,129,7205,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0130"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues(""hi!"");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("""");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        org.apache.commons.cli.PosixParser posixParser63 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option66 = org.apache.commons.cli.OptionBuilder.create('4');
        option66.setDescription("""");
        org.apache.commons.cli.Options options69 = options64.addOption(option66);
        org.apache.commons.cli.CommandLine commandLine70 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray72 = commandLine70.getOptionValues(""hi!"");
        java.lang.String[] strArray73 = commandLine70.getArgs();
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine75 = posixParser63.parse(options64, strArray73, properties74);
        java.lang.String[] strArray78 = new java.lang.String[] { ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"", ""hi!"" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser0.parse(options64, strArray78, properties79, true);
        java.util.List list82 = commandLine81.getArgList();
        java.lang.String str85 = commandLine81.getOptionValue('#', ""[ option: 4  :: null ]"");
        java.lang.String[] strArray87 = commandLine81.getOptionValues(""4"");
        java.util.Iterator iterator88 = commandLine81.iterator();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue(""'"" + boolean36 + ""' != '"" + false + ""'"", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(option66);
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertNull(strArray72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine75);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(list82);
        org.junit.Assert.assertEquals(""'"" + str85 + ""' != '"" + ""[ option: 4  :: null ]"" + ""'"", str85, ""[ option: 4  :: null ]"");
        org.junit.Assert.assertNull(strArray87);
        org.junit.Assert.assertNotNull(iterator88);"
132,128,7194,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0129"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues(""hi!"");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("""");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptionGroups();
        org.apache.commons.cli.Option option61 = org.apache.commons.cli.OptionBuilder.create('4');
        option61.setDescription("""");
        option61.setLongOpt(""hi!"");
        boolean boolean66 = option61.hasArgName();
        org.apache.commons.cli.Options options67 = options53.addOption(option61);
        org.apache.commons.cli.PosixParser posixParser68 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options69 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option71 = org.apache.commons.cli.OptionBuilder.create('4');
        option71.setDescription("""");
        org.apache.commons.cli.Options options74 = options69.addOption(option71);
        org.apache.commons.cli.CommandLine commandLine75 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray77 = commandLine75.getOptionValues(""hi!"");
        java.lang.String str80 = commandLine75.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str82 = commandLine75.getOptionValue(""arg"");
        java.lang.String[] strArray83 = commandLine75.getArgs();
        java.lang.String[] strArray85 = posixParser68.flatten(options74, strArray83, false);
        org.apache.commons.cli.CommandLine commandLine86 = posixParser0.parse(options53, strArray85);
        java.util.List list87 = options53.getRequiredOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue(""'"" + boolean36 + ""' != '"" + false + ""'"", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(option61);
        org.junit.Assert.assertTrue(""'"" + boolean66 + ""' != '"" + true + ""'"", boolean66 == true);
        org.junit.Assert.assertNotNull(options67);
        org.junit.Assert.assertNotNull(option71);
        org.junit.Assert.assertNotNull(options74);
        org.junit.Assert.assertNull(strArray77);
        org.junit.Assert.assertEquals(""'"" + str80 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str80, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(commandLine86);
        org.junit.Assert.assertNotNull(list87);"
133,381,6804,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0382"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option6.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken(""[ option: 4  :: null ::  ]"", true);
        posixParser0.burstToken(""[ Options: [ short {} ] [ long {} ]"", true);
        org.apache.commons.cli.PosixParser posixParser42 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setDescription("""");
        org.apache.commons.cli.Options options48 = options43.addOption(option45);
        org.apache.commons.cli.CommandLine commandLine49 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray51 = commandLine49.getOptionValues(""hi!"");
        java.lang.String str54 = commandLine49.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str56 = commandLine49.getOptionValue(""arg"");
        java.lang.String[] strArray57 = commandLine49.getArgs();
        java.lang.String[] strArray59 = posixParser42.flatten(options48, strArray57, false);
        boolean boolean61 = options48.hasOption(""arg"");
        java.util.Collection collection62 = options48.getOptions();
        org.apache.commons.cli.CommandLine commandLine63 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray65 = commandLine63.getOptionValues(""hi!"");
        java.lang.String[] strArray66 = commandLine63.getArgs();
        java.util.Iterator iterator67 = commandLine63.iterator();
        boolean boolean69 = commandLine63.hasOption(""[ option: 4  :: null ]"");
        java.lang.String str72 = commandLine63.getOptionValue(""[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]"", ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"");
        java.lang.String[] strArray73 = commandLine63.getArgs();
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options48, strArray73, properties74, true);
        posixParser0.burstToken(""[ option: 4  :: null :: [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ] ]"", false);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue(""'"" + char7 + ""' != '"" + '\000' + ""'"", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNull(strArray51);
        org.junit.Assert.assertEquals(""'"" + str54 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str54, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue(""'"" + boolean61 + ""' != '"" + false + ""'"", boolean61 == false);
        org.junit.Assert.assertNotNull(collection62);
        org.junit.Assert.assertNull(strArray65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(iterator67);
        org.junit.Assert.assertTrue(""'"" + boolean69 + ""' != '"" + false + ""'"", boolean69 == false);
        org.junit.Assert.assertEquals(""'"" + str72 + ""' != '"" + ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"" + ""'"", str72, ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"");
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine76);"
134,224,7191,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0225"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues(""hi!"");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("""");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        org.apache.commons.cli.PosixParser posixParser63 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option66 = org.apache.commons.cli.OptionBuilder.create('4');
        option66.setDescription("""");
        org.apache.commons.cli.Options options69 = options64.addOption(option66);
        org.apache.commons.cli.CommandLine commandLine70 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray72 = commandLine70.getOptionValues(""hi!"");
        java.lang.String[] strArray73 = commandLine70.getArgs();
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine75 = posixParser63.parse(options64, strArray73, properties74);
        java.lang.String[] strArray78 = new java.lang.String[] { ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"", ""hi!"" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser0.parse(options64, strArray78, properties79, true);
        java.util.List list82 = commandLine81.getArgList();
        java.lang.String str85 = commandLine81.getOptionValue('#', ""[ option: 4  :: null ]"");
        java.lang.String[] strArray86 = commandLine81.getArgs();
        java.lang.String str88 = commandLine81.getOptionValue('=');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue(""'"" + boolean36 + ""' != '"" + false + ""'"", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(option66);
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertNull(strArray72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine75);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(list82);
        org.junit.Assert.assertEquals(""'"" + str85 + ""' != '"" + ""[ option: 4  :: null ]"" + ""'"", str85, ""[ option: 4  :: null ]"");
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNull(str88);"
135,62,7123,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0063"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues(""hi!"");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        java.util.Collection collection53 = options22.getOptionGroups();
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        option56.setDescription("""");
        org.apache.commons.cli.Options options59 = options54.addOption(option56);
        java.util.Collection collection60 = options54.getOptionGroups();
        org.apache.commons.cli.Options options64 = options54.addOption("""", false, ""arg"");
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option67 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup68 = options65.getOptionGroup(option67);
        org.apache.commons.cli.Option option70 = org.apache.commons.cli.OptionBuilder.create('4');
        char char71 = option70.getValueSeparator();
        org.apache.commons.cli.Option option73 = org.apache.commons.cli.OptionBuilder.create('4');
        option73.setDescription("""");
        option70.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup77 = options65.getOptionGroup(option70);
        boolean boolean78 = option70.hasArgName();
        org.apache.commons.cli.Options options79 = options54.addOption(option70);
        org.apache.commons.cli.Options options80 = options22.addOption(option70);
        org.apache.commons.cli.OptionGroup optionGroup81 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options82 = options22.addOptionGroup(optionGroup81);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue(""'"" + boolean36 + ""' != '"" + false + ""'"", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(collection53);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNotNull(collection60);
        org.junit.Assert.assertNotNull(options64);
        org.junit.Assert.assertNotNull(option67);
        org.junit.Assert.assertNull(optionGroup68);
        org.junit.Assert.assertNotNull(option70);
        org.junit.Assert.assertTrue(""'"" + char71 + ""' != '"" + '\000' + ""'"", char71 == '\000');
        org.junit.Assert.assertNotNull(option73);
        org.junit.Assert.assertNull(optionGroup77);
        org.junit.Assert.assertTrue(""'"" + boolean78 + ""' != '"" + true + ""'"", boolean78 == true);
        org.junit.Assert.assertNotNull(options79);
        org.junit.Assert.assertNotNull(options80);"
136,483,6808,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0484"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option6.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken(""4"", false);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup42 = options39.getOptionGroup(option41);
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        char char45 = option44.getValueSeparator();
        org.apache.commons.cli.Option option47 = org.apache.commons.cli.OptionBuilder.create('4');
        option47.setDescription("""");
        option44.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup51 = options39.getOptionGroup(option44);
        java.util.Collection collection52 = options39.getOptions();
        java.lang.String[] strArray53 = null;
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options39, strArray53);
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = org.apache.commons.cli.OptionBuilder.create('4');
        option57.setDescription("""");
        org.apache.commons.cli.Options options60 = options55.addOption(option57);
        java.util.Collection collection61 = options55.getOptionGroups();
        org.apache.commons.cli.Options options65 = options55.addOption("""", false, ""arg"");
        java.lang.String str66 = options65.toString();
        java.util.Collection collection67 = options65.getOptions();
        java.util.Collection collection68 = options65.getOptions();
        org.apache.commons.cli.CommandLine commandLine69 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray71 = commandLine69.getOptionValues(""hi!"");
        java.lang.String str74 = commandLine69.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str76 = commandLine69.getOptionValue(""arg"");
        java.lang.String[] strArray77 = commandLine69.getArgs();
        org.apache.commons.cli.CommandLine commandLine78 = posixParser0.parse(options65, strArray77);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue(""'"" + char7 + ""' != '"" + '\000' + ""'"", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertTrue(""'"" + char45 + ""' != '"" + '\000' + ""'"", char45 == '\000');
        org.junit.Assert.assertNotNull(option47);
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(collection52);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(collection61);
        org.junit.Assert.assertNotNull(options65);
        org.junit.Assert.assertEquals(""'"" + str66 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str66, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNotNull(collection67);
        org.junit.Assert.assertNotNull(collection68);
        org.junit.Assert.assertNull(strArray71);
        org.junit.Assert.assertEquals(""'"" + str74 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str74, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(commandLine78);"
137,144,6850,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0145"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        java.util.Collection collection22 = options6.getOptionGroups();
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create('4');
        option25.setDescription("""");
        org.apache.commons.cli.Options options28 = options23.addOption(option25);
        java.util.Collection collection29 = options23.getOptionGroups();
        org.apache.commons.cli.Options options33 = options23.addOption("""", false, ""arg"");
        java.util.Collection collection34 = options23.getOptionGroups();
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option37 = org.apache.commons.cli.OptionBuilder.create('4');
        option37.setDescription("""");
        org.apache.commons.cli.Options options40 = options35.addOption(option37);
        option37.setValueSeparator(' ');
        org.apache.commons.cli.OptionGroup optionGroup43 = options23.getOptionGroup(option37);
        option37.setRequired(false);
        org.apache.commons.cli.CommandLine commandLine46 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray48 = commandLine46.getOptionValues(""hi!"");
        java.lang.String[] strArray49 = commandLine46.getArgs();
        boolean boolean50 = option37.equals((java.lang.Object) strArray49);
        org.apache.commons.cli.OptionGroup optionGroup51 = options6.getOptionGroup(option37);
        org.apache.commons.cli.Options options56 = options6.addOption(""arg"", ""org.apache.commons.cli.UnrecognizedOptionException: hi!"", false, ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.Options options60 = options6.addOption("" "", false, ""hi!"");
        org.apache.commons.cli.Options options61 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option63 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup64 = options61.getOptionGroup(option63);
        org.apache.commons.cli.Option option66 = org.apache.commons.cli.OptionBuilder.create('4');
        char char67 = option66.getValueSeparator();
        org.apache.commons.cli.Option option69 = org.apache.commons.cli.OptionBuilder.create('4');
        option69.setDescription("""");
        option66.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup73 = options61.getOptionGroup(option66);
        int int74 = option66.getId();
        org.apache.commons.cli.Option option78 = new org.apache.commons.cli.Option("""", false, """");
        org.apache.commons.cli.Option option80 = org.apache.commons.cli.OptionBuilder.create('4');
        option80.setDescription("""");
        boolean boolean83 = option80.hasValueSeparator();
        java.util.List list84 = option80.getValuesList();
        int int85 = option80.getArgs();
        option78.setType((java.lang.Object) int85);
        option66.setType((java.lang.Object) int85);
        java.lang.String str89 = option66.getValue(0);
        org.apache.commons.cli.OptionGroup optionGroup90 = options60.getOptionGroup(option66);
        boolean boolean91 = option66.hasOptionalArg();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(collection22);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(collection29);
        org.junit.Assert.assertNotNull(options33);
        org.junit.Assert.assertNotNull(collection34);
        org.junit.Assert.assertNotNull(option37);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNull(strArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue(""'"" + boolean50 + ""' != '"" + false + ""'"", boolean50 == false);
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(options56);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(option63);
        org.junit.Assert.assertNull(optionGroup64);
        org.junit.Assert.assertNotNull(option66);
        org.junit.Assert.assertTrue(""'"" + char67 + ""' != '"" + '\000' + ""'"", char67 == '\000');
        org.junit.Assert.assertNotNull(option69);
        org.junit.Assert.assertNull(optionGroup73);
        org.junit.Assert.assertTrue(""'"" + int74 + ""' != '"" + 52 + ""'"", int74 == 52);
        org.junit.Assert.assertNotNull(option80);
        org.junit.Assert.assertTrue(""'"" + boolean83 + ""' != '"" + false + ""'"", boolean83 == false);
        org.junit.Assert.assertNotNull(list84);
        org.junit.Assert.assertTrue(""'"" + int85 + ""' != '"" + (-1) + ""'"", int85 == (-1));
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertNull(optionGroup90);
        org.junit.Assert.assertTrue(""'"" + boolean91 + ""' != '"" + false + ""'"", boolean91 == false);"
138,420,7102,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0421"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues(""hi!"");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        java.util.Collection collection53 = options22.getOptionGroups();
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        option56.setDescription("""");
        org.apache.commons.cli.Options options59 = options54.addOption(option56);
        java.util.Collection collection60 = options54.getOptionGroups();
        org.apache.commons.cli.Options options64 = options54.addOption("""", false, ""arg"");
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option67 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup68 = options65.getOptionGroup(option67);
        org.apache.commons.cli.Option option70 = org.apache.commons.cli.OptionBuilder.create('4');
        char char71 = option70.getValueSeparator();
        org.apache.commons.cli.Option option73 = org.apache.commons.cli.OptionBuilder.create('4');
        option73.setDescription("""");
        option70.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup77 = options65.getOptionGroup(option70);
        boolean boolean78 = option70.hasArgName();
        org.apache.commons.cli.Options options79 = options54.addOption(option70);
        org.apache.commons.cli.Options options80 = options22.addOption(option70);
        // The following exception was thrown during execution in test generation
        try {
            option70.addValue(""org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!"");
            org.junit.Assert.fail(""Expected exception of type java.lang.RuntimeException; message: NO_ARGS_ALLOWED"");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue(""'"" + boolean36 + ""' != '"" + false + ""'"", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(collection53);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNotNull(collection60);
        org.junit.Assert.assertNotNull(options64);
        org.junit.Assert.assertNotNull(option67);
        org.junit.Assert.assertNull(optionGroup68);
        org.junit.Assert.assertNotNull(option70);
        org.junit.Assert.assertTrue(""'"" + char71 + ""' != '"" + '\000' + ""'"", char71 == '\000');
        org.junit.Assert.assertNotNull(option73);
        org.junit.Assert.assertNull(optionGroup77);
        org.junit.Assert.assertTrue(""'"" + boolean78 + ""' != '"" + true + ""'"", boolean78 == true);
        org.junit.Assert.assertNotNull(options79);
        org.junit.Assert.assertNotNull(options80);"
139,93,6828,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0094"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken(""hi!"", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("""");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptionGroups();
        org.apache.commons.cli.Options options31 = options21.addOption("""", false, ""arg"");
        java.util.List list32 = options31.getRequiredOptions();
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create(""arg"");
        org.apache.commons.cli.Options options35 = options31.addOption(option34);
        boolean boolean37 = options31.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        java.util.Collection collection38 = options31.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine39 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine39.getOptionValues(""hi!"");
        java.lang.String str44 = commandLine39.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str46 = commandLine39.getOptionValue(""arg"");
        java.lang.String[] strArray47 = commandLine39.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine50 = posixParser0.parse(options31, strArray47, properties48, true);
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create('4');
        option53.setDescription("""");
        org.apache.commons.cli.Options options56 = options51.addOption(option53);
        java.util.Collection collection57 = options51.getOptionGroups();
        java.util.Collection collection58 = options51.getOptionGroups();
        java.util.Collection collection59 = options51.getOptionGroups();
        org.apache.commons.cli.PosixParser posixParser60 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options61 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option63 = org.apache.commons.cli.OptionBuilder.create('4');
        option63.setDescription("""");
        org.apache.commons.cli.Options options66 = options61.addOption(option63);
        org.apache.commons.cli.CommandLine commandLine67 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray69 = commandLine67.getOptionValues(""hi!"");
        java.lang.String str72 = commandLine67.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str74 = commandLine67.getOptionValue(""arg"");
        java.lang.String[] strArray75 = commandLine67.getArgs();
        java.lang.String[] strArray77 = posixParser60.flatten(options66, strArray75, false);
        java.util.Properties properties78 = null;
        org.apache.commons.cli.CommandLine commandLine79 = posixParser0.parse(options51, strArray77, properties78);
        posixParser0.burstToken(""[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]"", false);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(options31);
        org.junit.Assert.assertNotNull(list32);
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertTrue(""'"" + boolean37 + ""' != '"" + false + ""'"", boolean37 == false);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertEquals(""'"" + str44 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str44, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNotNull(options56);
        org.junit.Assert.assertNotNull(collection57);
        org.junit.Assert.assertNotNull(collection58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(option63);
        org.junit.Assert.assertNotNull(options66);
        org.junit.Assert.assertNull(strArray69);
        org.junit.Assert.assertEquals(""'"" + str72 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str72, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(commandLine79);"
140,296,6707,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0297"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option6.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken(""[ option: 4  :: null ::  ]"", true);
        posixParser0.burstToken(""[ Options: [ short {} ] [ long {} ]"", true);
        org.apache.commons.cli.PosixParser posixParser42 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setDescription("""");
        org.apache.commons.cli.Options options48 = options43.addOption(option45);
        org.apache.commons.cli.CommandLine commandLine49 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray51 = commandLine49.getOptionValues(""hi!"");
        java.lang.String str54 = commandLine49.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str56 = commandLine49.getOptionValue(""arg"");
        java.lang.String[] strArray57 = commandLine49.getArgs();
        java.lang.String[] strArray59 = posixParser42.flatten(options48, strArray57, false);
        boolean boolean61 = options48.hasOption(""arg"");
        java.util.Collection collection62 = options48.getOptions();
        org.apache.commons.cli.CommandLine commandLine63 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray65 = commandLine63.getOptionValues(""hi!"");
        java.lang.String[] strArray66 = commandLine63.getArgs();
        java.util.Iterator iterator67 = commandLine63.iterator();
        boolean boolean69 = commandLine63.hasOption(""[ option: 4  :: null ]"");
        java.lang.String str72 = commandLine63.getOptionValue(""[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]"", ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"");
        java.lang.String[] strArray73 = commandLine63.getArgs();
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options48, strArray73, properties74, true);
        java.lang.Class<?> wildcardClass77 = strArray73.getClass();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue(""'"" + char7 + ""' != '"" + '\000' + ""'"", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNull(strArray51);
        org.junit.Assert.assertEquals(""'"" + str54 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str54, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue(""'"" + boolean61 + ""' != '"" + false + ""'"", boolean61 == false);
        org.junit.Assert.assertNotNull(collection62);
        org.junit.Assert.assertNull(strArray65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(iterator67);
        org.junit.Assert.assertTrue(""'"" + boolean69 + ""' != '"" + false + ""'"", boolean69 == false);
        org.junit.Assert.assertEquals(""'"" + str72 + ""' != '"" + ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"" + ""'"", str72, ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"");
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(wildcardClass77);"
141,109,6726,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0110"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option6.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken(""4"", false);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup42 = options39.getOptionGroup(option41);
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        char char45 = option44.getValueSeparator();
        org.apache.commons.cli.Option option47 = org.apache.commons.cli.OptionBuilder.create('4');
        option47.setDescription("""");
        option44.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup51 = options39.getOptionGroup(option44);
        java.util.Collection collection52 = options39.getOptions();
        java.lang.String[] strArray53 = null;
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options39, strArray53);
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup58 = options55.getOptionGroup(option57);
        org.apache.commons.cli.Option option60 = options55.getOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        java.util.List list61 = options55.helpOptions();
        org.apache.commons.cli.CommandLine commandLine62 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray64 = commandLine62.getOptionValues(""hi!"");
        java.lang.String str67 = commandLine62.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str69 = commandLine62.getOptionValue(""arg"");
        java.lang.String[] strArray70 = commandLine62.getArgs();
        java.util.Properties properties71 = null;
        org.apache.commons.cli.CommandLine commandLine73 = posixParser0.parse(options55, strArray70, properties71, true);
        org.apache.commons.cli.Option option74 = null;
        // The following exception was thrown during execution in test generation
        try {
            commandLine73.addOption(option74);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue(""'"" + char7 + ""' != '"" + '\000' + ""'"", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertTrue(""'"" + char45 + ""' != '"" + '\000' + ""'"", char45 == '\000');
        org.junit.Assert.assertNotNull(option47);
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(collection52);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNull(optionGroup58);
        org.junit.Assert.assertNull(option60);
        org.junit.Assert.assertNotNull(list61);
        org.junit.Assert.assertNull(strArray64);
        org.junit.Assert.assertEquals(""'"" + str67 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str67, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(commandLine73);"
142,140,7093,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0141"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues(""hi!"");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("""");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        org.apache.commons.cli.PosixParser posixParser63 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option66 = org.apache.commons.cli.OptionBuilder.create('4');
        option66.setDescription("""");
        org.apache.commons.cli.Options options69 = options64.addOption(option66);
        org.apache.commons.cli.CommandLine commandLine70 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray72 = commandLine70.getOptionValues(""hi!"");
        java.lang.String[] strArray73 = commandLine70.getArgs();
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine75 = posixParser63.parse(options64, strArray73, properties74);
        java.lang.String[] strArray78 = new java.lang.String[] { ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"", ""hi!"" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser0.parse(options64, strArray78, properties79, true);
        org.apache.commons.cli.OptionGroup optionGroup82 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options83 = options64.addOptionGroup(optionGroup82);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue(""'"" + boolean36 + ""' != '"" + false + ""'"", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(option66);
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertNull(strArray72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine75);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine81);"
143,87,7086,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0088"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues(""hi!"");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("""");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        org.apache.commons.cli.PosixParser posixParser63 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option66 = org.apache.commons.cli.OptionBuilder.create('4');
        option66.setDescription("""");
        org.apache.commons.cli.Options options69 = options64.addOption(option66);
        org.apache.commons.cli.CommandLine commandLine70 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray72 = commandLine70.getOptionValues(""hi!"");
        java.lang.String[] strArray73 = commandLine70.getArgs();
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine75 = posixParser63.parse(options64, strArray73, properties74);
        java.lang.String[] strArray78 = new java.lang.String[] { ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"", ""hi!"" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser0.parse(options64, strArray78, properties79, true);
        java.util.List list82 = commandLine81.getArgList();
        java.lang.String str85 = commandLine81.getOptionValue('#', ""[ option: 4  :: null ]"");
        java.lang.String[] strArray87 = commandLine81.getOptionValues("""");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue(""'"" + boolean36 + ""' != '"" + false + ""'"", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(option66);
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertNull(strArray72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine75);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(list82);
        org.junit.Assert.assertEquals(""'"" + str85 + ""' != '"" + ""[ option: 4  :: null ]"" + ""'"", str85, ""[ option: 4  :: null ]"");
        org.junit.Assert.assertNull(strArray87);"
144,282,6072,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0283"");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('4');
        option1.setDescription("""");
        option1.setLongOpt(""hi!"");
        option1.setArgName(""arg"");
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup11 = options8.getOptionGroup(option10);
        option1.setType((java.lang.Object) options8);
        option1.setRequired(false);
        org.apache.commons.cli.Options options15 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option17 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup18 = options15.getOptionGroup(option17);
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        char char21 = option20.getValueSeparator();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("""");
        option20.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup27 = options15.getOptionGroup(option20);
        java.util.Collection collection28 = options15.getOptions();
        boolean boolean29 = option1.equals((java.lang.Object) options15);
        org.apache.commons.cli.Option option31 = org.apache.commons.cli.OptionBuilder.create('4');
        boolean boolean32 = option31.hasArgs();
        java.lang.Object obj33 = option31.getType();
        java.lang.String str34 = option31.getLongOpt();
        boolean boolean35 = option31.hasArg();
        org.apache.commons.cli.Option option39 = new org.apache.commons.cli.Option("""", true, """");
        boolean boolean40 = option39.hasOptionalArg();
        java.lang.String str42 = option39.getValue("""");
        java.lang.String str43 = option39.getValue();
        java.util.List list44 = option39.getValuesList();
        option31.setType((java.lang.Object) option39);
        org.apache.commons.cli.Options options46 = options15.addOption(option39);
        java.util.Collection collection47 = options46.getOptions();
        java.util.Collection collection48 = options46.getOptions();
        org.apache.commons.cli.CommandLine commandLine49 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray51 = commandLine49.getOptionValues(""hi!"");
        java.lang.String[] strArray52 = commandLine49.getArgs();
        java.lang.String str54 = commandLine49.getOptionValue(""hi!"");
        boolean boolean56 = commandLine49.hasOption("""");
        java.lang.String str59 = commandLine49.getOptionValue(""[ option: 4  :: null ]"", ""org.apache.commons.cli.MissingOptionException: hi!"");
        java.lang.String[] strArray61 = commandLine49.getOptionValues('4');
        java.lang.String[] strArray63 = commandLine49.getOptionValues('a');
        org.apache.commons.cli.Option option65 = org.apache.commons.cli.OptionBuilder.create(' ');
        boolean boolean66 = option65.hasArgName();
        boolean boolean67 = option65.hasArgName();
        commandLine49.addOption(option65);
        java.lang.String str70 = option65.getValue((int) 'a');
        java.lang.String str72 = option65.getValue(""[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.apache.commons.cli.OptionGroup optionGroup73 = options46.getOptionGroup(option65);
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNull(optionGroup11);
        org.junit.Assert.assertNotNull(option17);
        org.junit.Assert.assertNull(optionGroup18);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertTrue(""'"" + char21 + ""' != '"" + '\000' + ""'"", char21 == '\000');
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertNotNull(collection28);
        org.junit.Assert.assertTrue(""'"" + boolean29 + ""' != '"" + false + ""'"", boolean29 == false);
        org.junit.Assert.assertNotNull(option31);
        org.junit.Assert.assertTrue(""'"" + boolean32 + ""' != '"" + false + ""'"", boolean32 == false);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue(""'"" + boolean35 + ""' != '"" + false + ""'"", boolean35 == false);
        org.junit.Assert.assertTrue(""'"" + boolean40 + ""' != '"" + false + ""'"", boolean40 == false);
        org.junit.Assert.assertEquals(""'"" + str42 + ""' != '"" + """" + ""'"", str42, """");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(list44);
        org.junit.Assert.assertNotNull(options46);
        org.junit.Assert.assertNotNull(collection47);
        org.junit.Assert.assertNotNull(collection48);
        org.junit.Assert.assertNull(strArray51);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue(""'"" + boolean56 + ""' != '"" + false + ""'"", boolean56 == false);
        org.junit.Assert.assertEquals(""'"" + str59 + ""' != '"" + ""org.apache.commons.cli.MissingOptionException: hi!"" + ""'"", str59, ""org.apache.commons.cli.MissingOptionException: hi!"");
        org.junit.Assert.assertNull(strArray61);
        org.junit.Assert.assertNull(strArray63);
        org.junit.Assert.assertNotNull(option65);
        org.junit.Assert.assertTrue(""'"" + boolean66 + ""' != '"" + true + ""'"", boolean66 == true);
        org.junit.Assert.assertTrue(""'"" + boolean67 + ""' != '"" + true + ""'"", boolean67 == true);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertEquals(""'"" + str72 + ""' != '"" + ""[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str72, ""[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(optionGroup73);"
145,321,7004,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0322"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues(""hi!"");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        posixParser0.burstToken(""4"", true);
        org.apache.commons.cli.Options options56 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option58 = org.apache.commons.cli.OptionBuilder.create('4');
        option58.setDescription("""");
        org.apache.commons.cli.Options options61 = options56.addOption(option58);
        java.util.Collection collection62 = options56.getOptionGroups();
        org.apache.commons.cli.Options options66 = options56.addOption("""", false, ""arg"");
        org.apache.commons.cli.Options options67 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option69 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup70 = options67.getOptionGroup(option69);
        org.apache.commons.cli.Option option72 = org.apache.commons.cli.OptionBuilder.create('4');
        char char73 = option72.getValueSeparator();
        org.apache.commons.cli.Option option75 = org.apache.commons.cli.OptionBuilder.create('4');
        option75.setDescription("""");
        option72.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup79 = options67.getOptionGroup(option72);
        boolean boolean80 = option72.hasArgName();
        org.apache.commons.cli.Options options81 = options56.addOption(option72);
        option72.setArgName(""[ Options: [ short {4=[ option: 4  ::  :: [ option: arg [ option: 4  :: null ] +ARG :: 4 ] ]} ] [ long {} ]"");
        java.util.ListIterator listIterator84 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option72, listIterator84);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue(""'"" + boolean36 + ""' != '"" + false + ""'"", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option58);
        org.junit.Assert.assertNotNull(options61);
        org.junit.Assert.assertNotNull(collection62);
        org.junit.Assert.assertNotNull(options66);
        org.junit.Assert.assertNotNull(option69);
        org.junit.Assert.assertNull(optionGroup70);
        org.junit.Assert.assertNotNull(option72);
        org.junit.Assert.assertTrue(""'"" + char73 + ""' != '"" + '\000' + ""'"", char73 == '\000');
        org.junit.Assert.assertNotNull(option75);
        org.junit.Assert.assertNull(optionGroup79);
        org.junit.Assert.assertTrue(""'"" + boolean80 + ""' != '"" + true + ""'"", boolean80 == true);
        org.junit.Assert.assertNotNull(options81);"
146,484,6055,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0485"");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('4');
        java.lang.String str3 = option1.getValue(""arg"");
        org.apache.commons.cli.MissingOptionException missingOptionException5 = new org.apache.commons.cli.MissingOptionException(""hi!"");
        boolean boolean6 = option1.equals((java.lang.Object) ""hi!"");
        option1.setValueSeparator('=');
        option1.setLongOpt(""[ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ]"");
        java.lang.String str11 = option1.toString();
        org.apache.commons.cli.PosixParser posixParser12 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option15 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup16 = options13.getOptionGroup(option15);
        org.apache.commons.cli.Option option18 = org.apache.commons.cli.OptionBuilder.create('4');
        char char19 = option18.getValueSeparator();
        org.apache.commons.cli.Option option21 = org.apache.commons.cli.OptionBuilder.create('4');
        option21.setDescription("""");
        option18.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup25 = options13.getOptionGroup(option18);
        boolean boolean27 = options13.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option31 = org.apache.commons.cli.OptionBuilder.create('4');
        option31.setDescription("""");
        org.apache.commons.cli.Options options34 = options29.addOption(option31);
        org.apache.commons.cli.CommandLine commandLine35 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray37 = commandLine35.getOptionValues(""hi!"");
        java.lang.String str40 = commandLine35.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str42 = commandLine35.getOptionValue(""arg"");
        java.lang.String[] strArray43 = commandLine35.getArgs();
        java.lang.String[] strArray45 = posixParser28.flatten(options34, strArray43, false);
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine47 = posixParser12.parse(options13, strArray45, properties46);
        java.util.List list48 = commandLine47.getArgList();
        java.lang.String[] strArray49 = commandLine47.getArgs();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        char char53 = option52.getValueSeparator();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("""");
        option52.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup59 = options50.getOptionGroup(option52);
        boolean boolean60 = option52.hasValueSeparator();
        commandLine47.addOption(option52);
        java.lang.String str62 = option52.toString();
        java.lang.String str63 = option52.toString();
        boolean boolean64 = option1.equals((java.lang.Object) option52);
        java.lang.String str65 = option52.getLongOpt();
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertEquals(""'"" + str3 + ""' != '"" + ""arg"" + ""'"", str3, ""arg"");
        org.junit.Assert.assertTrue(""'"" + boolean6 + ""' != '"" + false + ""'"", boolean6 == false);
        org.junit.Assert.assertEquals(""'"" + str11 + ""' != '"" + ""[ option: 4 [ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ]  :: null ]"" + ""'"", str11, ""[ option: 4 [ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ]  :: null ]"");
        org.junit.Assert.assertNotNull(option15);
        org.junit.Assert.assertNull(optionGroup16);
        org.junit.Assert.assertNotNull(option18);
        org.junit.Assert.assertTrue(""'"" + char19 + ""' != '"" + '\000' + ""'"", char19 == '\000');
        org.junit.Assert.assertNotNull(option21);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertTrue(""'"" + boolean27 + ""' != '"" + false + ""'"", boolean27 == false);
        org.junit.Assert.assertNotNull(option31);
        org.junit.Assert.assertNotNull(options34);
        org.junit.Assert.assertNull(strArray37);
        org.junit.Assert.assertEquals(""'"" + str40 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str40, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine47);
        org.junit.Assert.assertNotNull(list48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertTrue(""'"" + char53 + ""' != '"" + '\000' + ""'"", char53 == '\000');
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNull(optionGroup59);
        org.junit.Assert.assertTrue(""'"" + boolean60 + ""' != '"" + false + ""'"", boolean60 == false);
        org.junit.Assert.assertEquals(""'"" + str62 + ""' != '"" + ""[ option: 4  :: null ::  ]"" + ""'"", str62, ""[ option: 4  :: null ::  ]"");
        org.junit.Assert.assertEquals(""'"" + str63 + ""' != '"" + ""[ option: 4  :: null ::  ]"" + ""'"", str63, ""[ option: 4  :: null ::  ]"");
        org.junit.Assert.assertTrue(""'"" + boolean64 + ""' != '"" + false + ""'"", boolean64 == false);
        org.junit.Assert.assertNull(str65);"
147,193,6733,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0194"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken(""hi!"", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("""");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptionGroups();
        org.apache.commons.cli.Options options31 = options21.addOption("""", false, ""arg"");
        java.util.List list32 = options31.getRequiredOptions();
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create(""arg"");
        org.apache.commons.cli.Options options35 = options31.addOption(option34);
        boolean boolean37 = options31.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        java.util.Collection collection38 = options31.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine39 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine39.getOptionValues(""hi!"");
        java.lang.String str44 = commandLine39.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str46 = commandLine39.getOptionValue(""arg"");
        java.lang.String[] strArray47 = commandLine39.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine50 = posixParser0.parse(options31, strArray47, properties48, true);
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create('4');
        option53.setDescription("""");
        org.apache.commons.cli.Options options56 = options51.addOption(option53);
        java.util.Collection collection57 = options51.getOptionGroups();
        java.util.Collection collection58 = options51.getOptionGroups();
        java.util.Collection collection59 = options51.getOptionGroups();
        org.apache.commons.cli.PosixParser posixParser60 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options61 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option63 = org.apache.commons.cli.OptionBuilder.create('4');
        option63.setDescription("""");
        org.apache.commons.cli.Options options66 = options61.addOption(option63);
        org.apache.commons.cli.CommandLine commandLine67 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray69 = commandLine67.getOptionValues(""hi!"");
        java.lang.String str72 = commandLine67.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str74 = commandLine67.getOptionValue(""arg"");
        java.lang.String[] strArray75 = commandLine67.getArgs();
        java.lang.String[] strArray77 = posixParser60.flatten(options66, strArray75, false);
        java.util.Properties properties78 = null;
        org.apache.commons.cli.CommandLine commandLine79 = posixParser0.parse(options51, strArray77, properties78);
        java.lang.String[] strArray81 = commandLine79.getOptionValues("""");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(options31);
        org.junit.Assert.assertNotNull(list32);
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertTrue(""'"" + boolean37 + ""' != '"" + false + ""'"", boolean37 == false);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertEquals(""'"" + str44 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str44, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNotNull(options56);
        org.junit.Assert.assertNotNull(collection57);
        org.junit.Assert.assertNotNull(collection58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(option63);
        org.junit.Assert.assertNotNull(options66);
        org.junit.Assert.assertNull(strArray69);
        org.junit.Assert.assertEquals(""'"" + str72 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str72, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(commandLine79);
        org.junit.Assert.assertNull(strArray81);"
148,86,6722,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0087"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken(""hi!"", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("""");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptionGroups();
        org.apache.commons.cli.Options options31 = options21.addOption("""", false, ""arg"");
        java.util.List list32 = options31.getRequiredOptions();
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create(""arg"");
        org.apache.commons.cli.Options options35 = options31.addOption(option34);
        boolean boolean37 = options31.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        java.util.Collection collection38 = options31.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine39 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine39.getOptionValues(""hi!"");
        java.lang.String str44 = commandLine39.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str46 = commandLine39.getOptionValue(""arg"");
        java.lang.String[] strArray47 = commandLine39.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine50 = posixParser0.parse(options31, strArray47, properties48, true);
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create('4');
        option53.setDescription("""");
        org.apache.commons.cli.Options options56 = options51.addOption(option53);
        java.util.Collection collection57 = options51.getOptionGroups();
        java.util.Collection collection58 = options51.getOptionGroups();
        java.util.Collection collection59 = options51.getOptionGroups();
        org.apache.commons.cli.PosixParser posixParser60 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options61 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option63 = org.apache.commons.cli.OptionBuilder.create('4');
        option63.setDescription("""");
        org.apache.commons.cli.Options options66 = options61.addOption(option63);
        org.apache.commons.cli.CommandLine commandLine67 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray69 = commandLine67.getOptionValues(""hi!"");
        java.lang.String str72 = commandLine67.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str74 = commandLine67.getOptionValue(""arg"");
        java.lang.String[] strArray75 = commandLine67.getArgs();
        java.lang.String[] strArray77 = posixParser60.flatten(options66, strArray75, false);
        java.util.Properties properties78 = null;
        org.apache.commons.cli.CommandLine commandLine79 = posixParser0.parse(options51, strArray77, properties78);
        java.lang.Object obj81 = commandLine79.getOptionObject(""4"");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(options31);
        org.junit.Assert.assertNotNull(list32);
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertTrue(""'"" + boolean37 + ""' != '"" + false + ""'"", boolean37 == false);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertEquals(""'"" + str44 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str44, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNotNull(options56);
        org.junit.Assert.assertNotNull(collection57);
        org.junit.Assert.assertNotNull(collection58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(option63);
        org.junit.Assert.assertNotNull(options66);
        org.junit.Assert.assertNull(strArray69);
        org.junit.Assert.assertEquals(""'"" + str72 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str72, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(commandLine79);
        org.junit.Assert.assertNull(obj81);"
149,317,6632,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0318"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option6.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        org.apache.commons.cli.Options options36 = null;
        org.apache.commons.cli.CommandLine commandLine37 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray39 = commandLine37.getOptionValues(""hi!"");
        java.lang.String[] strArray40 = commandLine37.getArgs();
        java.lang.String[] strArray42 = posixParser0.flatten(options36, strArray40, false);
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        java.lang.String str46 = option44.getValue(""arg"");
        org.apache.commons.cli.MissingOptionException missingOptionException48 = new org.apache.commons.cli.MissingOptionException(""hi!"");
        boolean boolean49 = option44.equals((java.lang.Object) ""hi!"");
        java.lang.String str50 = option44.toString();
        option44.setDescription("""");
        option44.setArgName(""[ option: 4  :: null ]"");
        java.lang.String str56 = option44.getValue(""[ Options: [ short {} ] [ long {} ]"");
        boolean boolean57 = option44.isRequired();
        boolean boolean58 = option44.hasValueSeparator();
        org.apache.commons.cli.Option option60 = org.apache.commons.cli.OptionBuilder.create('4');
        char char61 = option60.getValueSeparator();
        boolean boolean62 = option60.hasArg();
        boolean boolean63 = option60.hasOptionalArg();
        java.lang.Object obj64 = option60.getType();
        option60.setValueSeparator('#');
        org.apache.commons.cli.OptionBuilder optionBuilder67 = org.apache.commons.cli.OptionBuilder.isRequired();
        option60.setType((java.lang.Object) optionBuilder67);
        option44.setType((java.lang.Object) option60);
        option44.setLongOpt(""[ option: 4  :: null ::  ]"");
        java.util.ListIterator listIterator72 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option44, listIterator72);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue(""'"" + char7 + ""' != '"" + '\000' + ""'"", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertEquals(""'"" + str46 + ""' != '"" + ""arg"" + ""'"", str46, ""arg"");
        org.junit.Assert.assertTrue(""'"" + boolean49 + ""' != '"" + false + ""'"", boolean49 == false);
        org.junit.Assert.assertEquals(""'"" + str50 + ""' != '"" + ""[ option: 4  :: null ]"" + ""'"", str50, ""[ option: 4  :: null ]"");
        org.junit.Assert.assertEquals(""'"" + str56 + ""' != '"" + ""[ Options: [ short {} ] [ long {} ]"" + ""'"", str56, ""[ Options: [ short {} ] [ long {} ]"");
        org.junit.Assert.assertTrue(""'"" + boolean57 + ""' != '"" + false + ""'"", boolean57 == false);
        org.junit.Assert.assertTrue(""'"" + boolean58 + ""' != '"" + false + ""'"", boolean58 == false);
        org.junit.Assert.assertNotNull(option60);
        org.junit.Assert.assertTrue(""'"" + char61 + ""' != '"" + '\000' + ""'"", char61 == '\000');
        org.junit.Assert.assertTrue(""'"" + boolean62 + ""' != '"" + false + ""'"", boolean62 == false);
        org.junit.Assert.assertTrue(""'"" + boolean63 + ""' != '"" + false + ""'"", boolean63 == false);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertNotNull(optionBuilder67);"
150,254,6421,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0255"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine8 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine8.getOptionValues(""hi!"");
        java.lang.String str13 = commandLine8.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str15 = commandLine8.getOptionValue(""arg"");
        java.lang.String[] strArray16 = commandLine8.getArgs();
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser0.parse(options1, strArray16, properties17);
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option22 = org.apache.commons.cli.OptionBuilder.create('4');
        option22.setDescription("""");
        org.apache.commons.cli.Options options25 = options20.addOption(option22);
        org.apache.commons.cli.CommandLine commandLine26 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray28 = commandLine26.getOptionValues(""hi!"");
        java.lang.String[] strArray29 = commandLine26.getArgs();
        java.util.Properties properties30 = null;
        org.apache.commons.cli.CommandLine commandLine31 = posixParser19.parse(options20, strArray29, properties30);
        org.apache.commons.cli.PosixParser posixParser32 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options33 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option35 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup36 = options33.getOptionGroup(option35);
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create('4');
        char char39 = option38.getValueSeparator();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create('4');
        option41.setDescription("""");
        option38.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup45 = options33.getOptionGroup(option38);
        boolean boolean47 = options33.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser48 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create('4');
        option51.setDescription("""");
        org.apache.commons.cli.Options options54 = options49.addOption(option51);
        org.apache.commons.cli.CommandLine commandLine55 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray57 = commandLine55.getOptionValues(""hi!"");
        java.lang.String str60 = commandLine55.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str62 = commandLine55.getOptionValue(""arg"");
        java.lang.String[] strArray63 = commandLine55.getArgs();
        java.lang.String[] strArray65 = posixParser48.flatten(options54, strArray63, false);
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser32.parse(options33, strArray65, properties66);
        java.util.List list68 = commandLine67.getArgList();
        java.lang.String[] strArray69 = commandLine67.getArgs();
        java.lang.String[] strArray71 = posixParser0.flatten(options20, strArray69, false);
        java.util.List list72 = options20.getRequiredOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertEquals(""'"" + str13 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str13, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(option22);
        org.junit.Assert.assertNotNull(options25);
        org.junit.Assert.assertNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(option35);
        org.junit.Assert.assertNull(optionGroup36);
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertTrue(""'"" + char39 + ""' != '"" + '\000' + ""'"", char39 == '\000');
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup45);
        org.junit.Assert.assertTrue(""'"" + boolean47 + ""' != '"" + false + ""'"", boolean47 == false);
        org.junit.Assert.assertNotNull(option51);
        org.junit.Assert.assertNotNull(options54);
        org.junit.Assert.assertNull(strArray57);
        org.junit.Assert.assertEquals(""'"" + str60 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str60, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(list68);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(list72);"
151,318,6685,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0319"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken(""hi!"", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("""");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptions();
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        char char31 = option30.getValueSeparator();
        org.apache.commons.cli.Option option33 = org.apache.commons.cli.OptionBuilder.create('4');
        option33.setDescription("""");
        option30.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup37 = options28.getOptionGroup(option30);
        option30.setOptionalArg(true);
        int int40 = option30.getId();
        org.apache.commons.cli.Options options41 = options21.addOption(option30);
        boolean boolean43 = options41.hasOption("""");
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setArgs((int) (short) 100);
        option45.setArgName(""[ option: 4  :: null ]"");
        java.lang.String str50 = option45.getLongOpt();
        boolean boolean51 = option45.hasLongOpt();
        org.apache.commons.cli.Options options52 = options41.addOption(option45);
        java.util.Collection collection53 = options41.getOptions();
        org.apache.commons.cli.PosixParser posixParser54 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = org.apache.commons.cli.OptionBuilder.create('4');
        option57.setDescription("""");
        org.apache.commons.cli.Options options60 = options55.addOption(option57);
        java.util.Collection collection61 = options55.getOptions();
        boolean boolean63 = options55.hasOption(""arg"");
        java.lang.String[] strArray66 = new java.lang.String[] { ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"", ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"" };
        org.apache.commons.cli.CommandLine commandLine67 = posixParser54.parse(options55, strArray66);
        java.lang.String[] strArray69 = posixParser0.flatten(options41, strArray66, false);
        java.util.List list70 = options41.helpOptions();
        java.lang.String str71 = options41.toString();
        org.apache.commons.cli.Option option75 = new org.apache.commons.cli.Option(""4"", false, ""[ option: 4  ::  ]"");
        java.lang.String str76 = option75.getDescription();
        org.apache.commons.cli.Options options77 = options41.addOption(option75);
        java.util.List list78 = options77.helpOptions();
        org.apache.commons.cli.Option option80 = options77.getOption(""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertTrue(""'"" + char31 + ""' != '"" + '\000' + ""'"", char31 == '\000');
        org.junit.Assert.assertNotNull(option33);
        org.junit.Assert.assertNull(optionGroup37);
        org.junit.Assert.assertTrue(""'"" + int40 + ""' != '"" + 52 + ""'"", int40 == 52);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertTrue(""'"" + boolean43 + ""' != '"" + false + ""'"", boolean43 == false);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue(""'"" + boolean51 + ""' != '"" + false + ""'"", boolean51 == false);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(collection53);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(collection61);
        org.junit.Assert.assertTrue(""'"" + boolean63 + ""' != '"" + false + ""'"", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(list70);
        org.junit.Assert.assertEquals(""'"" + str71 + ""' != '"" + ""[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]"" + ""'"", str71, ""[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]"");
        org.junit.Assert.assertEquals(""'"" + str76 + ""' != '"" + ""[ option: 4  ::  ]"" + ""'"", str76, ""[ option: 4  ::  ]"");
        org.junit.Assert.assertNotNull(options77);
        org.junit.Assert.assertNotNull(list78);
        org.junit.Assert.assertNull(option80);"
152,236,6681,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0237"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken(""hi!"", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("""");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptions();
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        char char31 = option30.getValueSeparator();
        org.apache.commons.cli.Option option33 = org.apache.commons.cli.OptionBuilder.create('4');
        option33.setDescription("""");
        option30.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup37 = options28.getOptionGroup(option30);
        option30.setOptionalArg(true);
        int int40 = option30.getId();
        org.apache.commons.cli.Options options41 = options21.addOption(option30);
        boolean boolean43 = options41.hasOption("""");
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setArgs((int) (short) 100);
        option45.setArgName(""[ option: 4  :: null ]"");
        java.lang.String str50 = option45.getLongOpt();
        boolean boolean51 = option45.hasLongOpt();
        org.apache.commons.cli.Options options52 = options41.addOption(option45);
        java.util.Collection collection53 = options41.getOptions();
        org.apache.commons.cli.PosixParser posixParser54 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = org.apache.commons.cli.OptionBuilder.create('4');
        option57.setDescription("""");
        org.apache.commons.cli.Options options60 = options55.addOption(option57);
        java.util.Collection collection61 = options55.getOptions();
        boolean boolean63 = options55.hasOption(""arg"");
        java.lang.String[] strArray66 = new java.lang.String[] { ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"", ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"" };
        org.apache.commons.cli.CommandLine commandLine67 = posixParser54.parse(options55, strArray66);
        java.lang.String[] strArray69 = posixParser0.flatten(options41, strArray66, false);
        java.util.List list70 = options41.helpOptions();
        java.lang.String str71 = options41.toString();
        java.lang.String str72 = options41.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options77 = options41.addOption(""[ option:    :: null :: arg ]"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"", true, """");
            org.junit.Assert.fail(""Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertTrue(""'"" + char31 + ""' != '"" + '\000' + ""'"", char31 == '\000');
        org.junit.Assert.assertNotNull(option33);
        org.junit.Assert.assertNull(optionGroup37);
        org.junit.Assert.assertTrue(""'"" + int40 + ""' != '"" + 52 + ""'"", int40 == 52);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertTrue(""'"" + boolean43 + ""' != '"" + false + ""'"", boolean43 == false);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue(""'"" + boolean51 + ""' != '"" + false + ""'"", boolean51 == false);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(collection53);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(collection61);
        org.junit.Assert.assertTrue(""'"" + boolean63 + ""' != '"" + false + ""'"", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(list70);
        org.junit.Assert.assertEquals(""'"" + str71 + ""' != '"" + ""[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]"" + ""'"", str71, ""[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]"");
        org.junit.Assert.assertEquals(""'"" + str72 + ""' != '"" + ""[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]"" + ""'"", str72, ""[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]"");"
153,175,6845,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0176"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("""");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("""");
        option26.setLongOpt(""hi!"");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues(""hi!"");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("""");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        org.apache.commons.cli.Options options50 = options40.addOption("""", false, ""arg"");
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup54 = options51.getOptionGroup(option53);
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        char char57 = option56.getValueSeparator();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        option59.setDescription("""");
        option56.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup63 = options51.getOptionGroup(option56);
        boolean boolean64 = option56.hasArgName();
        org.apache.commons.cli.Options options65 = options40.addOption(option56);
        org.apache.commons.cli.CommandLine commandLine66 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray68 = commandLine66.getOptionValues(""hi!"");
        java.lang.String str71 = commandLine66.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str73 = commandLine66.getOptionValue(""arg"");
        java.lang.String[] strArray74 = commandLine66.getArgs();
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options40, strArray74, properties75);
        posixParser0.burstToken(""[ option: 4  :: null ]"", true);
        org.apache.commons.cli.Options options80 = null;
        java.lang.String[] strArray81 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.CommandLine commandLine82 = posixParser0.parse(options80, strArray81);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue(""'"" + boolean31 + ""' != '"" + true + ""'"", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNotNull(options50);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertTrue(""'"" + char57 + ""' != '"" + '\000' + ""'"", char57 == '\000');
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNull(optionGroup63);
        org.junit.Assert.assertTrue(""'"" + boolean64 + ""' != '"" + true + ""'"", boolean64 == true);
        org.junit.Assert.assertNotNull(options65);
        org.junit.Assert.assertNull(strArray68);
        org.junit.Assert.assertEquals(""'"" + str71 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str71, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine76);"
154,380,6607,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0381"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option6.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken(""4"", false);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup42 = options39.getOptionGroup(option41);
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        char char45 = option44.getValueSeparator();
        org.apache.commons.cli.Option option47 = org.apache.commons.cli.OptionBuilder.create('4');
        option47.setDescription("""");
        option44.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup51 = options39.getOptionGroup(option44);
        java.util.Collection collection52 = options39.getOptions();
        java.lang.String[] strArray53 = null;
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options39, strArray53);
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = org.apache.commons.cli.OptionBuilder.create('4');
        option57.setDescription("""");
        org.apache.commons.cli.Options options60 = options55.addOption(option57);
        java.util.List list61 = option57.getValuesList();
        java.lang.String str62 = option57.getOpt();
        org.apache.commons.cli.Option option64 = org.apache.commons.cli.OptionBuilder.create(""arg"");
        java.lang.String str65 = option64.getOpt();
        boolean boolean66 = option64.isRequired();
        boolean boolean67 = option57.equals((java.lang.Object) option64);
        org.apache.commons.cli.Options options68 = options39.addOption(option57);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options72 = options39.addOption(""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"", true, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ], arg=[ option: arg  :: null ]} ] [ long {} ]"");
            org.junit.Assert.fail(""Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue(""'"" + char7 + ""' != '"" + '\000' + ""'"", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertTrue(""'"" + char45 + ""' != '"" + '\000' + ""'"", char45 == '\000');
        org.junit.Assert.assertNotNull(option47);
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(collection52);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(list61);
        org.junit.Assert.assertEquals(""'"" + str62 + ""' != '"" + ""4"" + ""'"", str62, ""4"");
        org.junit.Assert.assertNotNull(option64);
        org.junit.Assert.assertEquals(""'"" + str65 + ""' != '"" + ""arg"" + ""'"", str65, ""arg"");
        org.junit.Assert.assertTrue(""'"" + boolean66 + ""' != '"" + false + ""'"", boolean66 == false);
        org.junit.Assert.assertTrue(""'"" + boolean67 + ""' != '"" + false + ""'"", boolean67 == false);
        org.junit.Assert.assertNotNull(options68);"
155,368,6603,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0369"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option6.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup39 = options36.getOptionGroup(option38);
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create('4');
        char char42 = option41.getValueSeparator();
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        option44.setDescription("""");
        option41.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup48 = options36.getOptionGroup(option41);
        org.apache.commons.cli.Option option50 = org.apache.commons.cli.OptionBuilder.create('4');
        boolean boolean51 = option50.isRequired();
        org.apache.commons.cli.Options options52 = options36.addOption(option50);
        java.util.List list53 = options52.getRequiredOptions();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setArgs((int) (short) 100);
        option55.setArgName(""[ option: 4  :: null ]"");
        java.lang.String str60 = option55.getLongOpt();
        java.lang.String str62 = option55.getValue((int) (short) -1);
        org.apache.commons.cli.CommandLine commandLine63 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray65 = commandLine63.getOptionValues(""hi!"");
        java.lang.String str68 = commandLine63.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str70 = commandLine63.getOptionValue(""arg"");
        java.lang.String[] strArray71 = commandLine63.getArgs();
        option55.setType((java.lang.Object) strArray71);
        java.util.Properties properties73 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser0.parse(options52, strArray71, properties73);
        posixParser0.burstToken(""[ Options: [ short {} ] [ long {} ]"", false);
        posixParser0.burstToken(""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ::  ]} ] [ long {} ]"", false);
        posixParser0.burstToken(""a"", true);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue(""'"" + char7 + ""' != '"" + '\000' + ""'"", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertNull(optionGroup39);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertTrue(""'"" + char42 + ""' != '"" + '\000' + ""'"", char42 == '\000');
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertNull(optionGroup48);
        org.junit.Assert.assertNotNull(option50);
        org.junit.Assert.assertTrue(""'"" + boolean51 + ""' != '"" + false + ""'"", boolean51 == false);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(list53);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(strArray65);
        org.junit.Assert.assertEquals(""'"" + str68 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str68, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(commandLine74);"
156,270,6531,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0271"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option6.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create('4');
        option38.setDescription("""");
        org.apache.commons.cli.Options options41 = options36.addOption(option38);
        java.util.Collection collection42 = options36.getOptionGroups();
        org.apache.commons.cli.Options options46 = options36.addOption("""", false, ""arg"");
        org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option49 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup50 = options47.getOptionGroup(option49);
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        char char53 = option52.getValueSeparator();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("""");
        option52.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup59 = options47.getOptionGroup(option52);
        boolean boolean60 = option52.hasArgName();
        org.apache.commons.cli.Options options61 = options36.addOption(option52);
        java.util.List list62 = options36.helpOptions();
        org.apache.commons.cli.CommandLine commandLine63 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray65 = commandLine63.getOptionValues(""hi!"");
        java.lang.String str68 = commandLine63.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str70 = commandLine63.getOptionValue(""arg"");
        java.lang.String[] strArray71 = commandLine63.getArgs();
        java.lang.String[] strArray73 = posixParser0.flatten(options36, strArray71, false);
        posixParser0.burstToken(""[ Options: [ short { =[ option:    +ARG :: org.apache.commons.cli.UnrecognizedOptionException: hi! ], 4=[ option: 4  ::  ]} ] [ long {=[ option:    +ARG :: org.apache.commons.cli.UnrecognizedOptionException: hi! ]} ]"", false);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue(""'"" + char7 + ""' != '"" + '\000' + ""'"", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertNotNull(collection42);
        org.junit.Assert.assertNotNull(options46);
        org.junit.Assert.assertNotNull(option49);
        org.junit.Assert.assertNull(optionGroup50);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertTrue(""'"" + char53 + ""' != '"" + '\000' + ""'"", char53 == '\000');
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNull(optionGroup59);
        org.junit.Assert.assertTrue(""'"" + boolean60 + ""' != '"" + true + ""'"", boolean60 == true);
        org.junit.Assert.assertNotNull(options61);
        org.junit.Assert.assertNotNull(list62);
        org.junit.Assert.assertNull(strArray65);
        org.junit.Assert.assertEquals(""'"" + str68 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str68, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray73);"
157,458,6493,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0459"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option6.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        java.util.List list36 = commandLine35.getArgList();
        java.lang.String[] strArray37 = commandLine35.getArgs();
        java.lang.String[] strArray38 = commandLine35.getArgs();
        commandLine35.addArg("""");
        java.lang.Object obj42 = commandLine35.getOptionObject("" "");
        org.apache.commons.cli.Option[] optionArray43 = commandLine35.getOptions();
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        boolean boolean46 = option45.hasOptionalArg();
        java.lang.String str48 = option45.getValue(""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        int int49 = option45.getArgs();
        commandLine35.addOption(option45);
        java.lang.String[] strArray51 = commandLine35.getArgs();
        org.apache.commons.cli.CommandLine commandLine52 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray54 = commandLine52.getOptionValues(""hi!"");
        java.lang.String[] strArray55 = commandLine52.getArgs();
        java.util.Iterator iterator56 = commandLine52.iterator();
        java.lang.String str59 = commandLine52.getOptionValue(""[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]"", ""arg"");
        java.lang.String str61 = commandLine52.getOptionValue(""[ option:  +ARG ::  ]"");
        org.apache.commons.cli.Options options62 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option64 = org.apache.commons.cli.OptionBuilder.create('4');
        option64.setDescription("""");
        org.apache.commons.cli.Options options67 = options62.addOption(option64);
        java.util.List list68 = option64.getValuesList();
        boolean boolean69 = option64.hasArgs();
        commandLine52.addOption(option64);
        option64.setArgs((int) (byte) 1);
        boolean boolean73 = option64.hasArg();
        commandLine35.addOption(option64);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue(""'"" + char7 + ""' != '"" + '\000' + ""'"", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(list36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNotNull(optionArray43);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertTrue(""'"" + boolean46 + ""' != '"" + false + ""'"", boolean46 == false);
        org.junit.Assert.assertEquals(""'"" + str48 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str48, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertTrue(""'"" + int49 + ""' != '"" + (-1) + ""'"", int49 == (-1));
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNull(strArray54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(iterator56);
        org.junit.Assert.assertEquals(""'"" + str59 + ""' != '"" + ""arg"" + ""'"", str59, ""arg"");
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(option64);
        org.junit.Assert.assertNotNull(options67);
        org.junit.Assert.assertNotNull(list68);
        org.junit.Assert.assertTrue(""'"" + boolean69 + ""' != '"" + false + ""'"", boolean69 == false);
        org.junit.Assert.assertTrue(""'"" + boolean73 + ""' != '"" + true + ""'"", boolean73 == true);"
158,90,6829,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0091"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues(""hi!"");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        java.util.Collection collection53 = options22.getOptionGroups();
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        option56.setDescription("""");
        org.apache.commons.cli.Options options59 = options54.addOption(option56);
        java.util.Collection collection60 = options54.getOptionGroups();
        org.apache.commons.cli.Options options64 = options54.addOption("""", false, ""arg"");
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option67 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup68 = options65.getOptionGroup(option67);
        org.apache.commons.cli.Option option70 = org.apache.commons.cli.OptionBuilder.create('4');
        char char71 = option70.getValueSeparator();
        org.apache.commons.cli.Option option73 = org.apache.commons.cli.OptionBuilder.create('4');
        option73.setDescription("""");
        option70.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup77 = options65.getOptionGroup(option70);
        boolean boolean78 = option70.hasArgName();
        org.apache.commons.cli.Options options79 = options54.addOption(option70);
        org.apache.commons.cli.Options options80 = options22.addOption(option70);
        java.lang.String str81 = option70.getKey();
        option70.setArgs(0);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue(""'"" + boolean36 + ""' != '"" + false + ""'"", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(collection53);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNotNull(collection60);
        org.junit.Assert.assertNotNull(options64);
        org.junit.Assert.assertNotNull(option67);
        org.junit.Assert.assertNull(optionGroup68);
        org.junit.Assert.assertNotNull(option70);
        org.junit.Assert.assertTrue(""'"" + char71 + ""' != '"" + '\000' + ""'"", char71 == '\000');
        org.junit.Assert.assertNotNull(option73);
        org.junit.Assert.assertNull(optionGroup77);
        org.junit.Assert.assertTrue(""'"" + boolean78 + ""' != '"" + true + ""'"", boolean78 == true);
        org.junit.Assert.assertNotNull(options79);
        org.junit.Assert.assertNotNull(options80);
        org.junit.Assert.assertEquals(""'"" + str81 + ""' != '"" + ""4"" + ""'"", str81, ""4"");"
159,374,6482,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0375"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option6.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken(""4"", false);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup42 = options39.getOptionGroup(option41);
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        char char45 = option44.getValueSeparator();
        org.apache.commons.cli.Option option47 = org.apache.commons.cli.OptionBuilder.create('4');
        option47.setDescription("""");
        option44.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup51 = options39.getOptionGroup(option44);
        java.util.Collection collection52 = options39.getOptions();
        java.lang.String[] strArray53 = null;
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options39, strArray53);
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = org.apache.commons.cli.OptionBuilder.create('4');
        option57.setDescription("""");
        org.apache.commons.cli.Options options60 = options55.addOption(option57);
        java.util.List list61 = options55.helpOptions();
        org.apache.commons.cli.Options options66 = options55.addOption(""arg"", ""org.apache.commons.cli.UnrecognizedOptionException: hi!"", false, """");
        org.apache.commons.cli.CommandLine commandLine67 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray69 = commandLine67.getOptionValues(""hi!"");
        java.lang.String[] strArray70 = commandLine67.getArgs();
        org.apache.commons.cli.CommandLine commandLine72 = posixParser0.parse(options66, strArray70, true);
        java.lang.String str73 = options66.toString();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue(""'"" + char7 + ""' != '"" + '\000' + ""'"", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertTrue(""'"" + char45 + ""' != '"" + '\000' + ""'"", char45 == '\000');
        org.junit.Assert.assertNotNull(option47);
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(collection52);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(list61);
        org.junit.Assert.assertNotNull(options66);
        org.junit.Assert.assertNull(strArray69);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(commandLine72);
        org.junit.Assert.assertEquals(""'"" + str73 + ""' != '"" + ""[ Options: [ short {4=[ option: 4  ::  ], arg=[ option: arg org.apache.commons.cli.UnrecognizedOptionException: hi!  ::  ]} ] [ long {org.apache.commons.cli.UnrecognizedOptionException: hi!=[ option: arg org.apache.commons.cli.UnrecognizedOptionException: hi!  ::  ]} ]"" + ""'"", str73, ""[ Options: [ short {4=[ option: 4  ::  ], arg=[ option: arg org.apache.commons.cli.UnrecognizedOptionException: hi!  ::  ]} ] [ long {org.apache.commons.cli.UnrecognizedOptionException: hi!=[ option: arg org.apache.commons.cli.UnrecognizedOptionException: hi!  ::  ]} ]"");"
160,2,6732,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0003"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("""");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("""");
        option26.setLongOpt(""hi!"");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues(""hi!"");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("""");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        org.apache.commons.cli.Options options50 = options40.addOption("""", false, ""arg"");
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup54 = options51.getOptionGroup(option53);
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        char char57 = option56.getValueSeparator();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        option59.setDescription("""");
        option56.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup63 = options51.getOptionGroup(option56);
        boolean boolean64 = option56.hasArgName();
        org.apache.commons.cli.Options options65 = options40.addOption(option56);
        org.apache.commons.cli.CommandLine commandLine66 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray68 = commandLine66.getOptionValues(""hi!"");
        java.lang.String str71 = commandLine66.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str73 = commandLine66.getOptionValue(""arg"");
        java.lang.String[] strArray74 = commandLine66.getArgs();
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options40, strArray74, properties75);
        org.apache.commons.cli.OptionGroup optionGroup77 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options78 = options40.addOptionGroup(optionGroup77);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue(""'"" + boolean31 + ""' != '"" + true + ""'"", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNotNull(options50);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertTrue(""'"" + char57 + ""' != '"" + '\000' + ""'"", char57 == '\000');
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNull(optionGroup63);
        org.junit.Assert.assertTrue(""'"" + boolean64 + ""' != '"" + true + ""'"", boolean64 == true);
        org.junit.Assert.assertNotNull(options65);
        org.junit.Assert.assertNull(strArray68);
        org.junit.Assert.assertEquals(""'"" + str71 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str71, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine76);"
161,203,6482,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0204"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option6.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken(""4"", false);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup42 = options39.getOptionGroup(option41);
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        char char45 = option44.getValueSeparator();
        org.apache.commons.cli.Option option47 = org.apache.commons.cli.OptionBuilder.create('4');
        option47.setDescription("""");
        option44.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup51 = options39.getOptionGroup(option44);
        java.util.Collection collection52 = options39.getOptions();
        java.lang.String[] strArray53 = null;
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options39, strArray53);
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup58 = options55.getOptionGroup(option57);
        org.apache.commons.cli.Option option60 = options55.getOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        java.util.List list61 = options55.helpOptions();
        org.apache.commons.cli.CommandLine commandLine62 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray64 = commandLine62.getOptionValues(""hi!"");
        java.lang.String str67 = commandLine62.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str69 = commandLine62.getOptionValue(""arg"");
        java.lang.String[] strArray70 = commandLine62.getArgs();
        java.util.Properties properties71 = null;
        org.apache.commons.cli.CommandLine commandLine73 = posixParser0.parse(options55, strArray70, properties71, true);
        boolean boolean75 = commandLine73.hasOption(""hi!"");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue(""'"" + char7 + ""' != '"" + '\000' + ""'"", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertTrue(""'"" + char45 + ""' != '"" + '\000' + ""'"", char45 == '\000');
        org.junit.Assert.assertNotNull(option47);
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(collection52);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNull(optionGroup58);
        org.junit.Assert.assertNull(option60);
        org.junit.Assert.assertNotNull(list61);
        org.junit.Assert.assertNull(strArray64);
        org.junit.Assert.assertEquals(""'"" + str67 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str67, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(commandLine73);
        org.junit.Assert.assertTrue(""'"" + boolean75 + ""' != '"" + false + ""'"", boolean75 == false);"
162,84,6625,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0085"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("""");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("""");
        option26.setLongOpt(""hi!"");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues(""hi!"");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("""");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        java.lang.String[] strArray47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options40, strArray47);
        java.lang.String str51 = commandLine48.getOptionValue(""[ option:    :: null ]"", ""[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]"");
        org.apache.commons.cli.Options options52 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option54 = org.apache.commons.cli.OptionBuilder.create('4');
        option54.setDescription("""");
        org.apache.commons.cli.Options options57 = options52.addOption(option54);
        java.util.Collection collection58 = options52.getOptions();
        org.apache.commons.cli.Options options59 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option61 = org.apache.commons.cli.OptionBuilder.create('4');
        char char62 = option61.getValueSeparator();
        org.apache.commons.cli.Option option64 = org.apache.commons.cli.OptionBuilder.create('4');
        option64.setDescription("""");
        option61.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup68 = options59.getOptionGroup(option61);
        option61.setOptionalArg(true);
        int int71 = option61.getId();
        org.apache.commons.cli.Options options72 = options52.addOption(option61);
        option61.setOptionalArg(false);
        java.lang.String str76 = option61.getValue(""[ option: 4  :: null ::  ]"");
        commandLine48.addOption(option61);
        java.lang.Object obj79 = commandLine48.getOptionObject('#');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue(""'"" + boolean31 + ""' != '"" + true + ""'"", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertEquals(""'"" + str51 + ""' != '"" + ""[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]"" + ""'"", str51, ""[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]"");
        org.junit.Assert.assertNotNull(option54);
        org.junit.Assert.assertNotNull(options57);
        org.junit.Assert.assertNotNull(collection58);
        org.junit.Assert.assertNotNull(option61);
        org.junit.Assert.assertTrue(""'"" + char62 + ""' != '"" + '\000' + ""'"", char62 == '\000');
        org.junit.Assert.assertNotNull(option64);
        org.junit.Assert.assertNull(optionGroup68);
        org.junit.Assert.assertTrue(""'"" + int71 + ""' != '"" + 52 + ""'"", int71 == 52);
        org.junit.Assert.assertNotNull(options72);
        org.junit.Assert.assertEquals(""'"" + str76 + ""' != '"" + ""[ option: 4  :: null ::  ]"" + ""'"", str76, ""[ option: 4  :: null ::  ]"");
        org.junit.Assert.assertNull(obj79);"
163,304,6305,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0305"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptions();
        boolean boolean9 = options1.hasOption(""arg"");
        java.lang.String[] strArray12 = new java.lang.String[] { ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"", ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"" };
        org.apache.commons.cli.CommandLine commandLine13 = posixParser0.parse(options1, strArray12);
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = org.apache.commons.cli.OptionBuilder.create('4');
        option16.setDescription("""");
        org.apache.commons.cli.Options options19 = options14.addOption(option16);
        java.util.Collection collection20 = options14.getOptionGroups();
        org.apache.commons.cli.Options options24 = options14.addOption("""", false, ""arg"");
        java.util.List list25 = options24.getRequiredOptions();
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create(""arg"");
        org.apache.commons.cli.Options options28 = options24.addOption(option27);
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setArgs((int) (short) 100);
        option30.setArgName(""[ option: 4  :: null ]"");
        java.lang.String str35 = option30.getLongOpt();
        java.lang.String str37 = option30.getValue((int) (short) -1);
        org.apache.commons.cli.Options options38 = options28.addOption(option30);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup42 = options39.getOptionGroup(option41);
        boolean boolean43 = option41.hasLongOpt();
        boolean boolean44 = option41.isRequired();
        java.util.List list45 = option41.getValuesList();
        option41.setDescription(""[ option: 4  ::  ]"");
        org.apache.commons.cli.Options options48 = options38.addOption(option41);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        option52.setDescription("""");
        org.apache.commons.cli.Options options55 = options50.addOption(option52);
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray58 = commandLine56.getOptionValues(""hi!"");
        java.lang.String str61 = commandLine56.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str63 = commandLine56.getOptionValue(""arg"");
        java.lang.String[] strArray64 = commandLine56.getArgs();
        java.lang.String[] strArray66 = posixParser49.flatten(options55, strArray64, false);
        org.apache.commons.cli.CommandLine commandLine68 = posixParser0.parse(options38, strArray64, true);
        commandLine68.addArg(""[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]"");
        boolean boolean72 = commandLine68.hasOption('\000');
        java.lang.Object obj74 = commandLine68.getOptionObject(' ');
        org.apache.commons.cli.OptionBuilder optionBuilder75 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) ' ');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertTrue(""'"" + boolean9 + ""' != '"" + false + ""'"", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine13);
        org.junit.Assert.assertNotNull(option16);
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertNotNull(collection20);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertTrue(""'"" + boolean43 + ""' != '"" + false + ""'"", boolean43 == false);
        org.junit.Assert.assertTrue(""'"" + boolean44 + ""' != '"" + false + ""'"", boolean44 == false);
        org.junit.Assert.assertNotNull(list45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNull(strArray58);
        org.junit.Assert.assertEquals(""'"" + str61 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str61, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertTrue(""'"" + boolean72 + ""' != '"" + false + ""'"", boolean72 == false);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertNotNull(optionBuilder75);"
164,116,6462,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0117"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option6.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken(""4"", false);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup42 = options39.getOptionGroup(option41);
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        char char45 = option44.getValueSeparator();
        org.apache.commons.cli.Option option47 = org.apache.commons.cli.OptionBuilder.create('4');
        option47.setDescription("""");
        option44.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup51 = options39.getOptionGroup(option44);
        java.util.Collection collection52 = options39.getOptions();
        java.lang.String[] strArray53 = null;
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options39, strArray53);
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup58 = options55.getOptionGroup(option57);
        org.apache.commons.cli.Option option60 = options55.getOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        java.util.List list61 = options55.helpOptions();
        org.apache.commons.cli.CommandLine commandLine62 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray64 = commandLine62.getOptionValues(""hi!"");
        java.lang.String str67 = commandLine62.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str69 = commandLine62.getOptionValue(""arg"");
        java.lang.String[] strArray70 = commandLine62.getArgs();
        java.util.Properties properties71 = null;
        org.apache.commons.cli.CommandLine commandLine73 = posixParser0.parse(options55, strArray70, properties71, true);
        org.apache.commons.cli.Option[] optionArray74 = commandLine73.getOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue(""'"" + char7 + ""' != '"" + '\000' + ""'"", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertTrue(""'"" + char45 + ""' != '"" + '\000' + ""'"", char45 == '\000');
        org.junit.Assert.assertNotNull(option47);
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(collection52);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNull(optionGroup58);
        org.junit.Assert.assertNull(option60);
        org.junit.Assert.assertNotNull(list61);
        org.junit.Assert.assertNull(strArray64);
        org.junit.Assert.assertEquals(""'"" + str67 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str67, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(commandLine73);
        org.junit.Assert.assertNotNull(optionArray74);"
165,319,6783,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0320"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues(""hi!"");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        java.util.Collection collection53 = options22.getOptionGroups();
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        option56.setDescription("""");
        org.apache.commons.cli.Options options59 = options54.addOption(option56);
        java.util.Collection collection60 = options54.getOptionGroups();
        org.apache.commons.cli.Options options64 = options54.addOption("""", false, ""arg"");
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option67 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup68 = options65.getOptionGroup(option67);
        org.apache.commons.cli.Option option70 = org.apache.commons.cli.OptionBuilder.create('4');
        char char71 = option70.getValueSeparator();
        org.apache.commons.cli.Option option73 = org.apache.commons.cli.OptionBuilder.create('4');
        option73.setDescription("""");
        option70.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup77 = options65.getOptionGroup(option70);
        boolean boolean78 = option70.hasArgName();
        org.apache.commons.cli.Options options79 = options54.addOption(option70);
        org.apache.commons.cli.Options options80 = options22.addOption(option70);
        java.util.Collection collection81 = options80.getOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue(""'"" + boolean36 + ""' != '"" + false + ""'"", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(collection53);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNotNull(collection60);
        org.junit.Assert.assertNotNull(options64);
        org.junit.Assert.assertNotNull(option67);
        org.junit.Assert.assertNull(optionGroup68);
        org.junit.Assert.assertNotNull(option70);
        org.junit.Assert.assertTrue(""'"" + char71 + ""' != '"" + '\000' + ""'"", char71 == '\000');
        org.junit.Assert.assertNotNull(option73);
        org.junit.Assert.assertNull(optionGroup77);
        org.junit.Assert.assertTrue(""'"" + boolean78 + ""' != '"" + true + ""'"", boolean78 == true);
        org.junit.Assert.assertNotNull(options79);
        org.junit.Assert.assertNotNull(options80);
        org.junit.Assert.assertNotNull(collection81);"
166,148,6421,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0149"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option6.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create('4');
        option38.setDescription("""");
        org.apache.commons.cli.Options options41 = options36.addOption(option38);
        java.util.Collection collection42 = options36.getOptionGroups();
        org.apache.commons.cli.Options options46 = options36.addOption("""", false, ""arg"");
        org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option49 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup50 = options47.getOptionGroup(option49);
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        char char53 = option52.getValueSeparator();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("""");
        option52.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup59 = options47.getOptionGroup(option52);
        boolean boolean60 = option52.hasArgName();
        org.apache.commons.cli.Options options61 = options36.addOption(option52);
        java.util.List list62 = options36.helpOptions();
        org.apache.commons.cli.CommandLine commandLine63 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray65 = commandLine63.getOptionValues(""hi!"");
        java.lang.String str68 = commandLine63.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str70 = commandLine63.getOptionValue(""arg"");
        java.lang.String[] strArray71 = commandLine63.getArgs();
        java.lang.String[] strArray73 = posixParser0.flatten(options36, strArray71, false);
        boolean boolean75 = options36.hasOption("""");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue(""'"" + char7 + ""' != '"" + '\000' + ""'"", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertNotNull(collection42);
        org.junit.Assert.assertNotNull(options46);
        org.junit.Assert.assertNotNull(option49);
        org.junit.Assert.assertNull(optionGroup50);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertTrue(""'"" + char53 + ""' != '"" + '\000' + ""'"", char53 == '\000');
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNull(optionGroup59);
        org.junit.Assert.assertTrue(""'"" + boolean60 + ""' != '"" + true + ""'"", boolean60 == true);
        org.junit.Assert.assertNotNull(options61);
        org.junit.Assert.assertNotNull(list62);
        org.junit.Assert.assertNull(strArray65);
        org.junit.Assert.assertEquals(""'"" + str68 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str68, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue(""'"" + boolean75 + ""' != '"" + true + ""'"", boolean75 == true);"
167,114,6422,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0115"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option6.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken(""4"", false);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup42 = options39.getOptionGroup(option41);
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        char char45 = option44.getValueSeparator();
        org.apache.commons.cli.Option option47 = org.apache.commons.cli.OptionBuilder.create('4');
        option47.setDescription("""");
        option44.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup51 = options39.getOptionGroup(option44);
        java.util.Collection collection52 = options39.getOptions();
        java.lang.String[] strArray53 = null;
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options39, strArray53);
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup58 = options55.getOptionGroup(option57);
        org.apache.commons.cli.Option option60 = options55.getOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        java.util.List list61 = options55.helpOptions();
        org.apache.commons.cli.CommandLine commandLine62 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray64 = commandLine62.getOptionValues(""hi!"");
        java.lang.String str67 = commandLine62.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str69 = commandLine62.getOptionValue(""arg"");
        java.lang.String[] strArray70 = commandLine62.getArgs();
        java.util.Properties properties71 = null;
        org.apache.commons.cli.CommandLine commandLine73 = posixParser0.parse(options55, strArray70, properties71, true);
        posixParser0.burstToken(""org.apache.commons.cli.UnrecognizedOptionException: hi!"", false);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue(""'"" + char7 + ""' != '"" + '\000' + ""'"", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertTrue(""'"" + char45 + ""' != '"" + '\000' + ""'"", char45 == '\000');
        org.junit.Assert.assertNotNull(option47);
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(collection52);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNull(optionGroup58);
        org.junit.Assert.assertNull(option60);
        org.junit.Assert.assertNotNull(list61);
        org.junit.Assert.assertNull(strArray64);
        org.junit.Assert.assertEquals(""'"" + str67 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str67, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(commandLine73);"
168,74,6551,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0075"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("""");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("""");
        option26.setLongOpt(""hi!"");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues(""hi!"");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("""");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        java.lang.String[] strArray47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options40, strArray47);
        java.lang.String str51 = commandLine48.getOptionValue(""[ option:    :: null ]"", ""[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]"");
        org.apache.commons.cli.Options options52 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option54 = org.apache.commons.cli.OptionBuilder.create('4');
        option54.setDescription("""");
        org.apache.commons.cli.Options options57 = options52.addOption(option54);
        java.util.Collection collection58 = options52.getOptions();
        org.apache.commons.cli.Options options59 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option61 = org.apache.commons.cli.OptionBuilder.create('4');
        char char62 = option61.getValueSeparator();
        org.apache.commons.cli.Option option64 = org.apache.commons.cli.OptionBuilder.create('4');
        option64.setDescription("""");
        option61.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup68 = options59.getOptionGroup(option61);
        option61.setOptionalArg(true);
        int int71 = option61.getId();
        org.apache.commons.cli.Options options72 = options52.addOption(option61);
        option61.setOptionalArg(false);
        java.lang.String str76 = option61.getValue(""[ option: 4  :: null ::  ]"");
        commandLine48.addOption(option61);
        option61.setOptionalArg(true);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue(""'"" + boolean31 + ""' != '"" + true + ""'"", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertEquals(""'"" + str51 + ""' != '"" + ""[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]"" + ""'"", str51, ""[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]"");
        org.junit.Assert.assertNotNull(option54);
        org.junit.Assert.assertNotNull(options57);
        org.junit.Assert.assertNotNull(collection58);
        org.junit.Assert.assertNotNull(option61);
        org.junit.Assert.assertTrue(""'"" + char62 + ""' != '"" + '\000' + ""'"", char62 == '\000');
        org.junit.Assert.assertNotNull(option64);
        org.junit.Assert.assertNull(optionGroup68);
        org.junit.Assert.assertTrue(""'"" + int71 + ""' != '"" + 52 + ""'"", int71 == 52);
        org.junit.Assert.assertNotNull(options72);
        org.junit.Assert.assertEquals(""'"" + str76 + ""' != '"" + ""[ option: 4  :: null ::  ]"" + ""'"", str76, ""[ option: 4  :: null ::  ]"");"
169,108,6582,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0109"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("""");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("""");
        option26.setLongOpt(""hi!"");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues(""hi!"");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("""");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        org.apache.commons.cli.Options options50 = options40.addOption("""", false, ""arg"");
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup54 = options51.getOptionGroup(option53);
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        char char57 = option56.getValueSeparator();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        option59.setDescription("""");
        option56.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup63 = options51.getOptionGroup(option56);
        boolean boolean64 = option56.hasArgName();
        org.apache.commons.cli.Options options65 = options40.addOption(option56);
        org.apache.commons.cli.CommandLine commandLine66 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray68 = commandLine66.getOptionValues(""hi!"");
        java.lang.String str71 = commandLine66.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str73 = commandLine66.getOptionValue(""arg"");
        java.lang.String[] strArray74 = commandLine66.getArgs();
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options40, strArray74, properties75);
        java.lang.String str77 = options40.toString();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue(""'"" + boolean31 + ""' != '"" + true + ""'"", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNotNull(options50);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertTrue(""'"" + char57 + ""' != '"" + '\000' + ""'"", char57 == '\000');
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNull(optionGroup63);
        org.junit.Assert.assertTrue(""'"" + boolean64 + ""' != '"" + true + ""'"", boolean64 == true);
        org.junit.Assert.assertNotNull(options65);
        org.junit.Assert.assertNull(strArray68);
        org.junit.Assert.assertEquals(""'"" + str71 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str71, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertEquals(""'"" + str77 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ::  ]} ] [ long {} ]"" + ""'"", str77, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ::  ]} ] [ long {} ]"");"
170,405,6007,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0406"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.CommandLine commandLine5 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray7 = commandLine5.getOptionValues(""hi!"");
        java.lang.String str10 = commandLine5.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str12 = commandLine5.getOptionValue(""arg"");
        java.lang.String[] strArray13 = commandLine5.getArgs();
        java.lang.String[] strArray15 = posixParser0.flatten(options1, strArray13, true);
        org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = org.apache.commons.cli.OptionBuilder.create('4');
        option18.setDescription("""");
        org.apache.commons.cli.Options options21 = options16.addOption(option18);
        java.util.Collection collection22 = options16.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.util.Properties properties32 = null;
        org.apache.commons.cli.CommandLine commandLine34 = posixParser0.parse(options16, strArray31, properties32, false);
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option37 = org.apache.commons.cli.OptionBuilder.create('4');
        option37.setDescription("""");
        org.apache.commons.cli.Options options40 = options35.addOption(option37);
        java.util.Collection collection41 = options35.getOptionGroups();
        org.apache.commons.cli.Option option43 = org.apache.commons.cli.OptionBuilder.create('4');
        option43.setDescription("""");
        option43.setLongOpt(""hi!"");
        boolean boolean48 = option43.hasArgName();
        org.apache.commons.cli.Options options49 = options35.addOption(option43);
        org.apache.commons.cli.PosixParser posixParser50 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create('4');
        option53.setDescription("""");
        org.apache.commons.cli.Options options56 = options51.addOption(option53);
        org.apache.commons.cli.CommandLine commandLine57 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray59 = commandLine57.getOptionValues(""hi!"");
        java.lang.String[] strArray60 = commandLine57.getArgs();
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser50.parse(options51, strArray60, properties61);
        org.apache.commons.cli.CommandLine commandLine63 = posixParser0.parse(options35, strArray60);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options68 = options35.addOption(""[ option:    :: null ]"", ""org.apache.commons.cli.UnrecognizedOptionException: hi!"", true, ""org.apache.commons.cli.ParseException: [ option:    :: null ]"");
            org.junit.Assert.fail(""Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNull(strArray7);
        org.junit.Assert.assertEquals(""'"" + str10 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str10, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(option18);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNotNull(collection22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(option37);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertNotNull(collection41);
        org.junit.Assert.assertNotNull(option43);
        org.junit.Assert.assertTrue(""'"" + boolean48 + ""' != '"" + true + ""'"", boolean48 == true);
        org.junit.Assert.assertNotNull(options49);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNotNull(options56);
        org.junit.Assert.assertNull(strArray59);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(commandLine63);"
171,138,6135,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0139"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptions();
        boolean boolean9 = options1.hasOption(""arg"");
        java.lang.String[] strArray12 = new java.lang.String[] { ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"", ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"" };
        org.apache.commons.cli.CommandLine commandLine13 = posixParser0.parse(options1, strArray12);
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = org.apache.commons.cli.OptionBuilder.create('4');
        option16.setDescription("""");
        org.apache.commons.cli.Options options19 = options14.addOption(option16);
        java.util.Collection collection20 = options14.getOptionGroups();
        org.apache.commons.cli.Options options24 = options14.addOption("""", false, ""arg"");
        java.util.List list25 = options24.getRequiredOptions();
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create(""arg"");
        org.apache.commons.cli.Options options28 = options24.addOption(option27);
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setArgs((int) (short) 100);
        option30.setArgName(""[ option: 4  :: null ]"");
        java.lang.String str35 = option30.getLongOpt();
        java.lang.String str37 = option30.getValue((int) (short) -1);
        org.apache.commons.cli.Options options38 = options28.addOption(option30);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup42 = options39.getOptionGroup(option41);
        boolean boolean43 = option41.hasLongOpt();
        boolean boolean44 = option41.isRequired();
        java.util.List list45 = option41.getValuesList();
        option41.setDescription(""[ option: 4  ::  ]"");
        org.apache.commons.cli.Options options48 = options38.addOption(option41);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        option52.setDescription("""");
        org.apache.commons.cli.Options options55 = options50.addOption(option52);
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray58 = commandLine56.getOptionValues(""hi!"");
        java.lang.String str61 = commandLine56.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str63 = commandLine56.getOptionValue(""arg"");
        java.lang.String[] strArray64 = commandLine56.getArgs();
        java.lang.String[] strArray66 = posixParser49.flatten(options55, strArray64, false);
        org.apache.commons.cli.CommandLine commandLine68 = posixParser0.parse(options38, strArray64, true);
        org.apache.commons.cli.OptionBuilder optionBuilder69 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options38);
        boolean boolean71 = options38.hasOption(""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertTrue(""'"" + boolean9 + ""' != '"" + false + ""'"", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine13);
        org.junit.Assert.assertNotNull(option16);
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertNotNull(collection20);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertTrue(""'"" + boolean43 + ""' != '"" + false + ""'"", boolean43 == false);
        org.junit.Assert.assertTrue(""'"" + boolean44 + ""' != '"" + false + ""'"", boolean44 == false);
        org.junit.Assert.assertNotNull(list45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNull(strArray58);
        org.junit.Assert.assertEquals(""'"" + str61 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str61, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertNotNull(optionBuilder69);
        org.junit.Assert.assertTrue(""'"" + boolean71 + ""' != '"" + false + ""'"", boolean71 == false);"
172,218,6359,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0219"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken(""hi!"", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("""");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptions();
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        char char31 = option30.getValueSeparator();
        org.apache.commons.cli.Option option33 = org.apache.commons.cli.OptionBuilder.create('4');
        option33.setDescription("""");
        option30.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup37 = options28.getOptionGroup(option30);
        option30.setOptionalArg(true);
        int int40 = option30.getId();
        org.apache.commons.cli.Options options41 = options21.addOption(option30);
        boolean boolean43 = options41.hasOption("""");
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setArgs((int) (short) 100);
        option45.setArgName(""[ option: 4  :: null ]"");
        java.lang.String str50 = option45.getLongOpt();
        boolean boolean51 = option45.hasLongOpt();
        org.apache.commons.cli.Options options52 = options41.addOption(option45);
        java.util.Collection collection53 = options41.getOptions();
        org.apache.commons.cli.PosixParser posixParser54 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = org.apache.commons.cli.OptionBuilder.create('4');
        option57.setDescription("""");
        org.apache.commons.cli.Options options60 = options55.addOption(option57);
        java.util.Collection collection61 = options55.getOptions();
        boolean boolean63 = options55.hasOption(""arg"");
        java.lang.String[] strArray66 = new java.lang.String[] { ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"", ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"" };
        org.apache.commons.cli.CommandLine commandLine67 = posixParser54.parse(options55, strArray66);
        java.lang.String[] strArray69 = posixParser0.flatten(options41, strArray66, false);
        org.apache.commons.cli.Options options70 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.CommandLine commandLine71 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray73 = commandLine71.getOptionValues(""hi!"");
        java.lang.String[] strArray74 = commandLine71.getArgs();
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options70, strArray74, properties75, true);
        commandLine77.addArg(""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertTrue(""'"" + char31 + ""' != '"" + '\000' + ""'"", char31 == '\000');
        org.junit.Assert.assertNotNull(option33);
        org.junit.Assert.assertNull(optionGroup37);
        org.junit.Assert.assertTrue(""'"" + int40 + ""' != '"" + 52 + ""'"", int40 == 52);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertTrue(""'"" + boolean43 + ""' != '"" + false + ""'"", boolean43 == false);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue(""'"" + boolean51 + ""' != '"" + false + ""'"", boolean51 == false);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(collection53);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(collection61);
        org.junit.Assert.assertTrue(""'"" + boolean63 + ""' != '"" + false + ""'"", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNull(strArray73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine77);"
173,26,6094,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0027"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptions();
        boolean boolean9 = options1.hasOption(""arg"");
        java.lang.String[] strArray12 = new java.lang.String[] { ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"", ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"" };
        org.apache.commons.cli.CommandLine commandLine13 = posixParser0.parse(options1, strArray12);
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = org.apache.commons.cli.OptionBuilder.create('4');
        option16.setDescription("""");
        org.apache.commons.cli.Options options19 = options14.addOption(option16);
        java.util.Collection collection20 = options14.getOptionGroups();
        org.apache.commons.cli.Options options24 = options14.addOption("""", false, ""arg"");
        java.util.List list25 = options24.getRequiredOptions();
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create(""arg"");
        org.apache.commons.cli.Options options28 = options24.addOption(option27);
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setArgs((int) (short) 100);
        option30.setArgName(""[ option: 4  :: null ]"");
        java.lang.String str35 = option30.getLongOpt();
        java.lang.String str37 = option30.getValue((int) (short) -1);
        org.apache.commons.cli.Options options38 = options28.addOption(option30);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup42 = options39.getOptionGroup(option41);
        boolean boolean43 = option41.hasLongOpt();
        boolean boolean44 = option41.isRequired();
        java.util.List list45 = option41.getValuesList();
        option41.setDescription(""[ option: 4  ::  ]"");
        org.apache.commons.cli.Options options48 = options38.addOption(option41);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        option52.setDescription("""");
        org.apache.commons.cli.Options options55 = options50.addOption(option52);
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray58 = commandLine56.getOptionValues(""hi!"");
        java.lang.String str61 = commandLine56.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str63 = commandLine56.getOptionValue(""arg"");
        java.lang.String[] strArray64 = commandLine56.getArgs();
        java.lang.String[] strArray66 = posixParser49.flatten(options55, strArray64, false);
        org.apache.commons.cli.CommandLine commandLine68 = posixParser0.parse(options38, strArray64, true);
        org.apache.commons.cli.OptionGroup optionGroup69 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options70 = options38.addOptionGroup(optionGroup69);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertTrue(""'"" + boolean9 + ""' != '"" + false + ""'"", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine13);
        org.junit.Assert.assertNotNull(option16);
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertNotNull(collection20);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertTrue(""'"" + boolean43 + ""' != '"" + false + ""'"", boolean43 == false);
        org.junit.Assert.assertTrue(""'"" + boolean44 + ""' != '"" + false + ""'"", boolean44 == false);
        org.junit.Assert.assertNotNull(list45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNull(strArray58);
        org.junit.Assert.assertEquals(""'"" + str61 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str61, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine68);"
174,82,6310,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0083"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken(""hi!"", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("""");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptions();
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        char char31 = option30.getValueSeparator();
        org.apache.commons.cli.Option option33 = org.apache.commons.cli.OptionBuilder.create('4');
        option33.setDescription("""");
        option30.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup37 = options28.getOptionGroup(option30);
        option30.setOptionalArg(true);
        int int40 = option30.getId();
        org.apache.commons.cli.Options options41 = options21.addOption(option30);
        boolean boolean43 = options41.hasOption("""");
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setArgs((int) (short) 100);
        option45.setArgName(""[ option: 4  :: null ]"");
        java.lang.String str50 = option45.getLongOpt();
        boolean boolean51 = option45.hasLongOpt();
        org.apache.commons.cli.Options options52 = options41.addOption(option45);
        java.util.Collection collection53 = options41.getOptions();
        org.apache.commons.cli.PosixParser posixParser54 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = org.apache.commons.cli.OptionBuilder.create('4');
        option57.setDescription("""");
        org.apache.commons.cli.Options options60 = options55.addOption(option57);
        java.util.Collection collection61 = options55.getOptions();
        boolean boolean63 = options55.hasOption(""arg"");
        java.lang.String[] strArray66 = new java.lang.String[] { ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"", ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"" };
        org.apache.commons.cli.CommandLine commandLine67 = posixParser54.parse(options55, strArray66);
        java.lang.String[] strArray69 = posixParser0.flatten(options41, strArray66, false);
        org.apache.commons.cli.Options options70 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.CommandLine commandLine71 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray73 = commandLine71.getOptionValues(""hi!"");
        java.lang.String[] strArray74 = commandLine71.getArgs();
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options70, strArray74, properties75, true);
        org.apache.commons.cli.Option[] optionArray78 = commandLine77.getOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertTrue(""'"" + char31 + ""' != '"" + '\000' + ""'"", char31 == '\000');
        org.junit.Assert.assertNotNull(option33);
        org.junit.Assert.assertNull(optionGroup37);
        org.junit.Assert.assertTrue(""'"" + int40 + ""' != '"" + 52 + ""'"", int40 == 52);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertTrue(""'"" + boolean43 + ""' != '"" + false + ""'"", boolean43 == false);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue(""'"" + boolean51 + ""' != '"" + false + ""'"", boolean51 == false);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(collection53);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(collection61);
        org.junit.Assert.assertTrue(""'"" + boolean63 + ""' != '"" + false + ""'"", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNull(strArray73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertNotNull(optionArray78);"
175,306,6345,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0307"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("""");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("""");
        option26.setLongOpt(""hi!"");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues(""hi!"");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup43 = options40.getOptionGroup(option42);
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        org.apache.commons.cli.OptionGroup optionGroup46 = options40.getOptionGroup(option45);
        java.util.List list47 = options40.getRequiredOptions();
        java.util.Collection collection48 = options40.getOptions();
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        option52.setDescription("""");
        org.apache.commons.cli.Options options55 = options50.addOption(option52);
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray58 = commandLine56.getOptionValues(""hi!"");
        java.lang.String str61 = commandLine56.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str63 = commandLine56.getOptionValue(""arg"");
        java.lang.String[] strArray64 = commandLine56.getArgs();
        java.lang.String[] strArray66 = posixParser49.flatten(options55, strArray64, false);
        java.util.Properties properties67 = null;
        org.apache.commons.cli.CommandLine commandLine69 = posixParser0.parse(options40, strArray64, properties67, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options73 = options40.addOption(""[ option: 4 [ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ]  :: null ]"", false, """");
            org.junit.Assert.fail(""Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue(""'"" + boolean31 + ""' != '"" + true + ""'"", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNull(optionGroup46);
        org.junit.Assert.assertNotNull(list47);
        org.junit.Assert.assertNotNull(collection48);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNull(strArray58);
        org.junit.Assert.assertEquals(""'"" + str61 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str61, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine69);"
176,117,6240,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0118"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken(""hi!"", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("""");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptions();
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        char char31 = option30.getValueSeparator();
        org.apache.commons.cli.Option option33 = org.apache.commons.cli.OptionBuilder.create('4');
        option33.setDescription("""");
        option30.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup37 = options28.getOptionGroup(option30);
        option30.setOptionalArg(true);
        int int40 = option30.getId();
        org.apache.commons.cli.Options options41 = options21.addOption(option30);
        boolean boolean43 = options41.hasOption("""");
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setArgs((int) (short) 100);
        option45.setArgName(""[ option: 4  :: null ]"");
        java.lang.String str50 = option45.getLongOpt();
        boolean boolean51 = option45.hasLongOpt();
        org.apache.commons.cli.Options options52 = options41.addOption(option45);
        java.util.Collection collection53 = options41.getOptions();
        org.apache.commons.cli.PosixParser posixParser54 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = org.apache.commons.cli.OptionBuilder.create('4');
        option57.setDescription("""");
        org.apache.commons.cli.Options options60 = options55.addOption(option57);
        java.util.Collection collection61 = options55.getOptions();
        boolean boolean63 = options55.hasOption(""arg"");
        java.lang.String[] strArray66 = new java.lang.String[] { ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"", ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"" };
        org.apache.commons.cli.CommandLine commandLine67 = posixParser54.parse(options55, strArray66);
        java.lang.String[] strArray69 = posixParser0.flatten(options41, strArray66, false);
        org.apache.commons.cli.Option option73 = new org.apache.commons.cli.Option("""", true, """");
        option73.setArgs((-2));
        java.lang.String str76 = option73.toString();
        java.util.ListIterator listIterator77 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option73, listIterator77);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertTrue(""'"" + char31 + ""' != '"" + '\000' + ""'"", char31 == '\000');
        org.junit.Assert.assertNotNull(option33);
        org.junit.Assert.assertNull(optionGroup37);
        org.junit.Assert.assertTrue(""'"" + int40 + ""' != '"" + 52 + ""'"", int40 == 52);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertTrue(""'"" + boolean43 + ""' != '"" + false + ""'"", boolean43 == false);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue(""'"" + boolean51 + ""' != '"" + false + ""'"", boolean51 == false);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(collection53);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(collection61);
        org.junit.Assert.assertTrue(""'"" + boolean63 + ""' != '"" + false + ""'"", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertEquals(""'"" + str76 + ""' != '"" + ""[ option:  +ARG ::  ]"" + ""'"", str76, ""[ option:  +ARG ::  ]"");"
177,139,6158,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0140"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option6.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken(""4"", false);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup42 = options39.getOptionGroup(option41);
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        char char45 = option44.getValueSeparator();
        org.apache.commons.cli.Option option47 = org.apache.commons.cli.OptionBuilder.create('4');
        option47.setDescription("""");
        option44.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup51 = options39.getOptionGroup(option44);
        java.util.Collection collection52 = options39.getOptions();
        java.lang.String[] strArray53 = null;
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options39, strArray53);
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = org.apache.commons.cli.OptionBuilder.create('4');
        option57.setDescription("""");
        org.apache.commons.cli.Options options60 = options55.addOption(option57);
        java.util.List list61 = option57.getValuesList();
        java.lang.String str62 = option57.getOpt();
        org.apache.commons.cli.Option option64 = org.apache.commons.cli.OptionBuilder.create(""arg"");
        java.lang.String str65 = option64.getOpt();
        boolean boolean66 = option64.isRequired();
        boolean boolean67 = option57.equals((java.lang.Object) option64);
        org.apache.commons.cli.Options options68 = options39.addOption(option57);
        java.lang.String str69 = option57.getOpt();
        option57.setArgName("""");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue(""'"" + char7 + ""' != '"" + '\000' + ""'"", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertTrue(""'"" + char45 + ""' != '"" + '\000' + ""'"", char45 == '\000');
        org.junit.Assert.assertNotNull(option47);
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(collection52);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(list61);
        org.junit.Assert.assertEquals(""'"" + str62 + ""' != '"" + ""4"" + ""'"", str62, ""4"");
        org.junit.Assert.assertNotNull(option64);
        org.junit.Assert.assertEquals(""'"" + str65 + ""' != '"" + ""arg"" + ""'"", str65, ""arg"");
        org.junit.Assert.assertTrue(""'"" + boolean66 + ""' != '"" + false + ""'"", boolean66 == false);
        org.junit.Assert.assertTrue(""'"" + boolean67 + ""' != '"" + false + ""'"", boolean67 == false);
        org.junit.Assert.assertNotNull(options68);
        org.junit.Assert.assertEquals(""'"" + str69 + ""' != '"" + ""4"" + ""'"", str69, ""4"");"
178,187,6406,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0188"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("""");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("""");
        option26.setLongOpt(""hi!"");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues(""hi!"");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("""");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        org.apache.commons.cli.Options options50 = options40.addOption("""", false, ""arg"");
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup54 = options51.getOptionGroup(option53);
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        char char57 = option56.getValueSeparator();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        option59.setDescription("""");
        option56.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup63 = options51.getOptionGroup(option56);
        boolean boolean64 = option56.hasArgName();
        org.apache.commons.cli.Options options65 = options40.addOption(option56);
        org.apache.commons.cli.CommandLine commandLine66 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray68 = commandLine66.getOptionValues(""hi!"");
        java.lang.String str71 = commandLine66.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str73 = commandLine66.getOptionValue(""arg"");
        java.lang.String[] strArray74 = commandLine66.getArgs();
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options40, strArray74, properties75);
        java.lang.Object obj78 = commandLine76.getOptionObject(""[ option: 4  ::  :: [] ]"");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue(""'"" + boolean31 + ""' != '"" + true + ""'"", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNotNull(options50);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertTrue(""'"" + char57 + ""' != '"" + '\000' + ""'"", char57 == '\000');
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNull(optionGroup63);
        org.junit.Assert.assertTrue(""'"" + boolean64 + ""' != '"" + true + ""'"", boolean64 == true);
        org.junit.Assert.assertNotNull(options65);
        org.junit.Assert.assertNull(strArray68);
        org.junit.Assert.assertEquals(""'"" + str71 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str71, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNull(obj78);"
179,154,6378,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0155"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("""");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("""");
        option26.setLongOpt(""hi!"");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues(""hi!"");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("""");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        org.apache.commons.cli.Options options50 = options40.addOption("""", false, ""arg"");
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup54 = options51.getOptionGroup(option53);
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        char char57 = option56.getValueSeparator();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        option59.setDescription("""");
        option56.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup63 = options51.getOptionGroup(option56);
        boolean boolean64 = option56.hasArgName();
        org.apache.commons.cli.Options options65 = options40.addOption(option56);
        org.apache.commons.cli.CommandLine commandLine66 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray68 = commandLine66.getOptionValues(""hi!"");
        java.lang.String str71 = commandLine66.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str73 = commandLine66.getOptionValue(""arg"");
        java.lang.String[] strArray74 = commandLine66.getArgs();
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options40, strArray74, properties75);
        java.util.List list77 = commandLine76.getArgList();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue(""'"" + boolean31 + ""' != '"" + true + ""'"", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNotNull(options50);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertTrue(""'"" + char57 + ""' != '"" + '\000' + ""'"", char57 == '\000');
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNull(optionGroup63);
        org.junit.Assert.assertTrue(""'"" + boolean64 + ""' != '"" + true + ""'"", boolean64 == true);
        org.junit.Assert.assertNotNull(options65);
        org.junit.Assert.assertNull(strArray68);
        org.junit.Assert.assertEquals(""'"" + str71 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str71, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(list77);"
180,370,6375,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0371"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("""");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("""");
        option26.setLongOpt(""hi!"");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues(""hi!"");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("""");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        org.apache.commons.cli.Options options50 = options40.addOption("""", false, ""arg"");
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup54 = options51.getOptionGroup(option53);
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        char char57 = option56.getValueSeparator();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        option59.setDescription("""");
        option56.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup63 = options51.getOptionGroup(option56);
        boolean boolean64 = option56.hasArgName();
        org.apache.commons.cli.Options options65 = options40.addOption(option56);
        org.apache.commons.cli.CommandLine commandLine66 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray68 = commandLine66.getOptionValues(""hi!"");
        java.lang.String str71 = commandLine66.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str73 = commandLine66.getOptionValue(""arg"");
        java.lang.String[] strArray74 = commandLine66.getArgs();
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options40, strArray74, properties75);
        posixParser0.burstToken(""org.apache.commons.cli.ParseException: [ option:    :: null ]"", false);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue(""'"" + boolean31 + ""' != '"" + true + ""'"", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNotNull(options50);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertTrue(""'"" + char57 + ""' != '"" + '\000' + ""'"", char57 == '\000');
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNull(optionGroup63);
        org.junit.Assert.assertTrue(""'"" + boolean64 + ""' != '"" + true + ""'"", boolean64 == true);
        org.junit.Assert.assertNotNull(options65);
        org.junit.Assert.assertNull(strArray68);
        org.junit.Assert.assertEquals(""'"" + str71 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str71, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine76);"
181,371,6508,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0372"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues(""hi!"");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("""");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        java.lang.String str64 = commandLine62.getOptionValue('\000');
        java.lang.Object obj66 = commandLine62.getOptionObject(""[ option:    :: null ]"");
        org.apache.commons.cli.Option[] optionArray67 = commandLine62.getOptions();
        java.lang.String[] strArray68 = commandLine62.getArgs();
        java.lang.String str71 = commandLine62.getOptionValue('a', ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"");
        java.lang.String str74 = commandLine62.getOptionValue("""", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ], arg=[ option: arg  :: null ]} ] [ long {} ]"");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue(""'"" + boolean36 + ""' != '"" + false + ""'"", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNotNull(optionArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertEquals(""'"" + str71 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"" + ""'"", str71, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"");
        org.junit.Assert.assertEquals(""'"" + str74 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ], arg=[ option: arg  :: null ]} ] [ long {} ]"" + ""'"", str74, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ], arg=[ option: arg  :: null ]} ] [ long {} ]"");"
182,136,5832,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0137"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptions();
        boolean boolean9 = options1.hasOption(""arg"");
        java.lang.String[] strArray12 = new java.lang.String[] { ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"", ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"" };
        org.apache.commons.cli.CommandLine commandLine13 = posixParser0.parse(options1, strArray12);
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = org.apache.commons.cli.OptionBuilder.create('4');
        option16.setDescription("""");
        org.apache.commons.cli.Options options19 = options14.addOption(option16);
        java.util.Collection collection20 = options14.getOptionGroups();
        org.apache.commons.cli.Options options24 = options14.addOption("""", false, ""arg"");
        java.util.List list25 = options24.getRequiredOptions();
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create(""arg"");
        org.apache.commons.cli.Options options28 = options24.addOption(option27);
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setArgs((int) (short) 100);
        option30.setArgName(""[ option: 4  :: null ]"");
        java.lang.String str35 = option30.getLongOpt();
        java.lang.String str37 = option30.getValue((int) (short) -1);
        org.apache.commons.cli.Options options38 = options28.addOption(option30);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup42 = options39.getOptionGroup(option41);
        boolean boolean43 = option41.hasLongOpt();
        boolean boolean44 = option41.isRequired();
        java.util.List list45 = option41.getValuesList();
        option41.setDescription(""[ option: 4  ::  ]"");
        org.apache.commons.cli.Options options48 = options38.addOption(option41);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        option52.setDescription("""");
        org.apache.commons.cli.Options options55 = options50.addOption(option52);
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray58 = commandLine56.getOptionValues(""hi!"");
        java.lang.String str61 = commandLine56.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str63 = commandLine56.getOptionValue(""arg"");
        java.lang.String[] strArray64 = commandLine56.getArgs();
        java.lang.String[] strArray66 = posixParser49.flatten(options55, strArray64, false);
        org.apache.commons.cli.CommandLine commandLine68 = posixParser0.parse(options38, strArray64, true);
        org.apache.commons.cli.OptionBuilder optionBuilder69 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) posixParser0);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertTrue(""'"" + boolean9 + ""' != '"" + false + ""'"", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine13);
        org.junit.Assert.assertNotNull(option16);
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertNotNull(collection20);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertTrue(""'"" + boolean43 + ""' != '"" + false + ""'"", boolean43 == false);
        org.junit.Assert.assertTrue(""'"" + boolean44 + ""' != '"" + false + ""'"", boolean44 == false);
        org.junit.Assert.assertNotNull(list45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNull(strArray58);
        org.junit.Assert.assertEquals(""'"" + str61 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str61, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertNotNull(optionBuilder69);"
183,5,6351,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0006"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues(""hi!"");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = null;
        org.apache.commons.cli.PosixParser posixParser54 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = org.apache.commons.cli.OptionBuilder.create('4');
        option57.setDescription("""");
        org.apache.commons.cli.Options options60 = options55.addOption(option57);
        org.apache.commons.cli.CommandLine commandLine61 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray63 = commandLine61.getOptionValues(""hi!"");
        java.lang.String str66 = commandLine61.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str68 = commandLine61.getOptionValue(""arg"");
        java.lang.String[] strArray69 = commandLine61.getArgs();
        java.lang.String[] strArray71 = posixParser54.flatten(options60, strArray69, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.CommandLine commandLine72 = posixParser0.parse(options53, strArray69);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue(""'"" + boolean36 + ""' != '"" + false + ""'"", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNull(strArray63);
        org.junit.Assert.assertEquals(""'"" + str66 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str66, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(strArray71);"
184,393,6416,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0394"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues(""hi!"");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("""");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        java.lang.String str64 = commandLine62.getOptionValue('\000');
        java.lang.Object obj66 = commandLine62.getOptionObject(""[ option:    :: null ]"");
        org.apache.commons.cli.Option[] optionArray67 = commandLine62.getOptions();
        java.lang.String[] strArray68 = commandLine62.getArgs();
        java.lang.String str71 = commandLine62.getOptionValue('a', ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"");
        java.lang.String str74 = commandLine62.getOptionValue('=', ""[ option: 4  :: [ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ] ]"");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue(""'"" + boolean36 + ""' != '"" + false + ""'"", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNotNull(optionArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertEquals(""'"" + str71 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"" + ""'"", str71, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"");
        org.junit.Assert.assertEquals(""'"" + str74 + ""' != '"" + ""[ option: 4  :: [ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ] ]"" + ""'"", str74, ""[ option: 4  :: [ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ] ]"");"
185,122,6063,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0123"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken(""hi!"", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("""");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptions();
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        char char31 = option30.getValueSeparator();
        org.apache.commons.cli.Option option33 = org.apache.commons.cli.OptionBuilder.create('4');
        option33.setDescription("""");
        option30.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup37 = options28.getOptionGroup(option30);
        option30.setOptionalArg(true);
        int int40 = option30.getId();
        org.apache.commons.cli.Options options41 = options21.addOption(option30);
        boolean boolean43 = options41.hasOption("""");
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setArgs((int) (short) 100);
        option45.setArgName(""[ option: 4  :: null ]"");
        java.lang.String str50 = option45.getLongOpt();
        boolean boolean51 = option45.hasLongOpt();
        org.apache.commons.cli.Options options52 = options41.addOption(option45);
        java.util.Collection collection53 = options41.getOptions();
        org.apache.commons.cli.PosixParser posixParser54 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = org.apache.commons.cli.OptionBuilder.create('4');
        option57.setDescription("""");
        org.apache.commons.cli.Options options60 = options55.addOption(option57);
        java.util.Collection collection61 = options55.getOptions();
        boolean boolean63 = options55.hasOption(""arg"");
        java.lang.String[] strArray66 = new java.lang.String[] { ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"", ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"" };
        org.apache.commons.cli.CommandLine commandLine67 = posixParser54.parse(options55, strArray66);
        java.lang.String[] strArray69 = posixParser0.flatten(options41, strArray66, false);
        java.util.List list70 = options41.helpOptions();
        org.apache.commons.cli.Option option72 = options41.getOption(""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"");
        boolean boolean74 = options41.hasOption(""[ option:  +ARG ::  ]"");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertTrue(""'"" + char31 + ""' != '"" + '\000' + ""'"", char31 == '\000');
        org.junit.Assert.assertNotNull(option33);
        org.junit.Assert.assertNull(optionGroup37);
        org.junit.Assert.assertTrue(""'"" + int40 + ""' != '"" + 52 + ""'"", int40 == 52);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertTrue(""'"" + boolean43 + ""' != '"" + false + ""'"", boolean43 == false);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue(""'"" + boolean51 + ""' != '"" + false + ""'"", boolean51 == false);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(collection53);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(collection61);
        org.junit.Assert.assertTrue(""'"" + boolean63 + ""' != '"" + false + ""'"", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(list70);
        org.junit.Assert.assertNull(option72);
        org.junit.Assert.assertTrue(""'"" + boolean74 + ""' != '"" + false + ""'"", boolean74 == false);"
186,310,6036,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0311"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken(""hi!"", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("""");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptionGroups();
        org.apache.commons.cli.Options options31 = options21.addOption("""", false, ""arg"");
        java.util.List list32 = options31.getRequiredOptions();
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create(""arg"");
        org.apache.commons.cli.Options options35 = options31.addOption(option34);
        boolean boolean37 = options31.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        java.util.Collection collection38 = options31.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine39 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine39.getOptionValues(""hi!"");
        java.lang.String str44 = commandLine39.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str46 = commandLine39.getOptionValue(""arg"");
        java.lang.String[] strArray47 = commandLine39.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine50 = posixParser0.parse(options31, strArray47, properties48, true);
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create('4');
        option53.setDescription("""");
        org.apache.commons.cli.Options options56 = options51.addOption(option53);
        org.apache.commons.cli.CommandLine commandLine57 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray59 = commandLine57.getOptionValues(""hi!"");
        java.lang.String str62 = commandLine57.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str64 = commandLine57.getOptionValue(""arg"");
        java.lang.String[] strArray65 = commandLine57.getArgs();
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser0.parse(options51, strArray65, properties66);
        org.apache.commons.cli.OptionGroup optionGroup68 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options69 = options51.addOptionGroup(optionGroup68);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(options31);
        org.junit.Assert.assertNotNull(list32);
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertTrue(""'"" + boolean37 + ""' != '"" + false + ""'"", boolean37 == false);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertEquals(""'"" + str44 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str44, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNotNull(options56);
        org.junit.Assert.assertNull(strArray59);
        org.junit.Assert.assertEquals(""'"" + str62 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str62, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);"
187,192,5771,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0193"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptions();
        boolean boolean9 = options1.hasOption(""arg"");
        java.lang.String[] strArray12 = new java.lang.String[] { ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"", ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"" };
        org.apache.commons.cli.CommandLine commandLine13 = posixParser0.parse(options1, strArray12);
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = org.apache.commons.cli.OptionBuilder.create('4');
        option16.setDescription("""");
        org.apache.commons.cli.Options options19 = options14.addOption(option16);
        java.util.Collection collection20 = options14.getOptionGroups();
        org.apache.commons.cli.Options options24 = options14.addOption("""", false, ""arg"");
        java.util.List list25 = options24.getRequiredOptions();
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create(""arg"");
        org.apache.commons.cli.Options options28 = options24.addOption(option27);
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setArgs((int) (short) 100);
        option30.setArgName(""[ option: 4  :: null ]"");
        java.lang.String str35 = option30.getLongOpt();
        java.lang.String str37 = option30.getValue((int) (short) -1);
        org.apache.commons.cli.Options options38 = options28.addOption(option30);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup42 = options39.getOptionGroup(option41);
        boolean boolean43 = option41.hasLongOpt();
        boolean boolean44 = option41.isRequired();
        java.util.List list45 = option41.getValuesList();
        option41.setDescription(""[ option: 4  ::  ]"");
        org.apache.commons.cli.Options options48 = options38.addOption(option41);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        option52.setDescription("""");
        org.apache.commons.cli.Options options55 = options50.addOption(option52);
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray58 = commandLine56.getOptionValues(""hi!"");
        java.lang.String str61 = commandLine56.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str63 = commandLine56.getOptionValue(""arg"");
        java.lang.String[] strArray64 = commandLine56.getArgs();
        java.lang.String[] strArray66 = posixParser49.flatten(options55, strArray64, false);
        org.apache.commons.cli.CommandLine commandLine68 = posixParser0.parse(options38, strArray64, true);
        org.apache.commons.cli.Option[] optionArray69 = commandLine68.getOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertTrue(""'"" + boolean9 + ""' != '"" + false + ""'"", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine13);
        org.junit.Assert.assertNotNull(option16);
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertNotNull(collection20);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertTrue(""'"" + boolean43 + ""' != '"" + false + ""'"", boolean43 == false);
        org.junit.Assert.assertTrue(""'"" + boolean44 + ""' != '"" + false + ""'"", boolean44 == false);
        org.junit.Assert.assertNotNull(list45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNull(strArray58);
        org.junit.Assert.assertEquals(""'"" + str61 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str61, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertNotNull(optionArray69);"
188,364,6020,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0365"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken(""hi!"", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("""");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptions();
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        char char31 = option30.getValueSeparator();
        org.apache.commons.cli.Option option33 = org.apache.commons.cli.OptionBuilder.create('4');
        option33.setDescription("""");
        option30.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup37 = options28.getOptionGroup(option30);
        option30.setOptionalArg(true);
        int int40 = option30.getId();
        org.apache.commons.cli.Options options41 = options21.addOption(option30);
        boolean boolean43 = options41.hasOption("""");
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setArgs((int) (short) 100);
        option45.setArgName(""[ option: 4  :: null ]"");
        java.lang.String str50 = option45.getLongOpt();
        boolean boolean51 = option45.hasLongOpt();
        org.apache.commons.cli.Options options52 = options41.addOption(option45);
        java.util.Collection collection53 = options41.getOptions();
        org.apache.commons.cli.PosixParser posixParser54 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = org.apache.commons.cli.OptionBuilder.create('4');
        option57.setDescription("""");
        org.apache.commons.cli.Options options60 = options55.addOption(option57);
        java.util.Collection collection61 = options55.getOptions();
        boolean boolean63 = options55.hasOption(""arg"");
        java.lang.String[] strArray66 = new java.lang.String[] { ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"", ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"" };
        org.apache.commons.cli.CommandLine commandLine67 = posixParser54.parse(options55, strArray66);
        java.lang.String[] strArray69 = posixParser0.flatten(options41, strArray66, false);
        org.apache.commons.cli.Options options70 = null;
        java.lang.String[] strArray71 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.CommandLine commandLine72 = posixParser0.parse(options70, strArray71);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertTrue(""'"" + char31 + ""' != '"" + '\000' + ""'"", char31 == '\000');
        org.junit.Assert.assertNotNull(option33);
        org.junit.Assert.assertNull(optionGroup37);
        org.junit.Assert.assertTrue(""'"" + int40 + ""' != '"" + 52 + ""'"", int40 == 52);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertTrue(""'"" + boolean43 + ""' != '"" + false + ""'"", boolean43 == false);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue(""'"" + boolean51 + ""' != '"" + false + ""'"", boolean51 == false);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(collection53);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(collection61);
        org.junit.Assert.assertTrue(""'"" + boolean63 + ""' != '"" + false + ""'"", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(strArray69);"
189,423,6095,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0424"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("""");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("""");
        option26.setLongOpt(""hi!"");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues(""hi!"");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup43 = options40.getOptionGroup(option42);
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        org.apache.commons.cli.OptionGroup optionGroup46 = options40.getOptionGroup(option45);
        java.util.List list47 = options40.getRequiredOptions();
        java.util.Collection collection48 = options40.getOptions();
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        option52.setDescription("""");
        org.apache.commons.cli.Options options55 = options50.addOption(option52);
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray58 = commandLine56.getOptionValues(""hi!"");
        java.lang.String str61 = commandLine56.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str63 = commandLine56.getOptionValue(""arg"");
        java.lang.String[] strArray64 = commandLine56.getArgs();
        java.lang.String[] strArray66 = posixParser49.flatten(options55, strArray64, false);
        java.util.Properties properties67 = null;
        org.apache.commons.cli.CommandLine commandLine69 = posixParser0.parse(options40, strArray64, properties67, true);
        java.lang.String str72 = commandLine69.getOptionValue('4', """");
        java.lang.Object obj74 = commandLine69.getOptionObject('=');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue(""'"" + boolean31 + ""' != '"" + true + ""'"", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNull(optionGroup46);
        org.junit.Assert.assertNotNull(list47);
        org.junit.Assert.assertNotNull(collection48);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNull(strArray58);
        org.junit.Assert.assertEquals(""'"" + str61 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str61, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine69);
        org.junit.Assert.assertEquals(""'"" + str72 + ""' != '"" + """" + ""'"", str72, """");
        org.junit.Assert.assertNull(obj74);"
190,59,5887,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0060"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option6.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        org.apache.commons.cli.Option option37 = org.apache.commons.cli.OptionBuilder.create('4');
        option37.setDescription("""");
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("""");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        boolean boolean46 = option42.hasOptionalArg();
        option37.setType((java.lang.Object) boolean46);
        java.lang.String str48 = option37.getArgName();
        java.lang.String str49 = option37.getValue();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        char char53 = option52.getValueSeparator();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("""");
        option52.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup59 = options50.getOptionGroup(option52);
        boolean boolean60 = option52.hasValueSeparator();
        option52.setDescription("""");
        option52.setLongOpt(""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"");
        boolean boolean65 = option37.equals((java.lang.Object) option52);
        java.util.ListIterator listIterator66 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option37, listIterator66);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue(""'"" + char7 + ""' != '"" + '\000' + ""'"", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option37);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertTrue(""'"" + boolean46 + ""' != '"" + false + ""'"", boolean46 == false);
        org.junit.Assert.assertEquals(""'"" + str48 + ""' != '"" + ""arg"" + ""'"", str48, ""arg"");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertTrue(""'"" + char53 + ""' != '"" + '\000' + ""'"", char53 == '\000');
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNull(optionGroup59);
        org.junit.Assert.assertTrue(""'"" + boolean60 + ""' != '"" + false + ""'"", boolean60 == false);
        org.junit.Assert.assertTrue(""'"" + boolean65 + ""' != '"" + false + ""'"", boolean65 == false);"
191,305,6035,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0306"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("""");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("""");
        option26.setLongOpt(""hi!"");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues(""hi!"");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("""");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        java.lang.String[] strArray47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options40, strArray47);
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup52 = options49.getOptionGroup(option51);
        org.apache.commons.cli.Option option54 = org.apache.commons.cli.OptionBuilder.create('4');
        org.apache.commons.cli.OptionGroup optionGroup55 = options49.getOptionGroup(option54);
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray58 = commandLine56.getOptionValues(""hi!"");
        java.lang.String[] strArray59 = commandLine56.getArgs();
        java.util.Iterator iterator60 = commandLine56.iterator();
        boolean boolean62 = commandLine56.hasOption(""[ option: 4  :: null ]"");
        java.lang.String str65 = commandLine56.getOptionValue(""[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]"", ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"");
        java.lang.String[] strArray66 = commandLine56.getArgs();
        org.apache.commons.cli.CommandLine commandLine68 = posixParser0.parse(options49, strArray66, false);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue(""'"" + boolean31 + ""' != '"" + true + ""'"", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(option51);
        org.junit.Assert.assertNull(optionGroup52);
        org.junit.Assert.assertNotNull(option54);
        org.junit.Assert.assertNull(optionGroup55);
        org.junit.Assert.assertNull(strArray58);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(iterator60);
        org.junit.Assert.assertTrue(""'"" + boolean62 + ""' != '"" + false + ""'"", boolean62 == false);
        org.junit.Assert.assertEquals(""'"" + str65 + ""' != '"" + ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"" + ""'"", str65, ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"");
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine68);"
192,223,6258,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0224"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues(""hi!"");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("""");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        java.lang.String str64 = commandLine62.getOptionValue('\000');
        java.lang.Object obj66 = commandLine62.getOptionObject(""[ option:    :: null ]"");
        org.apache.commons.cli.Option[] optionArray67 = commandLine62.getOptions();
        commandLine62.addArg(""[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]"");
        java.lang.String str71 = commandLine62.getOptionValue(""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4 org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!  ::  ]} ] [ long {org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!=[ option: 4 org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!  ::  ]} ]"");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue(""'"" + boolean36 + ""' != '"" + false + ""'"", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNotNull(optionArray67);
        org.junit.Assert.assertNull(str71);"
193,41,5971,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0042"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("""");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("""");
        option26.setLongOpt(""hi!"");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues(""hi!"");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup43 = options40.getOptionGroup(option42);
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        org.apache.commons.cli.OptionGroup optionGroup46 = options40.getOptionGroup(option45);
        java.util.List list47 = options40.getRequiredOptions();
        java.util.Collection collection48 = options40.getOptions();
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        option52.setDescription("""");
        org.apache.commons.cli.Options options55 = options50.addOption(option52);
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray58 = commandLine56.getOptionValues(""hi!"");
        java.lang.String str61 = commandLine56.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str63 = commandLine56.getOptionValue(""arg"");
        java.lang.String[] strArray64 = commandLine56.getArgs();
        java.lang.String[] strArray66 = posixParser49.flatten(options55, strArray64, false);
        java.util.Properties properties67 = null;
        org.apache.commons.cli.CommandLine commandLine69 = posixParser0.parse(options40, strArray64, properties67, true);
        posixParser0.burstToken(""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"", false);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue(""'"" + boolean31 + ""' != '"" + true + ""'"", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNull(optionGroup46);
        org.junit.Assert.assertNotNull(list47);
        org.junit.Assert.assertNotNull(collection48);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNull(strArray58);
        org.junit.Assert.assertEquals(""'"" + str61 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str61, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine69);"
194,240,5949,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0241"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("""");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("""");
        option26.setLongOpt(""hi!"");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues(""hi!"");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup43 = options40.getOptionGroup(option42);
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        org.apache.commons.cli.OptionGroup optionGroup46 = options40.getOptionGroup(option45);
        java.util.List list47 = options40.getRequiredOptions();
        java.util.Collection collection48 = options40.getOptions();
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        option52.setDescription("""");
        org.apache.commons.cli.Options options55 = options50.addOption(option52);
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray58 = commandLine56.getOptionValues(""hi!"");
        java.lang.String str61 = commandLine56.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str63 = commandLine56.getOptionValue(""arg"");
        java.lang.String[] strArray64 = commandLine56.getArgs();
        java.lang.String[] strArray66 = posixParser49.flatten(options55, strArray64, false);
        java.util.Properties properties67 = null;
        org.apache.commons.cli.CommandLine commandLine69 = posixParser0.parse(options40, strArray64, properties67, true);
        java.lang.Class<?> wildcardClass70 = options40.getClass();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue(""'"" + boolean31 + ""' != '"" + true + ""'"", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNull(optionGroup46);
        org.junit.Assert.assertNotNull(list47);
        org.junit.Assert.assertNotNull(collection48);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNull(strArray58);
        org.junit.Assert.assertEquals(""'"" + str61 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str61, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine69);
        org.junit.Assert.assertNotNull(wildcardClass70);"
195,350,6202,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0351"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues(""hi!"");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("""");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        java.lang.String str64 = commandLine62.getOptionValue('\000');
        java.lang.Object obj66 = commandLine62.getOptionObject(""[ option:    :: null ]"");
        org.apache.commons.cli.Option[] optionArray67 = commandLine62.getOptions();
        java.lang.String[] strArray68 = commandLine62.getArgs();
        java.lang.String str71 = commandLine62.getOptionValue('a', ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"");
        java.lang.String[] strArray73 = commandLine62.getOptionValues(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue(""'"" + boolean36 + ""' != '"" + false + ""'"", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNotNull(optionArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertEquals(""'"" + str71 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"" + ""'"", str71, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(strArray73);"
196,222,6167,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0223"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues(""hi!"");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("""");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        java.lang.String str64 = commandLine62.getOptionValue('\000');
        java.lang.Object obj66 = commandLine62.getOptionObject(""[ option:    :: null ]"");
        org.apache.commons.cli.Option[] optionArray67 = commandLine62.getOptions();
        commandLine62.addArg(""[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]"");
        java.lang.String str72 = commandLine62.getOptionValue(""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"", ""org.apache.commons.cli.MissingArgumentException: [ option:    :: null ]"");
        java.lang.String str74 = commandLine62.getOptionValue('\000');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue(""'"" + boolean36 + ""' != '"" + false + ""'"", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNotNull(optionArray67);
        org.junit.Assert.assertEquals(""'"" + str72 + ""' != '"" + ""org.apache.commons.cli.MissingArgumentException: [ option:    :: null ]"" + ""'"", str72, ""org.apache.commons.cli.MissingArgumentException: [ option:    :: null ]"");
        org.junit.Assert.assertNull(str74);"
197,295,6140,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0296"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues(""hi!"");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("""");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        java.lang.String str64 = commandLine62.getOptionValue('\000');
        java.lang.Object obj66 = commandLine62.getOptionObject(""[ option:    :: null ]"");
        org.apache.commons.cli.Option[] optionArray67 = commandLine62.getOptions();
        java.lang.String[] strArray68 = commandLine62.getArgs();
        java.lang.Object obj70 = commandLine62.getOptionObject("""");
        org.apache.commons.cli.Option option71 = null;
        // The following exception was thrown during execution in test generation
        try {
            commandLine62.addOption(option71);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue(""'"" + boolean36 + ""' != '"" + false + ""'"", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNotNull(optionArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNull(obj70);"
198,415,5510,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0416"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String[] strArray10 = commandLine7.getArgs();
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser0.parse(options1, strArray10, properties11);
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option15 = org.apache.commons.cli.OptionBuilder.create('4');
        char char16 = option15.getValueSeparator();
        org.apache.commons.cli.Option option18 = org.apache.commons.cli.OptionBuilder.create('4');
        option18.setDescription("""");
        option15.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup22 = options13.getOptionGroup(option15);
        java.util.List list23 = options13.helpOptions();
        org.apache.commons.cli.PosixParser posixParser24 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup28 = options25.getOptionGroup(option27);
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray31 = commandLine29.getOptionValues(""hi!"");
        java.lang.String str34 = commandLine29.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str36 = commandLine29.getOptionValue(""arg"");
        java.lang.String[] strArray37 = commandLine29.getArgs();
        java.lang.String[] strArray39 = posixParser24.flatten(options25, strArray37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("""");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine47 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray49 = commandLine47.getOptionValues(""hi!"");
        java.lang.String str52 = commandLine47.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str54 = commandLine47.getOptionValue(""arg"");
        java.lang.String[] strArray55 = commandLine47.getArgs();
        java.util.Properties properties56 = null;
        org.apache.commons.cli.CommandLine commandLine58 = posixParser24.parse(options40, strArray55, properties56, false);
        org.apache.commons.cli.CommandLine commandLine59 = posixParser0.parse(options13, strArray55);
        java.util.Collection collection60 = options13.getOptions();
        java.util.Collection collection61 = options13.getOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertNotNull(option15);
        org.junit.Assert.assertTrue(""'"" + char16 + ""' != '"" + '\000' + ""'"", char16 == '\000');
        org.junit.Assert.assertNotNull(option18);
        org.junit.Assert.assertNull(optionGroup22);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertNull(optionGroup28);
        org.junit.Assert.assertNull(strArray31);
        org.junit.Assert.assertEquals(""'"" + str34 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str34, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNull(strArray49);
        org.junit.Assert.assertEquals(""'"" + str52 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str52, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertNotNull(commandLine59);
        org.junit.Assert.assertNotNull(collection60);
        org.junit.Assert.assertNotNull(collection61);"
199,292,5503,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0293"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String[] strArray10 = commandLine7.getArgs();
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser0.parse(options1, strArray10, properties11);
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option15 = org.apache.commons.cli.OptionBuilder.create('4');
        char char16 = option15.getValueSeparator();
        org.apache.commons.cli.Option option18 = org.apache.commons.cli.OptionBuilder.create('4');
        option18.setDescription("""");
        option15.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup22 = options13.getOptionGroup(option15);
        java.util.List list23 = options13.helpOptions();
        org.apache.commons.cli.PosixParser posixParser24 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup28 = options25.getOptionGroup(option27);
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray31 = commandLine29.getOptionValues(""hi!"");
        java.lang.String str34 = commandLine29.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str36 = commandLine29.getOptionValue(""arg"");
        java.lang.String[] strArray37 = commandLine29.getArgs();
        java.lang.String[] strArray39 = posixParser24.flatten(options25, strArray37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("""");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine47 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray49 = commandLine47.getOptionValues(""hi!"");
        java.lang.String str52 = commandLine47.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str54 = commandLine47.getOptionValue(""arg"");
        java.lang.String[] strArray55 = commandLine47.getArgs();
        java.util.Properties properties56 = null;
        org.apache.commons.cli.CommandLine commandLine58 = posixParser24.parse(options40, strArray55, properties56, false);
        org.apache.commons.cli.CommandLine commandLine59 = posixParser0.parse(options13, strArray55);
        posixParser0.burstToken(""org.apache.commons.cli.MissingArgumentException: [ option: 4  ::  ]"", true);
        java.lang.Class<?> wildcardClass63 = posixParser0.getClass();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertNotNull(option15);
        org.junit.Assert.assertTrue(""'"" + char16 + ""' != '"" + '\000' + ""'"", char16 == '\000');
        org.junit.Assert.assertNotNull(option18);
        org.junit.Assert.assertNull(optionGroup22);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertNull(optionGroup28);
        org.junit.Assert.assertNull(strArray31);
        org.junit.Assert.assertEquals(""'"" + str34 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str34, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNull(strArray49);
        org.junit.Assert.assertEquals(""'"" + str52 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str52, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertNotNull(commandLine59);
        org.junit.Assert.assertNotNull(wildcardClass63);"
200,228,5686,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0229"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken(""hi!"", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("""");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptionGroups();
        org.apache.commons.cli.Options options31 = options21.addOption("""", false, ""arg"");
        java.util.List list32 = options31.getRequiredOptions();
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create(""arg"");
        org.apache.commons.cli.Options options35 = options31.addOption(option34);
        boolean boolean37 = options31.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        java.util.Collection collection38 = options31.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine39 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine39.getOptionValues(""hi!"");
        java.lang.String str44 = commandLine39.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str46 = commandLine39.getOptionValue(""arg"");
        java.lang.String[] strArray47 = commandLine39.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine50 = posixParser0.parse(options31, strArray47, properties48, true);
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create('4');
        option53.setDescription("""");
        org.apache.commons.cli.Options options56 = options51.addOption(option53);
        org.apache.commons.cli.CommandLine commandLine57 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray59 = commandLine57.getOptionValues(""hi!"");
        java.lang.String str62 = commandLine57.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str64 = commandLine57.getOptionValue(""arg"");
        java.lang.String[] strArray65 = commandLine57.getArgs();
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser0.parse(options51, strArray65, properties66);
        java.lang.String str69 = commandLine67.getOptionValue(' ');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(options31);
        org.junit.Assert.assertNotNull(list32);
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertTrue(""'"" + boolean37 + ""' != '"" + false + ""'"", boolean37 == false);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertEquals(""'"" + str44 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str44, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNotNull(options56);
        org.junit.Assert.assertNull(strArray59);
        org.junit.Assert.assertEquals(""'"" + str62 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str62, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNull(str69);"
201,278,5679,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0279"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken(""hi!"", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("""");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptionGroups();
        org.apache.commons.cli.Options options31 = options21.addOption("""", false, ""arg"");
        java.util.List list32 = options31.getRequiredOptions();
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create(""arg"");
        org.apache.commons.cli.Options options35 = options31.addOption(option34);
        boolean boolean37 = options31.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        java.util.Collection collection38 = options31.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine39 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine39.getOptionValues(""hi!"");
        java.lang.String str44 = commandLine39.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str46 = commandLine39.getOptionValue(""arg"");
        java.lang.String[] strArray47 = commandLine39.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine50 = posixParser0.parse(options31, strArray47, properties48, true);
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create('4');
        option53.setDescription("""");
        org.apache.commons.cli.Options options56 = options51.addOption(option53);
        org.apache.commons.cli.CommandLine commandLine57 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray59 = commandLine57.getOptionValues(""hi!"");
        java.lang.String str62 = commandLine57.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str64 = commandLine57.getOptionValue(""arg"");
        java.lang.String[] strArray65 = commandLine57.getArgs();
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser0.parse(options51, strArray65, properties66);
        java.util.List list68 = options51.helpOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(options31);
        org.junit.Assert.assertNotNull(list32);
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertTrue(""'"" + boolean37 + ""' != '"" + false + ""'"", boolean37 == false);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertEquals(""'"" + str44 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str44, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNotNull(options56);
        org.junit.Assert.assertNull(strArray59);
        org.junit.Assert.assertEquals(""'"" + str62 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str62, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(list68);"
202,226,5618,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0227"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        java.util.Collection collection22 = options6.getOptionGroups();
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create('4');
        option25.setDescription("""");
        org.apache.commons.cli.Options options28 = options23.addOption(option25);
        java.util.Collection collection29 = options23.getOptionGroups();
        org.apache.commons.cli.Options options33 = options23.addOption("""", false, ""arg"");
        java.util.Collection collection34 = options23.getOptionGroups();
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option37 = org.apache.commons.cli.OptionBuilder.create('4');
        option37.setDescription("""");
        org.apache.commons.cli.Options options40 = options35.addOption(option37);
        option37.setValueSeparator(' ');
        org.apache.commons.cli.OptionGroup optionGroup43 = options23.getOptionGroup(option37);
        option37.setRequired(false);
        org.apache.commons.cli.CommandLine commandLine46 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray48 = commandLine46.getOptionValues(""hi!"");
        java.lang.String[] strArray49 = commandLine46.getArgs();
        boolean boolean50 = option37.equals((java.lang.Object) strArray49);
        org.apache.commons.cli.OptionGroup optionGroup51 = options6.getOptionGroup(option37);
        org.apache.commons.cli.Options options56 = options6.addOption(""arg"", ""org.apache.commons.cli.UnrecognizedOptionException: hi!"", false, ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.Options options60 = options6.addOption("" "", false, ""hi!"");
        java.lang.String str61 = options6.toString();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(collection22);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(collection29);
        org.junit.Assert.assertNotNull(options33);
        org.junit.Assert.assertNotNull(collection34);
        org.junit.Assert.assertNotNull(option37);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNull(strArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue(""'"" + boolean50 + ""' != '"" + false + ""'"", boolean50 == false);
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(options56);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertEquals(""'"" + str61 + ""' != '"" + ""[ Options: [ short { =[ option:    :: hi! ], 4=[ option: 4  ::  ], arg=[ option: arg org.apache.commons.cli.UnrecognizedOptionException: hi!  :: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ]} ] [ long {org.apache.commons.cli.UnrecognizedOptionException: hi!=[ option: arg org.apache.commons.cli.UnrecognizedOptionException: hi!  :: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ]} ]"" + ""'"", str61, ""[ Options: [ short { =[ option:    :: hi! ], 4=[ option: 4  ::  ], arg=[ option: arg org.apache.commons.cli.UnrecognizedOptionException: hi!  :: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ]} ] [ long {org.apache.commons.cli.UnrecognizedOptionException: hi!=[ option: arg org.apache.commons.cli.UnrecognizedOptionException: hi!  :: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ]} ]"");"
203,398,5288,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0399"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine8 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine8.getOptionValues(""hi!"");
        java.lang.String str13 = commandLine8.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str15 = commandLine8.getOptionValue(""arg"");
        java.lang.String[] strArray16 = commandLine8.getArgs();
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser0.parse(options1, strArray16, properties17);
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option22 = org.apache.commons.cli.OptionBuilder.create('4');
        option22.setDescription("""");
        org.apache.commons.cli.Options options25 = options20.addOption(option22);
        org.apache.commons.cli.CommandLine commandLine26 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray28 = commandLine26.getOptionValues(""hi!"");
        java.lang.String str31 = commandLine26.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str33 = commandLine26.getOptionValue(""arg"");
        java.lang.String[] strArray34 = commandLine26.getArgs();
        java.lang.String[] strArray36 = posixParser19.flatten(options25, strArray34, false);
        java.util.Collection collection37 = options25.getOptionGroups();
        java.util.List list38 = options25.helpOptions();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setArgs((int) (short) 100);
        option40.setArgName(""[ option: 4  :: null ]"");
        java.lang.String str45 = option40.getLongOpt();
        java.lang.String str47 = option40.getValue((int) (short) -1);
        org.apache.commons.cli.CommandLine commandLine48 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray50 = commandLine48.getOptionValues(""hi!"");
        java.lang.String str53 = commandLine48.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str55 = commandLine48.getOptionValue(""arg"");
        java.lang.String[] strArray56 = commandLine48.getArgs();
        option40.setType((java.lang.Object) strArray56);
        java.util.Properties properties58 = null;
        org.apache.commons.cli.CommandLine commandLine59 = posixParser0.parse(options25, strArray56, properties58);
        java.lang.String[] strArray61 = commandLine59.getOptionValues(""[ Options: [ short {4=[ option: 4  :: null ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertEquals(""'"" + str13 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str13, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(option22);
        org.junit.Assert.assertNotNull(options25);
        org.junit.Assert.assertNull(strArray28);
        org.junit.Assert.assertEquals(""'"" + str31 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str31, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(collection37);
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(strArray50);
        org.junit.Assert.assertEquals(""'"" + str53 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str53, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(commandLine59);
        org.junit.Assert.assertNull(strArray61);"
204,385,5471,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0386"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option6.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken(""4"", false);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create('4');
        option41.setDescription("""");
        org.apache.commons.cli.Options options44 = options39.addOption(option41);
        java.util.Collection collection45 = options39.getOptions();
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option48 = org.apache.commons.cli.OptionBuilder.create('4');
        char char49 = option48.getValueSeparator();
        org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create('4');
        option51.setDescription("""");
        option48.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup55 = options46.getOptionGroup(option48);
        option48.setOptionalArg(true);
        int int58 = option48.getId();
        org.apache.commons.cli.Options options59 = options39.addOption(option48);
        org.apache.commons.cli.CommandLine commandLine60 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray62 = commandLine60.getOptionValues(""hi!"");
        java.lang.String[] strArray63 = commandLine60.getArgs();
        java.util.Properties properties64 = null;
        org.apache.commons.cli.CommandLine commandLine66 = posixParser0.parse(options59, strArray63, properties64, true);
        java.lang.String str68 = commandLine66.getOptionValue('#');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue(""'"" + char7 + ""' != '"" + '\000' + ""'"", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNotNull(collection45);
        org.junit.Assert.assertNotNull(option48);
        org.junit.Assert.assertTrue(""'"" + char49 + ""' != '"" + '\000' + ""'"", char49 == '\000');
        org.junit.Assert.assertNotNull(option51);
        org.junit.Assert.assertNull(optionGroup55);
        org.junit.Assert.assertTrue(""'"" + int58 + ""' != '"" + 52 + ""'"", int58 == 52);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNull(strArray62);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(commandLine66);
        org.junit.Assert.assertNull(str68);"
205,9,5932,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0010"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues(""hi!"");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("""");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        org.apache.commons.cli.Option option64 = org.apache.commons.cli.OptionBuilder.create('4');
        boolean boolean65 = option64.hasArgs();
        java.lang.Object obj66 = option64.getType();
        java.util.ListIterator listIterator67 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option64, listIterator67);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue(""'"" + boolean36 + ""' != '"" + false + ""'"", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(option64);
        org.junit.Assert.assertTrue(""'"" + boolean65 + ""' != '"" + false + ""'"", boolean65 == false);
        org.junit.Assert.assertNull(obj66);"
206,391,5935,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0392"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues(""hi!"");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("""");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        java.lang.String str64 = commandLine62.getOptionValue('\000');
        java.lang.Object obj66 = commandLine62.getOptionObject(""[ option:    :: null ]"");
        org.apache.commons.cli.Option[] optionArray67 = commandLine62.getOptions();
        java.lang.String[] strArray68 = commandLine62.getArgs();
        java.lang.Object obj70 = commandLine62.getOptionObject("""");
        boolean boolean72 = commandLine62.hasOption(""org.apache.commons.cli.ParseException: arg"");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue(""'"" + boolean36 + ""' != '"" + false + ""'"", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNotNull(optionArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertTrue(""'"" + boolean72 + ""' != '"" + false + ""'"", boolean72 == false);"
207,472,5431,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0473"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option6.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken(""4"", false);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create('4');
        option41.setDescription("""");
        org.apache.commons.cli.Options options44 = options39.addOption(option41);
        java.util.Collection collection45 = options39.getOptions();
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option48 = org.apache.commons.cli.OptionBuilder.create('4');
        char char49 = option48.getValueSeparator();
        org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create('4');
        option51.setDescription("""");
        option48.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup55 = options46.getOptionGroup(option48);
        option48.setOptionalArg(true);
        int int58 = option48.getId();
        org.apache.commons.cli.Options options59 = options39.addOption(option48);
        org.apache.commons.cli.CommandLine commandLine60 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray62 = commandLine60.getOptionValues(""hi!"");
        java.lang.String[] strArray63 = commandLine60.getArgs();
        java.util.Properties properties64 = null;
        org.apache.commons.cli.CommandLine commandLine66 = posixParser0.parse(options59, strArray63, properties64, true);
        posixParser0.burstToken(""[ option:    :: null :: arg ]"", true);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue(""'"" + char7 + ""' != '"" + '\000' + ""'"", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNotNull(collection45);
        org.junit.Assert.assertNotNull(option48);
        org.junit.Assert.assertTrue(""'"" + char49 + ""' != '"" + '\000' + ""'"", char49 == '\000');
        org.junit.Assert.assertNotNull(option51);
        org.junit.Assert.assertNull(optionGroup55);
        org.junit.Assert.assertTrue(""'"" + int58 + ""' != '"" + 52 + ""'"", int58 == 52);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNull(strArray62);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(commandLine66);"
208,498,5905,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0499"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues(""hi!"");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("""");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        java.lang.String str64 = commandLine62.getOptionValue('\000');
        java.lang.Object obj66 = commandLine62.getOptionObject(""[ option:    :: null ]"");
        java.lang.String str68 = commandLine62.getOptionValue('=');
        java.lang.String str71 = commandLine62.getOptionValue(' ', ""org.apache.commons.cli.UnrecognizedOptionException: "");
        java.lang.String str73 = commandLine62.getOptionValue("""");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue(""'"" + boolean36 + ""' != '"" + false + ""'"", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertEquals(""'"" + str71 + ""' != '"" + ""org.apache.commons.cli.UnrecognizedOptionException: "" + ""'"", str71, ""org.apache.commons.cli.UnrecognizedOptionException: "");
        org.junit.Assert.assertNull(str73);"
209,235,5852,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0236"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues(""hi!"");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("""");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        java.lang.String str64 = commandLine62.getOptionValue('\000');
        java.lang.Object obj66 = commandLine62.getOptionObject(""[ option:    :: null ]"");
        org.apache.commons.cli.Option[] optionArray67 = commandLine62.getOptions();
        java.lang.String[] strArray68 = commandLine62.getArgs();
        java.lang.Object obj70 = commandLine62.getOptionObject("""");
        java.lang.String str72 = commandLine62.getOptionValue('\000');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue(""'"" + boolean36 + ""' != '"" + false + ""'"", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNotNull(optionArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertNull(str72);"
210,470,5459,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0471"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        java.util.Collection collection22 = options6.getOptionGroups();
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create('4');
        option25.setDescription("""");
        org.apache.commons.cli.Options options28 = options23.addOption(option25);
        java.util.Collection collection29 = options23.getOptionGroups();
        org.apache.commons.cli.Options options33 = options23.addOption("""", false, ""arg"");
        java.util.Collection collection34 = options23.getOptionGroups();
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option37 = org.apache.commons.cli.OptionBuilder.create('4');
        option37.setDescription("""");
        org.apache.commons.cli.Options options40 = options35.addOption(option37);
        option37.setValueSeparator(' ');
        org.apache.commons.cli.OptionGroup optionGroup43 = options23.getOptionGroup(option37);
        option37.setRequired(false);
        org.apache.commons.cli.CommandLine commandLine46 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray48 = commandLine46.getOptionValues(""hi!"");
        java.lang.String[] strArray49 = commandLine46.getArgs();
        boolean boolean50 = option37.equals((java.lang.Object) strArray49);
        org.apache.commons.cli.OptionGroup optionGroup51 = options6.getOptionGroup(option37);
        org.apache.commons.cli.Options options56 = options6.addOption(""arg"", ""org.apache.commons.cli.UnrecognizedOptionException: hi!"", false, ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.Options options60 = options6.addOption("" "", false, ""hi!"");
        org.apache.commons.cli.Options options61 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option63 = org.apache.commons.cli.OptionBuilder.create('4');
        option63.setDescription("""");
        org.apache.commons.cli.Options options66 = options61.addOption(option63);
        boolean boolean67 = option63.hasOptionalArg();
        int int68 = option63.getArgs();
        org.apache.commons.cli.Options options69 = options60.addOption(option63);
        boolean boolean71 = options60.hasOption("""");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(collection22);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(collection29);
        org.junit.Assert.assertNotNull(options33);
        org.junit.Assert.assertNotNull(collection34);
        org.junit.Assert.assertNotNull(option37);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNull(strArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue(""'"" + boolean50 + ""' != '"" + false + ""'"", boolean50 == false);
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(options56);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(option63);
        org.junit.Assert.assertNotNull(options66);
        org.junit.Assert.assertTrue(""'"" + boolean67 + ""' != '"" + false + ""'"", boolean67 == false);
        org.junit.Assert.assertTrue(""'"" + int68 + ""' != '"" + (-1) + ""'"", int68 == (-1));
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertTrue(""'"" + boolean71 + ""' != '"" + false + ""'"", boolean71 == false);"
211,365,5839,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0366"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues(""hi!"");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("""");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options67 = options53.addOption(""[ option:   [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]  :: null ]"", ""[ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]"", false, ""[ option: 4 arg  :: null ]"");
            org.junit.Assert.fail(""Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue(""'"" + boolean36 + ""' != '"" + false + ""'"", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);"
212,103,5798,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0104"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues(""hi!"");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("""");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        java.lang.String str64 = commandLine62.getOptionValue('\000');
        java.lang.String str67 = commandLine62.getOptionValue('a', "" "");
        org.apache.commons.cli.Option option68 = null;
        // The following exception was thrown during execution in test generation
        try {
            commandLine62.addOption(option68);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue(""'"" + boolean36 + ""' != '"" + false + ""'"", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertEquals(""'"" + str67 + ""' != '"" + "" "" + ""'"", str67, "" "");"
213,331,5387,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0332"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken(""hi!"", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("""");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptionGroups();
        org.apache.commons.cli.Options options31 = options21.addOption("""", false, ""arg"");
        java.util.List list32 = options31.getRequiredOptions();
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create(""arg"");
        org.apache.commons.cli.Options options35 = options31.addOption(option34);
        boolean boolean37 = options31.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        java.util.Collection collection38 = options31.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine39 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine39.getOptionValues(""hi!"");
        java.lang.String str44 = commandLine39.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str46 = commandLine39.getOptionValue(""arg"");
        java.lang.String[] strArray47 = commandLine39.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine50 = posixParser0.parse(options31, strArray47, properties48, true);
        org.apache.commons.cli.Option option52 = options31.getOption("" "");
        org.apache.commons.cli.Option option54 = org.apache.commons.cli.OptionBuilder.create('a');
        char char55 = option54.getValueSeparator();
        java.util.List list56 = option54.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup57 = options31.getOptionGroup(option54);
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        option59.setDescription("""");
        java.lang.String str62 = option59.getLongOpt();
        option59.setArgs((int) (short) 1);
        org.apache.commons.cli.OptionGroup optionGroup65 = options31.getOptionGroup(option59);
        char char66 = option59.getValueSeparator();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(options31);
        org.junit.Assert.assertNotNull(list32);
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertTrue(""'"" + boolean37 + ""' != '"" + false + ""'"", boolean37 == false);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertEquals(""'"" + str44 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str44, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNull(option52);
        org.junit.Assert.assertNotNull(option54);
        org.junit.Assert.assertTrue(""'"" + char55 + ""' != '"" + '\000' + ""'"", char55 == '\000');
        org.junit.Assert.assertNotNull(list56);
        org.junit.Assert.assertNull(optionGroup57);
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(optionGroup65);
        org.junit.Assert.assertTrue(""'"" + char66 + ""' != '"" + '\000' + ""'"", char66 == '\000');"
214,342,5363,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0343"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken(""hi!"", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("""");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptionGroups();
        org.apache.commons.cli.Options options31 = options21.addOption("""", false, ""arg"");
        java.util.List list32 = options31.getRequiredOptions();
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create(""arg"");
        org.apache.commons.cli.Options options35 = options31.addOption(option34);
        boolean boolean37 = options31.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        java.util.Collection collection38 = options31.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine39 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine39.getOptionValues(""hi!"");
        java.lang.String str44 = commandLine39.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str46 = commandLine39.getOptionValue(""arg"");
        java.lang.String[] strArray47 = commandLine39.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine50 = posixParser0.parse(options31, strArray47, properties48, true);
        org.apache.commons.cli.Option option52 = options31.getOption("" "");
        org.apache.commons.cli.Option option54 = org.apache.commons.cli.OptionBuilder.create('a');
        char char55 = option54.getValueSeparator();
        java.util.List list56 = option54.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup57 = options31.getOptionGroup(option54);
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        option59.setDescription("""");
        java.lang.String str62 = option59.getLongOpt();
        option59.setArgs((int) (short) 1);
        org.apache.commons.cli.OptionGroup optionGroup65 = options31.getOptionGroup(option59);
        int int66 = option59.getId();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(options31);
        org.junit.Assert.assertNotNull(list32);
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertTrue(""'"" + boolean37 + ""' != '"" + false + ""'"", boolean37 == false);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertEquals(""'"" + str44 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str44, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNull(option52);
        org.junit.Assert.assertNotNull(option54);
        org.junit.Assert.assertTrue(""'"" + char55 + ""' != '"" + '\000' + ""'"", char55 == '\000');
        org.junit.Assert.assertNotNull(list56);
        org.junit.Assert.assertNull(optionGroup57);
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(optionGroup65);
        org.junit.Assert.assertTrue(""'"" + int66 + ""' != '"" + 52 + ""'"", int66 == 52);"
215,269,5348,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0270"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken(""hi!"", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("""");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptionGroups();
        org.apache.commons.cli.Options options31 = options21.addOption("""", false, ""arg"");
        java.util.List list32 = options31.getRequiredOptions();
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create(""arg"");
        org.apache.commons.cli.Options options35 = options31.addOption(option34);
        boolean boolean37 = options31.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        java.util.Collection collection38 = options31.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine39 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine39.getOptionValues(""hi!"");
        java.lang.String str44 = commandLine39.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str46 = commandLine39.getOptionValue(""arg"");
        java.lang.String[] strArray47 = commandLine39.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine50 = posixParser0.parse(options31, strArray47, properties48, true);
        org.apache.commons.cli.Option option52 = options31.getOption("" "");
        org.apache.commons.cli.Option option54 = org.apache.commons.cli.OptionBuilder.create('a');
        char char55 = option54.getValueSeparator();
        java.util.List list56 = option54.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup57 = options31.getOptionGroup(option54);
        java.util.Collection collection58 = options31.getOptions();
        org.apache.commons.cli.OptionGroup optionGroup59 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options60 = options31.addOptionGroup(optionGroup59);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(options31);
        org.junit.Assert.assertNotNull(list32);
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertTrue(""'"" + boolean37 + ""' != '"" + false + ""'"", boolean37 == false);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertEquals(""'"" + str44 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str44, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNull(option52);
        org.junit.Assert.assertNotNull(option54);
        org.junit.Assert.assertTrue(""'"" + char55 + ""' != '"" + '\000' + ""'"", char55 == '\000');
        org.junit.Assert.assertNotNull(list56);
        org.junit.Assert.assertNull(optionGroup57);
        org.junit.Assert.assertNotNull(collection58);"
216,52,5743,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0053"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues(""hi!"");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("""");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        java.lang.String str64 = commandLine62.getOptionValue('\000');
        java.lang.Object obj66 = commandLine62.getOptionObject(""[ option:    :: null ]"");
        org.apache.commons.cli.Option[] optionArray67 = commandLine62.getOptions();
        java.lang.String[] strArray68 = commandLine62.getArgs();
        java.util.Iterator iterator69 = commandLine62.iterator();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue(""'"" + boolean36 + ""' != '"" + false + ""'"", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNotNull(optionArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(iterator69);"
217,182,4884,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0183"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.CommandLine commandLine5 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray7 = commandLine5.getOptionValues(""hi!"");
        java.lang.String str10 = commandLine5.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str12 = commandLine5.getOptionValue(""arg"");
        java.lang.String[] strArray13 = commandLine5.getArgs();
        java.lang.String[] strArray15 = posixParser0.flatten(options1, strArray13, true);
        org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = org.apache.commons.cli.OptionBuilder.create('4');
        option18.setDescription("""");
        org.apache.commons.cli.Options options21 = options16.addOption(option18);
        java.util.Collection collection22 = options16.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.util.Properties properties32 = null;
        org.apache.commons.cli.CommandLine commandLine34 = posixParser0.parse(options16, strArray31, properties32, false);
        org.apache.commons.cli.Options options35 = null;
        org.apache.commons.cli.PosixParser posixParser36 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option39 = org.apache.commons.cli.OptionBuilder.create('4');
        option39.setDescription("""");
        org.apache.commons.cli.Options options42 = options37.addOption(option39);
        java.util.Collection collection43 = options37.getOptions();
        boolean boolean45 = options37.hasOption(""arg"");
        java.lang.String[] strArray48 = new java.lang.String[] { ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"", ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"" };
        org.apache.commons.cli.CommandLine commandLine49 = posixParser36.parse(options37, strArray48);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.CommandLine commandLine51 = posixParser0.parse(options35, strArray48, true);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNull(strArray7);
        org.junit.Assert.assertEquals(""'"" + str10 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str10, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(option18);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNotNull(collection22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(option39);
        org.junit.Assert.assertNotNull(options42);
        org.junit.Assert.assertNotNull(collection43);
        org.junit.Assert.assertTrue(""'"" + boolean45 + ""' != '"" + false + ""'"", boolean45 == false);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(commandLine49);"
218,85,5279,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0086"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        java.util.Collection collection22 = options6.getOptionGroups();
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create('4');
        option25.setDescription("""");
        org.apache.commons.cli.Options options28 = options23.addOption(option25);
        java.util.Collection collection29 = options23.getOptionGroups();
        org.apache.commons.cli.Options options33 = options23.addOption("""", false, ""arg"");
        java.util.Collection collection34 = options23.getOptionGroups();
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option37 = org.apache.commons.cli.OptionBuilder.create('4');
        option37.setDescription("""");
        org.apache.commons.cli.Options options40 = options35.addOption(option37);
        option37.setValueSeparator(' ');
        org.apache.commons.cli.OptionGroup optionGroup43 = options23.getOptionGroup(option37);
        option37.setRequired(false);
        org.apache.commons.cli.CommandLine commandLine46 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray48 = commandLine46.getOptionValues(""hi!"");
        java.lang.String[] strArray49 = commandLine46.getArgs();
        boolean boolean50 = option37.equals((java.lang.Object) strArray49);
        org.apache.commons.cli.OptionGroup optionGroup51 = options6.getOptionGroup(option37);
        org.apache.commons.cli.Options options56 = options6.addOption(""arg"", ""org.apache.commons.cli.UnrecognizedOptionException: hi!"", false, ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.Options options60 = options6.addOption("" "", false, ""hi!"");
        java.util.Collection collection61 = options6.getOptionGroups();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options66 = options6.addOption(""org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"", false, """");
            org.junit.Assert.fail(""Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '.'"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(collection22);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(collection29);
        org.junit.Assert.assertNotNull(options33);
        org.junit.Assert.assertNotNull(collection34);
        org.junit.Assert.assertNotNull(option37);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNull(strArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue(""'"" + boolean50 + ""' != '"" + false + ""'"", boolean50 == false);
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(options56);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(collection61);"
219,449,5237,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0450"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        java.util.Collection collection22 = options6.getOptionGroups();
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create('4');
        option25.setDescription("""");
        org.apache.commons.cli.Options options28 = options23.addOption(option25);
        java.util.Collection collection29 = options23.getOptionGroups();
        org.apache.commons.cli.Options options33 = options23.addOption("""", false, ""arg"");
        java.util.Collection collection34 = options23.getOptionGroups();
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option37 = org.apache.commons.cli.OptionBuilder.create('4');
        option37.setDescription("""");
        org.apache.commons.cli.Options options40 = options35.addOption(option37);
        option37.setValueSeparator(' ');
        org.apache.commons.cli.OptionGroup optionGroup43 = options23.getOptionGroup(option37);
        option37.setRequired(false);
        org.apache.commons.cli.CommandLine commandLine46 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray48 = commandLine46.getOptionValues(""hi!"");
        java.lang.String[] strArray49 = commandLine46.getArgs();
        boolean boolean50 = option37.equals((java.lang.Object) strArray49);
        org.apache.commons.cli.OptionGroup optionGroup51 = options6.getOptionGroup(option37);
        org.apache.commons.cli.Options options56 = options6.addOption(""arg"", ""org.apache.commons.cli.UnrecognizedOptionException: hi!"", false, ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.Options options60 = options6.addOption("" "", false, ""hi!"");
        java.util.Collection collection61 = options6.getOptionGroups();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options65 = options6.addOption(""org.apache.commons.cli.MissingArgumentException: arg"", false, ""org.apache.commons.cli.ParseException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"");
            org.junit.Assert.fail(""Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '.'"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(collection22);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(collection29);
        org.junit.Assert.assertNotNull(options33);
        org.junit.Assert.assertNotNull(collection34);
        org.junit.Assert.assertNotNull(option37);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNull(strArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue(""'"" + boolean50 + ""' != '"" + false + ""'"", boolean50 == false);
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(options56);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(collection61);"
220,145,5130,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0146"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option6.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken(""org.apache.commons.cli.MissingOptionException: hi!"", false);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup42 = options39.getOptionGroup(option41);
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        char char45 = option44.getValueSeparator();
        org.apache.commons.cli.Option option47 = org.apache.commons.cli.OptionBuilder.create('4');
        option47.setDescription("""");
        option44.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup51 = options39.getOptionGroup(option44);
        boolean boolean53 = options39.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        boolean boolean55 = options39.hasOption(""[ option: 4  :: null ::  ]"");
        java.lang.String[] strArray56 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray58 = posixParser0.flatten(options39, strArray56, false);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue(""'"" + char7 + ""' != '"" + '\000' + ""'"", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertTrue(""'"" + char45 + ""' != '"" + '\000' + ""'"", char45 == '\000');
        org.junit.Assert.assertNotNull(option47);
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertTrue(""'"" + boolean53 + ""' != '"" + false + ""'"", boolean53 == false);
        org.junit.Assert.assertTrue(""'"" + boolean55 + ""' != '"" + false + ""'"", boolean55 == false);"
221,486,5303,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0487"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("""");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("""");
        option26.setLongOpt(""hi!"");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues(""hi!"");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Option[] optionArray40 = commandLine39.getOptions();
        java.util.Iterator iterator41 = commandLine39.iterator();
        java.lang.String str43 = commandLine39.getOptionValue('a');
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        char char46 = option45.getValueSeparator();
        boolean boolean47 = option45.hasArg();
        boolean boolean48 = option45.hasOptionalArg();
        java.lang.Object obj49 = option45.getType();
        option45.setValueSeparator('#');
        java.lang.String str53 = option45.getValue(""[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]"");
        int int54 = option45.getId();
        org.apache.commons.cli.OptionBuilder optionBuilder55 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) option45);
        commandLine39.addOption(option45);
        java.util.Iterator iterator57 = commandLine39.iterator();
        java.lang.String[] strArray58 = commandLine39.getArgs();
        java.util.List list59 = commandLine39.getArgList();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue(""'"" + boolean31 + ""' != '"" + true + ""'"", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(optionArray40);
        org.junit.Assert.assertNotNull(iterator41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertTrue(""'"" + char46 + ""' != '"" + '\000' + ""'"", char46 == '\000');
        org.junit.Assert.assertTrue(""'"" + boolean47 + ""' != '"" + false + ""'"", boolean47 == false);
        org.junit.Assert.assertTrue(""'"" + boolean48 + ""' != '"" + false + ""'"", boolean48 == false);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertEquals(""'"" + str53 + ""' != '"" + ""[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]"" + ""'"", str53, ""[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]"");
        org.junit.Assert.assertTrue(""'"" + int54 + ""' != '"" + 52 + ""'"", int54 == 52);
        org.junit.Assert.assertNotNull(optionBuilder55);
        org.junit.Assert.assertNotNull(iterator57);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(list59);"
222,330,5633,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0331"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues(""hi!"");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("""");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        java.lang.String str64 = commandLine62.getOptionValue('\000');
        java.lang.Object obj66 = commandLine62.getOptionObject(""[ option:    :: null ]"");
        org.apache.commons.cli.Option[] optionArray67 = commandLine62.getOptions();
        java.lang.String[] strArray69 = commandLine62.getOptionValues(' ');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue(""'"" + boolean36 + ""' != '"" + false + ""'"", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNotNull(optionArray67);
        org.junit.Assert.assertNull(strArray69);"
223,30,5082,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0031"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken(""hi!"", true);
        org.apache.commons.cli.PosixParser posixParser21 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create('4');
        option24.setDescription("""");
        org.apache.commons.cli.Options options27 = options22.addOption(option24);
        org.apache.commons.cli.CommandLine commandLine28 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine28.getOptionValues(""hi!"");
        java.lang.String str33 = commandLine28.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str35 = commandLine28.getOptionValue(""arg"");
        java.lang.String[] strArray36 = commandLine28.getArgs();
        java.lang.String[] strArray38 = posixParser21.flatten(options27, strArray36, false);
        posixParser21.burstToken(""hi!"", true);
        org.apache.commons.cli.Options options42 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup45 = options42.getOptionGroup(option44);
        org.apache.commons.cli.Option option47 = org.apache.commons.cli.OptionBuilder.create('4');
        char char48 = option47.getValueSeparator();
        org.apache.commons.cli.Option option50 = org.apache.commons.cli.OptionBuilder.create('4');
        option50.setDescription("""");
        option47.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup54 = options42.getOptionGroup(option47);
        java.lang.String[] strArray55 = null;
        java.util.Properties properties56 = null;
        org.apache.commons.cli.CommandLine commandLine57 = posixParser21.parse(options42, strArray55, properties56);
        org.apache.commons.cli.Option option59 = options42.getOption(""[ option:    :: null ]"");
        java.lang.String[] strArray60 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray62 = posixParser0.flatten(options42, strArray60, true);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNotNull(options27);
        org.junit.Assert.assertNull(strArray30);
        org.junit.Assert.assertEquals(""'"" + str33 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str33, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertNull(optionGroup45);
        org.junit.Assert.assertNotNull(option47);
        org.junit.Assert.assertTrue(""'"" + char48 + ""' != '"" + '\000' + ""'"", char48 == '\000');
        org.junit.Assert.assertNotNull(option50);
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(commandLine57);
        org.junit.Assert.assertNull(option59);"
224,19,5141,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0020"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option6.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken(""4"", false);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup42 = options39.getOptionGroup(option41);
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        char char45 = option44.getValueSeparator();
        org.apache.commons.cli.Option option47 = org.apache.commons.cli.OptionBuilder.create('4');
        option47.setDescription("""");
        option44.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup51 = options39.getOptionGroup(option44);
        java.util.Collection collection52 = options39.getOptions();
        java.lang.String[] strArray53 = null;
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options39, strArray53);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options59 = options39.addOption(""[ option: 4  ::  ]"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"", false, ""[ option: 4  ::  ]"");
            org.junit.Assert.fail(""Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue(""'"" + char7 + ""' != '"" + '\000' + ""'"", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertTrue(""'"" + char45 + ""' != '"" + '\000' + ""'"", char45 == '\000');
        org.junit.Assert.assertNotNull(option47);
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(collection52);
        org.junit.Assert.assertNotNull(commandLine54);"
225,65,5045,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0066"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option6.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken(""4"", false);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup42 = options39.getOptionGroup(option41);
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        char char45 = option44.getValueSeparator();
        org.apache.commons.cli.Option option47 = org.apache.commons.cli.OptionBuilder.create('4');
        option47.setDescription("""");
        option44.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup51 = options39.getOptionGroup(option44);
        java.util.Collection collection52 = options39.getOptions();
        java.lang.String[] strArray53 = null;
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options39, strArray53);
        org.apache.commons.cli.OptionGroup optionGroup55 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options56 = options39.addOptionGroup(optionGroup55);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue(""'"" + char7 + ""' != '"" + '\000' + ""'"", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertTrue(""'"" + char45 + ""' != '"" + '\000' + ""'"", char45 == '\000');
        org.junit.Assert.assertNotNull(option47);
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(collection52);
        org.junit.Assert.assertNotNull(commandLine54);"
226,246,4663,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0247"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptions();
        boolean boolean9 = options1.hasOption(""arg"");
        java.lang.String[] strArray12 = new java.lang.String[] { ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"", ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"" };
        org.apache.commons.cli.CommandLine commandLine13 = posixParser0.parse(options1, strArray12);
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = org.apache.commons.cli.OptionBuilder.create('4');
        char char17 = option16.getValueSeparator();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        option16.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup23 = options14.getOptionGroup(option16);
        java.util.List list24 = options14.helpOptions();
        java.util.Collection collection25 = options14.getOptionGroups();
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option28 = org.apache.commons.cli.OptionBuilder.create('4');
        option28.setDescription("""");
        org.apache.commons.cli.Options options31 = options26.addOption(option28);
        java.util.Collection collection32 = options26.getOptionGroups();
        org.apache.commons.cli.Options options36 = options26.addOption("""", false, ""arg"");
        java.util.Collection collection37 = options26.getOptionGroups();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        option40.setValueSeparator(' ');
        org.apache.commons.cli.OptionGroup optionGroup46 = options26.getOptionGroup(option40);
        option40.setRequired(false);
        org.apache.commons.cli.CommandLine commandLine49 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray51 = commandLine49.getOptionValues(""hi!"");
        java.lang.String[] strArray52 = commandLine49.getArgs();
        boolean boolean53 = option40.equals((java.lang.Object) strArray52);
        org.apache.commons.cli.CommandLine commandLine55 = posixParser0.parse(options14, strArray52, true);
        java.lang.String[] strArray56 = commandLine55.getArgs();
        java.lang.String str58 = commandLine55.getOptionValue('#');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertTrue(""'"" + boolean9 + ""' != '"" + false + ""'"", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine13);
        org.junit.Assert.assertNotNull(option16);
        org.junit.Assert.assertTrue(""'"" + char17 + ""' != '"" + '\000' + ""'"", char17 == '\000');
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNull(optionGroup23);
        org.junit.Assert.assertNotNull(list24);
        org.junit.Assert.assertNotNull(collection25);
        org.junit.Assert.assertNotNull(option28);
        org.junit.Assert.assertNotNull(options31);
        org.junit.Assert.assertNotNull(collection32);
        org.junit.Assert.assertNotNull(options36);
        org.junit.Assert.assertNotNull(collection37);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(optionGroup46);
        org.junit.Assert.assertNull(strArray51);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue(""'"" + boolean53 + ""' != '"" + false + ""'"", boolean53 == false);
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNull(str58);"
227,461,5021,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0462"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken(""hi!"", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("""");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptionGroups();
        org.apache.commons.cli.Options options31 = options21.addOption("""", false, ""arg"");
        java.util.List list32 = options31.getRequiredOptions();
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create(""arg"");
        org.apache.commons.cli.Options options35 = options31.addOption(option34);
        boolean boolean37 = options31.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        java.util.Collection collection38 = options31.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine39 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine39.getOptionValues(""hi!"");
        java.lang.String str44 = commandLine39.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str46 = commandLine39.getOptionValue(""arg"");
        java.lang.String[] strArray47 = commandLine39.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine50 = posixParser0.parse(options31, strArray47, properties48, true);
        commandLine50.addArg(""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"");
        java.lang.String[] strArray54 = commandLine50.getOptionValues('#');
        java.lang.String[] strArray56 = commandLine50.getOptionValues(""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        commandLine50.addArg(""[ Options: [ short {} ] [ long {} ]"");
        boolean boolean60 = commandLine50.hasOption(""[ option:  +ARG :: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ]"");
        java.lang.String[] strArray61 = commandLine50.getArgs();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(options31);
        org.junit.Assert.assertNotNull(list32);
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertTrue(""'"" + boolean37 + ""' != '"" + false + ""'"", boolean37 == false);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertEquals(""'"" + str44 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str44, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNull(strArray54);
        org.junit.Assert.assertNull(strArray56);
        org.junit.Assert.assertTrue(""'"" + boolean60 + ""' != '"" + false + ""'"", boolean60 == false);
        org.junit.Assert.assertNotNull(strArray61);"
228,492,5167,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0493"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("""");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("""");
        option26.setLongOpt(""hi!"");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues(""hi!"");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("""");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        java.lang.String[] strArray47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options40, strArray47);
        org.apache.commons.cli.Option option50 = org.apache.commons.cli.OptionBuilder.create('4');
        option50.setDescription("""");
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("""");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        boolean boolean59 = option50.equals((java.lang.Object) option55);
        option50.setArgs((int) '4');
        option50.setArgs(100);
        java.util.ListIterator listIterator64 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option50, listIterator64);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue(""'"" + boolean31 + ""' != '"" + true + ""'"", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(option50);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertTrue(""'"" + boolean59 + ""' != '"" + true + ""'"", boolean59 == true);"
229,78,4525,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0079"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.CommandLine commandLine5 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray7 = commandLine5.getOptionValues(""hi!"");
        java.lang.String str10 = commandLine5.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str12 = commandLine5.getOptionValue(""arg"");
        java.lang.String[] strArray13 = commandLine5.getArgs();
        java.lang.String[] strArray15 = posixParser0.flatten(options1, strArray13, true);
        org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = org.apache.commons.cli.OptionBuilder.create('4');
        option18.setDescription("""");
        org.apache.commons.cli.Options options21 = options16.addOption(option18);
        java.util.Collection collection22 = options16.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.util.Properties properties32 = null;
        org.apache.commons.cli.CommandLine commandLine34 = posixParser0.parse(options16, strArray31, properties32, false);
        org.apache.commons.cli.Option option36 = org.apache.commons.cli.OptionBuilder.create('4');
        java.lang.String str38 = option36.getValue(""arg"");
        org.apache.commons.cli.MissingOptionException missingOptionException40 = new org.apache.commons.cli.MissingOptionException(""hi!"");
        boolean boolean41 = option36.equals((java.lang.Object) ""hi!"");
        option36.setValueSeparator('=');
        boolean boolean44 = option36.hasLongOpt();
        boolean boolean45 = option36.hasArgName();
        java.util.ListIterator listIterator46 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option36, listIterator46);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNull(strArray7);
        org.junit.Assert.assertEquals(""'"" + str10 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str10, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(option18);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNotNull(collection22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(option36);
        org.junit.Assert.assertEquals(""'"" + str38 + ""' != '"" + ""arg"" + ""'"", str38, ""arg"");
        org.junit.Assert.assertTrue(""'"" + boolean41 + ""' != '"" + false + ""'"", boolean41 == false);
        org.junit.Assert.assertTrue(""'"" + boolean44 + ""' != '"" + false + ""'"", boolean44 == false);
        org.junit.Assert.assertTrue(""'"" + boolean45 + ""' != '"" + true + ""'"", boolean45 == true);"
230,493,5060,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0494"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("""");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("""");
        option26.setLongOpt(""hi!"");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues(""hi!"");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Option[] optionArray40 = commandLine39.getOptions();
        java.util.Iterator iterator41 = commandLine39.iterator();
        java.lang.String str43 = commandLine39.getOptionValue('a');
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        char char46 = option45.getValueSeparator();
        boolean boolean47 = option45.hasArg();
        boolean boolean48 = option45.hasOptionalArg();
        java.lang.Object obj49 = option45.getType();
        option45.setValueSeparator('#');
        java.lang.String str53 = option45.getValue(""[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]"");
        int int54 = option45.getId();
        org.apache.commons.cli.OptionBuilder optionBuilder55 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) option45);
        commandLine39.addOption(option45);
        java.lang.String str58 = option45.getValue(32);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue(""'"" + boolean31 + ""' != '"" + true + ""'"", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(optionArray40);
        org.junit.Assert.assertNotNull(iterator41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertTrue(""'"" + char46 + ""' != '"" + '\000' + ""'"", char46 == '\000');
        org.junit.Assert.assertTrue(""'"" + boolean47 + ""' != '"" + false + ""'"", boolean47 == false);
        org.junit.Assert.assertTrue(""'"" + boolean48 + ""' != '"" + false + ""'"", boolean48 == false);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertEquals(""'"" + str53 + ""' != '"" + ""[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]"" + ""'"", str53, ""[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]"");
        org.junit.Assert.assertTrue(""'"" + int54 + ""' != '"" + 52 + ""'"", int54 == 52);
        org.junit.Assert.assertNotNull(optionBuilder55);
        org.junit.Assert.assertNull(str58);"
231,89,4696,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0090"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String[] strArray10 = commandLine7.getArgs();
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser0.parse(options1, strArray10, properties11);
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option15 = org.apache.commons.cli.OptionBuilder.create('4');
        option15.setDescription("""");
        org.apache.commons.cli.Options options18 = options13.addOption(option15);
        java.util.Collection collection19 = options13.getOptionGroups();
        org.apache.commons.cli.Options options23 = options13.addOption("""", false, ""arg"");
        org.apache.commons.cli.Option option27 = new org.apache.commons.cli.Option("""", true, """");
        boolean boolean28 = option27.hasOptionalArg();
        option27.setOptionalArg(false);
        org.apache.commons.cli.OptionGroup optionGroup31 = options23.getOptionGroup(option27);
        java.util.Collection collection32 = options23.getOptionGroups();
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option36 = org.apache.commons.cli.OptionBuilder.create('4');
        option36.setDescription("""");
        org.apache.commons.cli.Options options39 = options34.addOption(option36);
        java.util.Collection collection40 = options34.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine41 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray43 = commandLine41.getOptionValues(""hi!"");
        java.lang.String str46 = commandLine41.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str48 = commandLine41.getOptionValue(""arg"");
        java.lang.String[] strArray49 = commandLine41.getArgs();
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine51 = posixParser33.parse(options34, strArray49, properties50);
        java.lang.String[] strArray53 = posixParser0.flatten(options23, strArray49, true);
        org.apache.commons.cli.OptionGroup optionGroup54 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options55 = options23.addOptionGroup(optionGroup54);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertNotNull(option15);
        org.junit.Assert.assertNotNull(options18);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertTrue(""'"" + boolean28 + ""' != '"" + false + ""'"", boolean28 == false);
        org.junit.Assert.assertNull(optionGroup31);
        org.junit.Assert.assertNotNull(collection32);
        org.junit.Assert.assertNotNull(option36);
        org.junit.Assert.assertNotNull(options39);
        org.junit.Assert.assertNotNull(collection40);
        org.junit.Assert.assertNull(strArray43);
        org.junit.Assert.assertEquals(""'"" + str46 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str46, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(strArray53);"
232,276,4672,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0277"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String[] strArray10 = commandLine7.getArgs();
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser0.parse(options1, strArray10, properties11);
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option15 = org.apache.commons.cli.OptionBuilder.create('4');
        option15.setDescription("""");
        org.apache.commons.cli.Options options18 = options13.addOption(option15);
        java.util.Collection collection19 = options13.getOptionGroups();
        org.apache.commons.cli.Options options23 = options13.addOption("""", false, ""arg"");
        org.apache.commons.cli.Option option27 = new org.apache.commons.cli.Option("""", true, """");
        boolean boolean28 = option27.hasOptionalArg();
        option27.setOptionalArg(false);
        org.apache.commons.cli.OptionGroup optionGroup31 = options23.getOptionGroup(option27);
        java.util.Collection collection32 = options23.getOptionGroups();
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option36 = org.apache.commons.cli.OptionBuilder.create('4');
        option36.setDescription("""");
        org.apache.commons.cli.Options options39 = options34.addOption(option36);
        java.util.Collection collection40 = options34.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine41 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray43 = commandLine41.getOptionValues(""hi!"");
        java.lang.String str46 = commandLine41.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str48 = commandLine41.getOptionValue(""arg"");
        java.lang.String[] strArray49 = commandLine41.getArgs();
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine51 = posixParser33.parse(options34, strArray49, properties50);
        java.lang.String[] strArray53 = posixParser0.flatten(options23, strArray49, true);
        org.apache.commons.cli.Option option55 = options23.getOption(""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.util.Collection collection56 = options23.getOptionGroups();
        java.util.List list57 = options23.getRequiredOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertNotNull(option15);
        org.junit.Assert.assertNotNull(options18);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertTrue(""'"" + boolean28 + ""' != '"" + false + ""'"", boolean28 == false);
        org.junit.Assert.assertNull(optionGroup31);
        org.junit.Assert.assertNotNull(collection32);
        org.junit.Assert.assertNotNull(option36);
        org.junit.Assert.assertNotNull(options39);
        org.junit.Assert.assertNotNull(collection40);
        org.junit.Assert.assertNull(strArray43);
        org.junit.Assert.assertEquals(""'"" + str46 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str46, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNull(option55);
        org.junit.Assert.assertNotNull(collection56);
        org.junit.Assert.assertNotNull(list57);"
233,313,4141,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0314"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.util.Iterator iterator4 = commandLine0.iterator();
        java.lang.String str7 = commandLine0.getOptionValue(""[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]"", ""arg"");
        boolean boolean9 = commandLine0.hasOption(""[ option: 4  :: null ]"");
        java.lang.String[] strArray11 = commandLine0.getOptionValues("""");
        java.lang.Object obj13 = commandLine0.getOptionObject('a');
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = org.apache.commons.cli.OptionBuilder.create('4');
        option16.setDescription("""");
        org.apache.commons.cli.Options options19 = options14.addOption(option16);
        java.util.Collection collection20 = options14.getOptionGroups();
        org.apache.commons.cli.Options options24 = options14.addOption("""", false, ""arg"");
        java.util.List list25 = options24.getRequiredOptions();
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create(""arg"");
        org.apache.commons.cli.Options options28 = options24.addOption(option27);
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setArgs((int) (short) 100);
        option30.setArgName(""[ option: 4  :: null ]"");
        java.lang.String str35 = option30.getLongOpt();
        java.lang.String str37 = option30.getValue((int) (short) -1);
        org.apache.commons.cli.Options options38 = options28.addOption(option30);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup42 = options39.getOptionGroup(option41);
        boolean boolean43 = option41.hasLongOpt();
        boolean boolean44 = option41.isRequired();
        java.util.List list45 = option41.getValuesList();
        option41.setDescription(""[ option: 4  ::  ]"");
        org.apache.commons.cli.Options options48 = options38.addOption(option41);
        option41.setValueSeparator('4');
        commandLine0.addOption(option41);
        java.lang.String[] strArray52 = commandLine0.getArgs();
        org.apache.commons.cli.Option[] optionArray53 = commandLine0.getOptions();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertEquals(""'"" + str7 + ""' != '"" + ""arg"" + ""'"", str7, ""arg"");
        org.junit.Assert.assertTrue(""'"" + boolean9 + ""' != '"" + false + ""'"", boolean9 == false);
        org.junit.Assert.assertNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(option16);
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertNotNull(collection20);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertTrue(""'"" + boolean43 + ""' != '"" + false + ""'"", boolean43 == false);
        org.junit.Assert.assertTrue(""'"" + boolean44 + ""' != '"" + false + ""'"", boolean44 == false);
        org.junit.Assert.assertNotNull(list45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(optionArray53);"
234,452,4771,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0453"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option6.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken(""[ option: 4  :: null ::  ]"", true);
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        option40.setLongOpt(""hi!"");
        boolean boolean45 = option40.hasArgName();
        boolean boolean46 = option40.hasArg();
        java.lang.String str48 = option40.getValue(""4"");
        java.lang.String str50 = option40.getValue(0);
        java.lang.String str51 = option40.getDescription();
        option40.setArgName(""org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"");
        java.util.ListIterator listIterator54 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option40, listIterator54);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue(""'"" + char7 + ""' != '"" + '\000' + ""'"", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertTrue(""'"" + boolean45 + ""' != '"" + true + ""'"", boolean45 == true);
        org.junit.Assert.assertTrue(""'"" + boolean46 + ""' != '"" + false + ""'"", boolean46 == false);
        org.junit.Assert.assertEquals(""'"" + str48 + ""' != '"" + ""4"" + ""'"", str48, ""4"");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals(""'"" + str51 + ""' != '"" + """" + ""'"", str51, """");"
235,324,4084,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0325"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.util.Iterator iterator4 = commandLine0.iterator();
        java.lang.String str7 = commandLine0.getOptionValue(""[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]"", ""arg"");
        boolean boolean9 = commandLine0.hasOption(""[ option: 4  :: null ]"");
        java.lang.String[] strArray11 = commandLine0.getOptionValues("""");
        java.lang.Object obj13 = commandLine0.getOptionObject('a');
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = org.apache.commons.cli.OptionBuilder.create('4');
        option16.setDescription("""");
        org.apache.commons.cli.Options options19 = options14.addOption(option16);
        java.util.Collection collection20 = options14.getOptionGroups();
        org.apache.commons.cli.Options options24 = options14.addOption("""", false, ""arg"");
        java.util.List list25 = options24.getRequiredOptions();
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create(""arg"");
        org.apache.commons.cli.Options options28 = options24.addOption(option27);
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setArgs((int) (short) 100);
        option30.setArgName(""[ option: 4  :: null ]"");
        java.lang.String str35 = option30.getLongOpt();
        java.lang.String str37 = option30.getValue((int) (short) -1);
        org.apache.commons.cli.Options options38 = options28.addOption(option30);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup42 = options39.getOptionGroup(option41);
        boolean boolean43 = option41.hasLongOpt();
        boolean boolean44 = option41.isRequired();
        java.util.List list45 = option41.getValuesList();
        option41.setDescription(""[ option: 4  ::  ]"");
        org.apache.commons.cli.Options options48 = options38.addOption(option41);
        option41.setValueSeparator('4');
        commandLine0.addOption(option41);
        java.lang.Object obj53 = commandLine0.getOptionObject('#');
        commandLine0.addArg(""org.apache.commons.cli.MissingArgumentException: arg"");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertEquals(""'"" + str7 + ""' != '"" + ""arg"" + ""'"", str7, ""arg"");
        org.junit.Assert.assertTrue(""'"" + boolean9 + ""' != '"" + false + ""'"", boolean9 == false);
        org.junit.Assert.assertNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(option16);
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertNotNull(collection20);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertTrue(""'"" + boolean43 + ""' != '"" + false + ""'"", boolean43 == false);
        org.junit.Assert.assertTrue(""'"" + boolean44 + ""' != '"" + false + ""'"", boolean44 == false);
        org.junit.Assert.assertNotNull(list45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNull(obj53);"
236,346,4825,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0347"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken(""hi!"", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("""");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptionGroups();
        org.apache.commons.cli.Options options31 = options21.addOption("""", false, ""arg"");
        java.util.List list32 = options31.getRequiredOptions();
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create(""arg"");
        org.apache.commons.cli.Options options35 = options31.addOption(option34);
        boolean boolean37 = options31.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        java.util.Collection collection38 = options31.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine39 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine39.getOptionValues(""hi!"");
        java.lang.String str44 = commandLine39.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str46 = commandLine39.getOptionValue(""arg"");
        java.lang.String[] strArray47 = commandLine39.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine50 = posixParser0.parse(options31, strArray47, properties48, true);
        org.apache.commons.cli.Option[] optionArray51 = commandLine50.getOptions();
        java.lang.Object obj53 = commandLine50.getOptionObject(""arg"");
        java.lang.String str56 = commandLine50.getOptionValue(' ', ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!"");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(options31);
        org.junit.Assert.assertNotNull(list32);
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertTrue(""'"" + boolean37 + ""' != '"" + false + ""'"", boolean37 == false);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertEquals(""'"" + str44 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str44, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNotNull(optionArray51);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertEquals(""'"" + str56 + ""' != '"" + ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!"" + ""'"", str56, ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!"");"
237,168,4746,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0169"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option6.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        java.util.List list36 = commandLine35.getArgList();
        java.lang.String[] strArray37 = commandLine35.getArgs();
        java.lang.String[] strArray38 = commandLine35.getArgs();
        commandLine35.addArg("""");
        java.lang.Object obj42 = commandLine35.getOptionObject("" "");
        org.apache.commons.cli.Option[] optionArray43 = commandLine35.getOptions();
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        boolean boolean46 = option45.hasOptionalArg();
        java.lang.String str48 = option45.getValue(""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        int int49 = option45.getArgs();
        commandLine35.addOption(option45);
        java.util.Iterator iterator51 = commandLine35.iterator();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue(""'"" + char7 + ""' != '"" + '\000' + ""'"", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(list36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNotNull(optionArray43);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertTrue(""'"" + boolean46 + ""' != '"" + false + ""'"", boolean46 == false);
        org.junit.Assert.assertEquals(""'"" + str48 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str48, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertTrue(""'"" + int49 + ""' != '"" + (-1) + ""'"", int49 == (-1));
        org.junit.Assert.assertNotNull(iterator51);"
238,105,4816,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0106"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken(""hi!"", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("""");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptionGroups();
        org.apache.commons.cli.Options options31 = options21.addOption("""", false, ""arg"");
        java.util.List list32 = options31.getRequiredOptions();
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create(""arg"");
        org.apache.commons.cli.Options options35 = options31.addOption(option34);
        boolean boolean37 = options31.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        java.util.Collection collection38 = options31.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine39 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine39.getOptionValues(""hi!"");
        java.lang.String str44 = commandLine39.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str46 = commandLine39.getOptionValue(""arg"");
        java.lang.String[] strArray47 = commandLine39.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine50 = posixParser0.parse(options31, strArray47, properties48, true);
        commandLine50.addArg(""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"");
        java.lang.String[] strArray54 = commandLine50.getOptionValues('#');
        java.lang.String[] strArray56 = commandLine50.getOptionValues(""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str58 = commandLine50.getOptionValue(""org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(options31);
        org.junit.Assert.assertNotNull(list32);
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertTrue(""'"" + boolean37 + ""' != '"" + false + ""'"", boolean37 == false);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertEquals(""'"" + str44 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str44, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNull(strArray54);
        org.junit.Assert.assertNull(strArray56);
        org.junit.Assert.assertNull(str58);"
239,170,4752,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0171"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        java.util.Collection collection22 = options6.getOptions();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create('4');
        char char25 = option24.getValueSeparator();
        org.apache.commons.cli.Options options26 = options6.addOption(option24);
        org.apache.commons.cli.Option option28 = org.apache.commons.cli.OptionBuilder.create('4');
        option28.setArgs((int) (short) 100);
        option28.setArgName(""[ option: 4  :: null ]"");
        java.lang.String str33 = option28.getLongOpt();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option36 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup37 = options34.getOptionGroup(option36);
        org.apache.commons.cli.Option option39 = org.apache.commons.cli.OptionBuilder.create('4');
        org.apache.commons.cli.OptionGroup optionGroup40 = options34.getOptionGroup(option39);
        option28.setType((java.lang.Object) options34);
        org.apache.commons.cli.Options options42 = options6.addOption(option28);
        org.apache.commons.cli.Option option44 = options42.getOption(""[ option: 4  :: null ::  ]"");
        org.apache.commons.cli.Options options49 = options42.addOption("""", ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"", false, ""org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!"");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options53 = options49.addOption(""org.apache.commons.cli.UnrecognizedOptionException: [ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ]"", false, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
            org.junit.Assert.fail(""Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '.'"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(collection22);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertTrue(""'"" + char25 + ""' != '"" + '\000' + ""'"", char25 == '\000');
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(option28);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(option36);
        org.junit.Assert.assertNull(optionGroup37);
        org.junit.Assert.assertNotNull(option39);
        org.junit.Assert.assertNull(optionGroup40);
        org.junit.Assert.assertNotNull(options42);
        org.junit.Assert.assertNull(option44);
        org.junit.Assert.assertNotNull(options49);"
240,477,4025,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0478"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.util.Iterator iterator4 = commandLine0.iterator();
        java.lang.String str7 = commandLine0.getOptionValue(""[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]"", ""arg"");
        boolean boolean9 = commandLine0.hasOption(""[ option: 4  :: null ]"");
        java.lang.String[] strArray11 = commandLine0.getOptionValues("""");
        java.lang.Object obj13 = commandLine0.getOptionObject('a');
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = org.apache.commons.cli.OptionBuilder.create('4');
        option16.setDescription("""");
        org.apache.commons.cli.Options options19 = options14.addOption(option16);
        java.util.Collection collection20 = options14.getOptionGroups();
        org.apache.commons.cli.Options options24 = options14.addOption("""", false, ""arg"");
        java.util.List list25 = options24.getRequiredOptions();
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create(""arg"");
        org.apache.commons.cli.Options options28 = options24.addOption(option27);
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setArgs((int) (short) 100);
        option30.setArgName(""[ option: 4  :: null ]"");
        java.lang.String str35 = option30.getLongOpt();
        java.lang.String str37 = option30.getValue((int) (short) -1);
        org.apache.commons.cli.Options options38 = options28.addOption(option30);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup42 = options39.getOptionGroup(option41);
        boolean boolean43 = option41.hasLongOpt();
        boolean boolean44 = option41.isRequired();
        java.util.List list45 = option41.getValuesList();
        option41.setDescription(""[ option: 4  ::  ]"");
        org.apache.commons.cli.Options options48 = options38.addOption(option41);
        option41.setValueSeparator('4');
        commandLine0.addOption(option41);
        org.apache.commons.cli.Option[] optionArray52 = commandLine0.getOptions();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertEquals(""'"" + str7 + ""' != '"" + ""arg"" + ""'"", str7, ""arg"");
        org.junit.Assert.assertTrue(""'"" + boolean9 + ""' != '"" + false + ""'"", boolean9 == false);
        org.junit.Assert.assertNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(option16);
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertNotNull(collection20);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertTrue(""'"" + boolean43 + ""' != '"" + false + ""'"", boolean43 == false);
        org.junit.Assert.assertTrue(""'"" + boolean44 + ""' != '"" + false + ""'"", boolean44 == false);
        org.junit.Assert.assertNotNull(list45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(optionArray52);"
241,101,5228,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0102"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues(""hi!"");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("""");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        java.util.List list63 = commandLine62.getArgList();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue(""'"" + boolean36 + ""' != '"" + false + ""'"", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(list63);"
242,15,5124,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0016"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues(""hi!"");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        java.util.Collection collection53 = options22.getOptionGroups();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options57 = options22.addOption(""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"", false, ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"");
            org.junit.Assert.fail(""Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue(""'"" + boolean36 + ""' != '"" + false + ""'"", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(collection53);"
243,210,5189,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0211"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues(""hi!"");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("""");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        commandLine62.addArg(""[ Options: [ short {} ] [ long {} ]"");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue(""'"" + boolean36 + ""' != '"" + false + ""'"", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);"
244,468,3936,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0469"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String str5 = commandLine0.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str7 = commandLine0.getOptionValue(""arg"");
        java.lang.String str9 = commandLine0.getOptionValue('a');
        java.lang.String str12 = commandLine0.getOptionValue(""[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]"", ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"");
        java.lang.Object obj14 = commandLine0.getOptionObject(' ');
        org.apache.commons.cli.Option[] optionArray15 = commandLine0.getOptions();
        java.lang.Object obj17 = commandLine0.getOptionObject('\000');
        java.lang.String str19 = commandLine0.getOptionValue(' ');
        org.apache.commons.cli.Option[] optionArray20 = commandLine0.getOptions();
        java.lang.String str23 = commandLine0.getOptionValue('a', ""[ Options: [ short { =[ option:    :: hi! ], 4=[ option: 4  ::  ], arg=[ option: arg org.apache.commons.cli.UnrecognizedOptionException: hi!  :: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ]} ] [ long {org.apache.commons.cli.UnrecognizedOptionException: hi!=[ option: arg org.apache.commons.cli.UnrecognizedOptionException: hi!  :: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ]} ]"");
        java.lang.String[] strArray25 = commandLine0.getOptionValues('a');
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertEquals(""'"" + str5 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str5, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"" + ""'"", str12, ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"");
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(optionArray15);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(optionArray20);
        org.junit.Assert.assertEquals(""'"" + str23 + ""' != '"" + ""[ Options: [ short { =[ option:    :: hi! ], 4=[ option: 4  ::  ], arg=[ option: arg org.apache.commons.cli.UnrecognizedOptionException: hi!  :: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ]} ] [ long {org.apache.commons.cli.UnrecognizedOptionException: hi!=[ option: arg org.apache.commons.cli.UnrecognizedOptionException: hi!  :: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ]} ]"" + ""'"", str23, ""[ Options: [ short { =[ option:    :: hi! ], 4=[ option: 4  ::  ], arg=[ option: arg org.apache.commons.cli.UnrecognizedOptionException: hi!  :: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ]} ] [ long {org.apache.commons.cli.UnrecognizedOptionException: hi!=[ option: arg org.apache.commons.cli.UnrecognizedOptionException: hi!  :: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ]} ]"");
        org.junit.Assert.assertNull(strArray25);"
245,31,4736,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0032"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken(""hi!"", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("""");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptionGroups();
        org.apache.commons.cli.Options options31 = options21.addOption("""", false, ""arg"");
        java.util.List list32 = options31.getRequiredOptions();
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create(""arg"");
        org.apache.commons.cli.Options options35 = options31.addOption(option34);
        boolean boolean37 = options31.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        java.util.Collection collection38 = options31.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine39 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine39.getOptionValues(""hi!"");
        java.lang.String str44 = commandLine39.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str46 = commandLine39.getOptionValue(""arg"");
        java.lang.String[] strArray47 = commandLine39.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine50 = posixParser0.parse(options31, strArray47, properties48, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options54 = options31.addOption(""[ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]"", false, ""[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]"");
            org.junit.Assert.fail(""Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(options31);
        org.junit.Assert.assertNotNull(list32);
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertTrue(""'"" + boolean37 + ""' != '"" + false + ""'"", boolean37 == false);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertEquals(""'"" + str44 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str44, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine50);"
246,227,4720,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0228"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        java.util.Collection collection22 = options6.getOptionGroups();
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create('4');
        option25.setDescription("""");
        org.apache.commons.cli.Options options28 = options23.addOption(option25);
        java.util.Collection collection29 = options23.getOptionGroups();
        org.apache.commons.cli.Options options33 = options23.addOption("""", false, ""arg"");
        java.util.Collection collection34 = options23.getOptionGroups();
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option37 = org.apache.commons.cli.OptionBuilder.create('4');
        option37.setDescription("""");
        org.apache.commons.cli.Options options40 = options35.addOption(option37);
        option37.setValueSeparator(' ');
        org.apache.commons.cli.OptionGroup optionGroup43 = options23.getOptionGroup(option37);
        option37.setRequired(false);
        org.apache.commons.cli.CommandLine commandLine46 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray48 = commandLine46.getOptionValues(""hi!"");
        java.lang.String[] strArray49 = commandLine46.getArgs();
        boolean boolean50 = option37.equals((java.lang.Object) strArray49);
        org.apache.commons.cli.OptionGroup optionGroup51 = options6.getOptionGroup(option37);
        org.apache.commons.cli.Options options56 = options6.addOption(""arg"", ""org.apache.commons.cli.UnrecognizedOptionException: hi!"", false, ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.Options options60 = options6.addOption("" "", false, ""hi!"");
        java.util.Collection collection61 = options6.getOptionGroups();
        java.util.List list62 = options6.getRequiredOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(collection22);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(collection29);
        org.junit.Assert.assertNotNull(options33);
        org.junit.Assert.assertNotNull(collection34);
        org.junit.Assert.assertNotNull(option37);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNull(strArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue(""'"" + boolean50 + ""' != '"" + false + ""'"", boolean50 == false);
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(options56);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(collection61);
        org.junit.Assert.assertNotNull(list62);"
247,497,4570,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0498"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken(""hi!"", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup24 = options21.getOptionGroup(option23);
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        char char27 = option26.getValueSeparator();
        org.apache.commons.cli.Option option29 = org.apache.commons.cli.OptionBuilder.create('4');
        option29.setDescription("""");
        option26.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup33 = options21.getOptionGroup(option26);
        java.lang.String[] strArray34 = null;
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser0.parse(options21, strArray34, properties35);
        posixParser0.burstToken(""org.apache.commons.cli.ParseException: [ option:    :: null ]"", false);
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create('4');
        boolean boolean42 = option41.hasOptionalArg();
        java.lang.String str44 = option41.getValue(""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str45 = option41.getKey();
        java.lang.String str46 = option41.getKey();
        java.lang.String str47 = option41.getArgName();
        java.util.ListIterator listIterator48 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option41, listIterator48);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNull(optionGroup24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue(""'"" + char27 + ""' != '"" + '\000' + ""'"", char27 == '\000');
        org.junit.Assert.assertNotNull(option29);
        org.junit.Assert.assertNull(optionGroup33);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertTrue(""'"" + boolean42 + ""' != '"" + false + ""'"", boolean42 == false);
        org.junit.Assert.assertEquals(""'"" + str44 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str44, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertEquals(""'"" + str45 + ""' != '"" + ""4"" + ""'"", str45, ""4"");
        org.junit.Assert.assertEquals(""'"" + str46 + ""' != '"" + ""4"" + ""'"", str46, ""4"");
        org.junit.Assert.assertEquals(""'"" + str47 + ""' != '"" + ""arg"" + ""'"", str47, ""arg"");"
248,61,4572,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0062"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option6.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        java.util.List list36 = commandLine35.getArgList();
        java.lang.String[] strArray37 = commandLine35.getArgs();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        char char41 = option40.getValueSeparator();
        org.apache.commons.cli.Option option43 = org.apache.commons.cli.OptionBuilder.create('4');
        option43.setDescription("""");
        option40.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup47 = options38.getOptionGroup(option40);
        boolean boolean48 = option40.hasValueSeparator();
        commandLine35.addOption(option40);
        option40.setArgName(""org.apache.commons.cli.MissingOptionException: hi!"");
        boolean boolean52 = option40.hasArgs();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue(""'"" + char7 + ""' != '"" + '\000' + ""'"", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(list36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertTrue(""'"" + char41 + ""' != '"" + '\000' + ""'"", char41 == '\000');
        org.junit.Assert.assertNotNull(option43);
        org.junit.Assert.assertNull(optionGroup47);
        org.junit.Assert.assertTrue(""'"" + boolean48 + ""' != '"" + false + ""'"", boolean48 == false);
        org.junit.Assert.assertTrue(""'"" + boolean52 + ""' != '"" + false + ""'"", boolean52 == false);"
249,480,4664,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0481"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken(""hi!"", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("""");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptionGroups();
        org.apache.commons.cli.Options options31 = options21.addOption("""", false, ""arg"");
        java.util.List list32 = options31.getRequiredOptions();
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create(""arg"");
        org.apache.commons.cli.Options options35 = options31.addOption(option34);
        boolean boolean37 = options31.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        java.util.Collection collection38 = options31.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine39 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine39.getOptionValues(""hi!"");
        java.lang.String str44 = commandLine39.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str46 = commandLine39.getOptionValue(""arg"");
        java.lang.String[] strArray47 = commandLine39.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine50 = posixParser0.parse(options31, strArray47, properties48, true);
        commandLine50.addArg(""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"");
        java.lang.String[] strArray54 = commandLine50.getOptionValues('#');
        java.lang.String[] strArray56 = commandLine50.getOptionValues(""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.util.List list57 = commandLine50.getArgList();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(options31);
        org.junit.Assert.assertNotNull(list32);
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertTrue(""'"" + boolean37 + ""' != '"" + false + ""'"", boolean37 == false);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertEquals(""'"" + str44 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str44, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNull(strArray54);
        org.junit.Assert.assertNull(strArray56);
        org.junit.Assert.assertNotNull(list57);"
250,489,3685,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0490"");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option2 = org.apache.commons.cli.OptionBuilder.create('4');
        option2.setDescription("""");
        org.apache.commons.cli.Options options5 = options0.addOption(option2);
        java.util.List list6 = options0.helpOptions();
        org.apache.commons.cli.Options options11 = options0.addOption(""arg"", ""org.apache.commons.cli.UnrecognizedOptionException: hi!"", false, """");
        org.apache.commons.cli.CommandLine commandLine12 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray14 = commandLine12.getOptionValues(""hi!"");
        java.lang.String[] strArray15 = commandLine12.getArgs();
        java.util.Iterator iterator16 = commandLine12.iterator();
        java.lang.String str18 = commandLine12.getOptionValue(""[ option:    :: null ]"");
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        java.lang.String str22 = option20.getValue(""arg"");
        org.apache.commons.cli.MissingOptionException missingOptionException24 = new org.apache.commons.cli.MissingOptionException(""hi!"");
        boolean boolean25 = option20.equals((java.lang.Object) ""hi!"");
        option20.setValueSeparator('=');
        boolean boolean28 = option20.hasValueSeparator();
        java.lang.String str29 = option20.getArgName();
        commandLine12.addOption(option20);
        org.apache.commons.cli.OptionGroup optionGroup31 = options11.getOptionGroup(option20);
        int int32 = option20.getArgs();
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues(""hi!"");
        java.util.Iterator iterator36 = commandLine33.iterator();
        java.lang.String[] strArray38 = commandLine33.getOptionValues('a');
        org.apache.commons.cli.Option[] optionArray39 = commandLine33.getOptions();
        java.lang.String str42 = commandLine33.getOptionValue('a', ""[ option: 4 hi!  ::  ]"");
        option20.setType((java.lang.Object) commandLine33);
        boolean boolean44 = option20.hasArg();
        org.junit.Assert.assertNotNull(option2);
        org.junit.Assert.assertNotNull(options5);
        org.junit.Assert.assertNotNull(list6);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertEquals(""'"" + str22 + ""' != '"" + ""arg"" + ""'"", str22, ""arg"");
        org.junit.Assert.assertTrue(""'"" + boolean25 + ""' != '"" + false + ""'"", boolean25 == false);
        org.junit.Assert.assertTrue(""'"" + boolean28 + ""' != '"" + true + ""'"", boolean28 == true);
        org.junit.Assert.assertEquals(""'"" + str29 + ""' != '"" + ""arg"" + ""'"", str29, ""arg"");
        org.junit.Assert.assertNull(optionGroup31);
        org.junit.Assert.assertTrue(""'"" + int32 + ""' != '"" + (-1) + ""'"", int32 == (-1));
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(iterator36);
        org.junit.Assert.assertNull(strArray38);
        org.junit.Assert.assertNotNull(optionArray39);
        org.junit.Assert.assertEquals(""'"" + str42 + ""' != '"" + ""[ option: 4 hi!  ::  ]"" + ""'"", str42, ""[ option: 4 hi!  ::  ]"");
        org.junit.Assert.assertTrue(""'"" + boolean44 + ""' != '"" + false + ""'"", boolean44 == false);"
251,83,4660,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0084"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken(""hi!"", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("""");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptionGroups();
        org.apache.commons.cli.Options options31 = options21.addOption("""", false, ""arg"");
        java.util.List list32 = options31.getRequiredOptions();
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create(""arg"");
        org.apache.commons.cli.Options options35 = options31.addOption(option34);
        boolean boolean37 = options31.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        java.util.Collection collection38 = options31.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine39 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine39.getOptionValues(""hi!"");
        java.lang.String str44 = commandLine39.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str46 = commandLine39.getOptionValue(""arg"");
        java.lang.String[] strArray47 = commandLine39.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine50 = posixParser0.parse(options31, strArray47, properties48, true);
        java.util.List list51 = options31.getRequiredOptions();
        org.apache.commons.cli.Option option52 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.OptionGroup optionGroup53 = options31.getOptionGroup(option52);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(options31);
        org.junit.Assert.assertNotNull(list32);
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertTrue(""'"" + boolean37 + ""' != '"" + false + ""'"", boolean37 == false);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertEquals(""'"" + str44 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str44, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNotNull(list51);"
252,46,4542,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0047"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option6.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        java.util.List list36 = commandLine35.getArgList();
        java.lang.String[] strArray37 = commandLine35.getArgs();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        char char41 = option40.getValueSeparator();
        org.apache.commons.cli.Option option43 = org.apache.commons.cli.OptionBuilder.create('4');
        option43.setDescription("""");
        option40.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup47 = options38.getOptionGroup(option40);
        boolean boolean48 = option40.hasValueSeparator();
        commandLine35.addOption(option40);
        java.lang.String str50 = option40.getLongOpt();
        java.lang.String str51 = option40.getLongOpt();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue(""'"" + char7 + ""' != '"" + '\000' + ""'"", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(list36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertTrue(""'"" + char41 + ""' != '"" + '\000' + ""'"", char41 == '\000');
        org.junit.Assert.assertNotNull(option43);
        org.junit.Assert.assertNull(optionGroup47);
        org.junit.Assert.assertTrue(""'"" + boolean48 + ""' != '"" + false + ""'"", boolean48 == false);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(str51);"
253,259,4601,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0260"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken(""hi!"", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("""");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptionGroups();
        org.apache.commons.cli.Options options31 = options21.addOption("""", false, ""arg"");
        java.util.List list32 = options31.getRequiredOptions();
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create(""arg"");
        org.apache.commons.cli.Options options35 = options31.addOption(option34);
        boolean boolean37 = options31.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        java.util.Collection collection38 = options31.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine39 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine39.getOptionValues(""hi!"");
        java.lang.String str44 = commandLine39.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str46 = commandLine39.getOptionValue(""arg"");
        java.lang.String[] strArray47 = commandLine39.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine50 = posixParser0.parse(options31, strArray47, properties48, true);
        commandLine50.addArg(""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"");
        java.lang.String[] strArray54 = commandLine50.getOptionValues('#');
        org.apache.commons.cli.Option[] optionArray55 = commandLine50.getOptions();
        java.util.List list56 = commandLine50.getArgList();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(options31);
        org.junit.Assert.assertNotNull(list32);
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertTrue(""'"" + boolean37 + ""' != '"" + false + ""'"", boolean37 == false);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertEquals(""'"" + str44 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str44, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNull(strArray54);
        org.junit.Assert.assertNotNull(optionArray55);
        org.junit.Assert.assertNotNull(list56);"
254,23,4976,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0024"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues(""hi!"");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        java.util.Collection collection53 = options22.getOptionGroups();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options58 = options22.addOption(""[ option:    :: null ]"", ""hi!"", false, ""hi!"");
            org.junit.Assert.fail(""Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue(""'"" + boolean36 + ""' != '"" + false + ""'"", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(collection53);"
255,450,4743,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0451"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("""");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("""");
        option26.setLongOpt(""hi!"");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues(""hi!"");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("""");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        java.lang.String[] strArray47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options40, strArray47);
        java.lang.String str51 = commandLine48.getOptionValue(""[ option:    :: null ]"", ""[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]"");
        java.lang.String[] strArray53 = commandLine48.getOptionValues('a');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue(""'"" + boolean31 + ""' != '"" + true + ""'"", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertEquals(""'"" + str51 + ""' != '"" + ""[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]"" + ""'"", str51, ""[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]"");
        org.junit.Assert.assertNull(strArray53);"
256,68,4473,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0069"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option6.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken(""[ option: 4  :: null ::  ]"", true);
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        option40.setLongOpt(""hi!"");
        option40.setArgName(""arg"");
        org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option49 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup50 = options47.getOptionGroup(option49);
        option40.setType((java.lang.Object) options47);
        java.util.List list52 = options47.getRequiredOptions();
        java.lang.String[] strArray53 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray55 = posixParser0.flatten(options47, strArray53, false);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue(""'"" + char7 + ""' != '"" + '\000' + ""'"", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(option49);
        org.junit.Assert.assertNull(optionGroup50);
        org.junit.Assert.assertNotNull(list52);"
257,394,4465,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0395"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option6.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken(""org.apache.commons.cli.MissingOptionException: hi!"", false);
        posixParser0.burstToken(""[ option: 4 hi!  ::  ]"", false);
        org.apache.commons.cli.Options options42 = null;
        org.apache.commons.cli.CommandLine commandLine43 = new org.apache.commons.cli.CommandLine();
        java.util.Iterator iterator44 = commandLine43.iterator();
        boolean boolean46 = commandLine43.hasOption(""[ option: 4  :: [ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ] ::  ]"");
        java.lang.String str48 = commandLine43.getOptionValue('=');
        java.lang.String[] strArray49 = commandLine43.getArgs();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.CommandLine commandLine51 = posixParser0.parse(options42, strArray49, true);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue(""'"" + char7 + ""' != '"" + '\000' + ""'"", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(iterator44);
        org.junit.Assert.assertTrue(""'"" + boolean46 + ""' != '"" + false + ""'"", boolean46 == false);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(strArray49);"
258,150,4889,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0151"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues(""hi!"");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        java.util.Collection collection53 = options22.getOptionGroups();
        java.util.Collection collection54 = options22.getOptionGroups();
        boolean boolean56 = options22.hasOption(""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue(""'"" + boolean36 + ""' != '"" + false + ""'"", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(collection53);
        org.junit.Assert.assertNotNull(collection54);
        org.junit.Assert.assertTrue(""'"" + boolean56 + ""' != '"" + false + ""'"", boolean56 == false);"
259,487,3999,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0488"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.CommandLine commandLine5 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray7 = commandLine5.getOptionValues(""hi!"");
        java.lang.String str10 = commandLine5.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str12 = commandLine5.getOptionValue(""arg"");
        java.lang.String[] strArray13 = commandLine5.getArgs();
        java.lang.String[] strArray15 = posixParser0.flatten(options1, strArray13, true);
        org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = org.apache.commons.cli.OptionBuilder.create('4');
        option18.setDescription("""");
        org.apache.commons.cli.Options options21 = options16.addOption(option18);
        java.util.Collection collection22 = options16.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.util.Properties properties32 = null;
        org.apache.commons.cli.CommandLine commandLine34 = posixParser0.parse(options16, strArray31, properties32, false);
        org.apache.commons.cli.Option option36 = options16.getOption(""org.apache.commons.cli.UnrecognizedOptionException: [ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ]"");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options41 = options16.addOption(""[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]"", ""[ option: arg [ option: 4  :: null ] +ARG :: 4 ]"", true, ""[ option: 4  :: org.apache.commons.cli.ParseException: arg ]"");
            org.junit.Assert.fail(""Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNull(strArray7);
        org.junit.Assert.assertEquals(""'"" + str10 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str10, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(option18);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNotNull(collection22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNull(option36);"
260,354,4202,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0355"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String[] strArray10 = commandLine7.getArgs();
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser0.parse(options1, strArray10, properties11);
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option15 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup16 = options13.getOptionGroup(option15);
        org.apache.commons.cli.Option option18 = org.apache.commons.cli.OptionBuilder.create('4');
        char char19 = option18.getValueSeparator();
        org.apache.commons.cli.Option option21 = org.apache.commons.cli.OptionBuilder.create('4');
        option21.setDescription("""");
        option18.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup25 = options13.getOptionGroup(option18);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        boolean boolean28 = option27.isRequired();
        org.apache.commons.cli.Options options29 = options13.addOption(option27);
        org.apache.commons.cli.Option option31 = org.apache.commons.cli.OptionBuilder.create('4');
        char char32 = option31.getValueSeparator();
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create('4');
        option34.setDescription("""");
        option31.setType((java.lang.Object) """");
        boolean boolean38 = option31.isRequired();
        java.lang.String str39 = option31.getKey();
        boolean boolean40 = option31.isRequired();
        java.lang.Object obj41 = option31.getType();
        org.apache.commons.cli.Options options42 = options29.addOption(option31);
        java.lang.String[] strArray43 = null;
        org.apache.commons.cli.CommandLine commandLine44 = posixParser0.parse(options42, strArray43);
        java.lang.String[] strArray46 = commandLine44.getOptionValues("""");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertNotNull(option15);
        org.junit.Assert.assertNull(optionGroup16);
        org.junit.Assert.assertNotNull(option18);
        org.junit.Assert.assertTrue(""'"" + char19 + ""' != '"" + '\000' + ""'"", char19 == '\000');
        org.junit.Assert.assertNotNull(option21);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + boolean28 + ""' != '"" + false + ""'"", boolean28 == false);
        org.junit.Assert.assertNotNull(options29);
        org.junit.Assert.assertNotNull(option31);
        org.junit.Assert.assertTrue(""'"" + char32 + ""' != '"" + '\000' + ""'"", char32 == '\000');
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertTrue(""'"" + boolean38 + ""' != '"" + false + ""'"", boolean38 == false);
        org.junit.Assert.assertEquals(""'"" + str39 + ""' != '"" + ""4"" + ""'"", str39, ""4"");
        org.junit.Assert.assertTrue(""'"" + boolean40 + ""' != '"" + false + ""'"", boolean40 == false);
        org.junit.Assert.assertEquals(""'"" + obj41 + ""' != '"" + """" + ""'"", obj41, """");
        org.junit.Assert.assertNotNull(options42);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNull(strArray46);"
261,21,4396,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0022"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option6.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken(""org.apache.commons.cli.MissingOptionException: hi!"", false);
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        boolean boolean41 = option40.hasOptionalArg();
        java.lang.String str43 = option40.getValue(""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        option40.setDescription(""[ option: 4  ::  ]"");
        java.util.ListIterator listIterator46 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option40, listIterator46);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue(""'"" + char7 + ""' != '"" + '\000' + ""'"", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertTrue(""'"" + boolean41 + ""' != '"" + false + ""'"", boolean41 == false);
        org.junit.Assert.assertEquals(""'"" + str43 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str43, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");"
262,34,4381,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0035"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option6.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        java.util.List list36 = commandLine35.getArgList();
        java.lang.String[] strArray37 = commandLine35.getArgs();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        char char41 = option40.getValueSeparator();
        org.apache.commons.cli.Option option43 = org.apache.commons.cli.OptionBuilder.create('4');
        option43.setDescription("""");
        option40.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup47 = options38.getOptionGroup(option40);
        boolean boolean48 = option40.hasValueSeparator();
        commandLine35.addOption(option40);
        option40.setOptionalArg(true);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue(""'"" + char7 + ""' != '"" + '\000' + ""'"", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(list36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertTrue(""'"" + char41 + ""' != '"" + '\000' + ""'"", char41 == '\000');
        org.junit.Assert.assertNotNull(option43);
        org.junit.Assert.assertNull(optionGroup47);
        org.junit.Assert.assertTrue(""'"" + boolean48 + ""' != '"" + false + ""'"", boolean48 == false);"
263,359,4452,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0360"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("""");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("""");
        option26.setLongOpt(""hi!"");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues(""hi!"");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        java.lang.String[] strArray41 = commandLine39.getOptionValues("""");
        java.lang.String[] strArray43 = commandLine39.getOptionValues('a');
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('a');
        boolean boolean46 = option45.hasArgName();
        boolean boolean47 = option45.hasArgs();
        java.lang.String str48 = option45.getLongOpt();
        option45.setLongOpt(""hi!"");
        commandLine39.addOption(option45);
        java.lang.String str54 = commandLine39.getOptionValue(' ', ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue(""'"" + boolean31 + ""' != '"" + true + ""'"", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertNull(strArray43);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertTrue(""'"" + boolean46 + ""' != '"" + true + ""'"", boolean46 == true);
        org.junit.Assert.assertTrue(""'"" + boolean47 + ""' != '"" + false + ""'"", boolean47 == false);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals(""'"" + str54 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"" + ""'"", str54, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"");"
264,406,4262,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0407"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken(""hi!"", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup24 = options21.getOptionGroup(option23);
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        char char27 = option26.getValueSeparator();
        org.apache.commons.cli.Option option29 = org.apache.commons.cli.OptionBuilder.create('4');
        option29.setDescription("""");
        option26.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup33 = options21.getOptionGroup(option26);
        java.lang.String[] strArray34 = null;
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser0.parse(options21, strArray34, properties35);
        org.apache.commons.cli.Option option38 = options21.getOption(""[ option:    :: null ]"");
        java.lang.String str39 = options21.toString();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create('4');
        option41.setArgs((int) (short) 100);
        option41.setArgName(""[ option: 4  :: null ]"");
        java.lang.String str46 = option41.getLongOpt();
        boolean boolean47 = option41.hasLongOpt();
        java.lang.Object obj48 = option41.getType();
        int int49 = option41.getId();
        org.apache.commons.cli.OptionGroup optionGroup50 = options21.getOptionGroup(option41);
        java.lang.String str51 = option41.getLongOpt();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNull(optionGroup24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue(""'"" + char27 + ""' != '"" + '\000' + ""'"", char27 == '\000');
        org.junit.Assert.assertNotNull(option29);
        org.junit.Assert.assertNull(optionGroup33);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNull(option38);
        org.junit.Assert.assertEquals(""'"" + str39 + ""' != '"" + ""[ Options: [ short {} ] [ long {} ]"" + ""'"", str39, ""[ Options: [ short {} ] [ long {} ]"");
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue(""'"" + boolean47 + ""' != '"" + false + ""'"", boolean47 == false);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertTrue(""'"" + int49 + ""' != '"" + 52 + ""'"", int49 == 52);
        org.junit.Assert.assertNull(optionGroup50);
        org.junit.Assert.assertNull(str51);"
265,120,4339,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0121"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        java.util.Collection collection22 = options6.getOptionGroups();
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create('4');
        option25.setDescription("""");
        org.apache.commons.cli.Options options28 = options23.addOption(option25);
        java.util.Collection collection29 = options23.getOptionGroups();
        org.apache.commons.cli.Options options33 = options23.addOption("""", false, ""arg"");
        java.util.Collection collection34 = options23.getOptionGroups();
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option37 = org.apache.commons.cli.OptionBuilder.create('4');
        option37.setDescription("""");
        org.apache.commons.cli.Options options40 = options35.addOption(option37);
        option37.setValueSeparator(' ');
        org.apache.commons.cli.OptionGroup optionGroup43 = options23.getOptionGroup(option37);
        option37.setRequired(false);
        org.apache.commons.cli.CommandLine commandLine46 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray48 = commandLine46.getOptionValues(""hi!"");
        java.lang.String[] strArray49 = commandLine46.getArgs();
        boolean boolean50 = option37.equals((java.lang.Object) strArray49);
        org.apache.commons.cli.OptionGroup optionGroup51 = options6.getOptionGroup(option37);
        boolean boolean52 = option37.hasLongOpt();
        boolean boolean53 = option37.hasArgName();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(collection22);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(collection29);
        org.junit.Assert.assertNotNull(options33);
        org.junit.Assert.assertNotNull(collection34);
        org.junit.Assert.assertNotNull(option37);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNull(strArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue(""'"" + boolean50 + ""' != '"" + false + ""'"", boolean50 == false);
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertTrue(""'"" + boolean52 + ""' != '"" + false + ""'"", boolean52 == false);
        org.junit.Assert.assertTrue(""'"" + boolean53 + ""' != '"" + true + ""'"", boolean53 == true);"
266,209,4215,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0210"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option6.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        java.util.List list36 = commandLine35.getArgList();
        java.lang.String[] strArray37 = commandLine35.getArgs();
        java.lang.String[] strArray38 = commandLine35.getArgs();
        commandLine35.addArg("""");
        java.lang.Object obj42 = commandLine35.getOptionObject("" "");
        boolean boolean44 = commandLine35.hasOption('=');
        java.lang.Object obj46 = commandLine35.getOptionObject(' ');
        org.apache.commons.cli.Option[] optionArray47 = commandLine35.getOptions();
        java.lang.Object obj49 = commandLine35.getOptionObject(""org.apache.commons.cli.UnrecognizedOptionException: hi!"");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue(""'"" + char7 + ""' != '"" + '\000' + ""'"", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(list36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertTrue(""'"" + boolean44 + ""' != '"" + false + ""'"", boolean44 == false);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNotNull(optionArray47);
        org.junit.Assert.assertNull(obj49);"
267,234,3387,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0235"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue(""hi!"");
        boolean boolean7 = commandLine0.hasOption("""");
        java.lang.String str10 = commandLine0.getOptionValue(""[ option: 4  :: null ]"", ""org.apache.commons.cli.MissingOptionException: hi!"");
        java.lang.String[] strArray12 = commandLine0.getOptionValues('4');
        java.lang.String[] strArray14 = commandLine0.getOptionValues('a');
        org.apache.commons.cli.Option option16 = org.apache.commons.cli.OptionBuilder.create(' ');
        boolean boolean17 = option16.hasArgName();
        boolean boolean18 = option16.hasArgName();
        commandLine0.addOption(option16);
        boolean boolean20 = option16.hasArgName();
        org.apache.commons.cli.Option option22 = org.apache.commons.cli.OptionBuilder.create('4');
        option22.setDescription("""");
        boolean boolean25 = option22.hasValueSeparator();
        java.util.List list26 = option22.getValuesList();
        int int27 = option22.getArgs();
        org.apache.commons.cli.CommandLine commandLine28 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine28.getOptionValues(""hi!"");
        option22.setType((java.lang.Object) commandLine28);
        char char32 = option22.getValueSeparator();
        option22.setArgName(""[ option: 4  :: null ::  ]"");
        java.util.List list35 = option22.getValuesList();
        boolean boolean36 = option16.equals((java.lang.Object) option22);
        boolean boolean37 = option22.hasArg();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(""'"" + boolean7 + ""' != '"" + false + ""'"", boolean7 == false);
        org.junit.Assert.assertEquals(""'"" + str10 + ""' != '"" + ""org.apache.commons.cli.MissingOptionException: hi!"" + ""'"", str10, ""org.apache.commons.cli.MissingOptionException: hi!"");
        org.junit.Assert.assertNull(strArray12);
        org.junit.Assert.assertNull(strArray14);
        org.junit.Assert.assertNotNull(option16);
        org.junit.Assert.assertTrue(""'"" + boolean17 + ""' != '"" + true + ""'"", boolean17 == true);
        org.junit.Assert.assertTrue(""'"" + boolean18 + ""' != '"" + true + ""'"", boolean18 == true);
        org.junit.Assert.assertTrue(""'"" + boolean20 + ""' != '"" + true + ""'"", boolean20 == true);
        org.junit.Assert.assertNotNull(option22);
        org.junit.Assert.assertTrue(""'"" + boolean25 + ""' != '"" + false + ""'"", boolean25 == false);
        org.junit.Assert.assertNotNull(list26);
        org.junit.Assert.assertTrue(""'"" + int27 + ""' != '"" + (-1) + ""'"", int27 == (-1));
        org.junit.Assert.assertNull(strArray30);
        org.junit.Assert.assertTrue(""'"" + char32 + ""' != '"" + '\000' + ""'"", char32 == '\000');
        org.junit.Assert.assertNotNull(list35);
        org.junit.Assert.assertTrue(""'"" + boolean36 + ""' != '"" + false + ""'"", boolean36 == false);
        org.junit.Assert.assertTrue(""'"" + boolean37 + ""' != '"" + false + ""'"", boolean37 == false);"
268,290,4217,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0291"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("""");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Options options28 = options18.addOption("""", false, ""arg"");
        java.util.List list29 = options28.getRequiredOptions();
        org.apache.commons.cli.Option option31 = org.apache.commons.cli.OptionBuilder.create(""arg"");
        org.apache.commons.cli.Options options32 = options28.addOption(option31);
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create('4');
        option34.setArgs((int) (short) 100);
        option34.setArgName(""[ option: 4  :: null ]"");
        java.lang.String str39 = option34.getLongOpt();
        java.lang.String str41 = option34.getValue((int) (short) -1);
        org.apache.commons.cli.Options options42 = options32.addOption(option34);
        int int43 = option34.getArgs();
        boolean boolean44 = option34.hasArg();
        boolean boolean45 = option34.hasArgName();
        boolean boolean46 = option34.hasArg();
        java.util.ListIterator listIterator47 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option34, listIterator47);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(option31);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(options42);
        org.junit.Assert.assertTrue(""'"" + int43 + ""' != '"" + 100 + ""'"", int43 == 100);
        org.junit.Assert.assertTrue(""'"" + boolean44 + ""' != '"" + true + ""'"", boolean44 == true);
        org.junit.Assert.assertTrue(""'"" + boolean45 + ""' != '"" + true + ""'"", boolean45 == true);
        org.junit.Assert.assertTrue(""'"" + boolean46 + ""' != '"" + true + ""'"", boolean46 == true);"
269,496,4181,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0497"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option6.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        java.util.List list36 = commandLine35.getArgList();
        java.lang.String[] strArray37 = commandLine35.getArgs();
        java.lang.String[] strArray38 = commandLine35.getArgs();
        commandLine35.addArg("""");
        java.lang.Object obj42 = commandLine35.getOptionObject("" "");
        org.apache.commons.cli.Option[] optionArray43 = commandLine35.getOptions();
        org.apache.commons.cli.Option option44 = null;
        // The following exception was thrown during execution in test generation
        try {
            commandLine35.addOption(option44);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue(""'"" + char7 + ""' != '"" + '\000' + ""'"", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(list36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNotNull(optionArray43);"
270,392,4431,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0393"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        java.util.Collection collection35 = options22.getOptions();
        java.lang.String[] strArray36 = null;
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options22, strArray36, properties37, false);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("""");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        boolean boolean46 = option42.hasValueSeparator();
        java.lang.String str47 = option42.toString();
        java.util.ListIterator listIterator48 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option42, listIterator48);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertNotNull(collection35);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertTrue(""'"" + boolean46 + ""' != '"" + false + ""'"", boolean46 == false);
        org.junit.Assert.assertEquals(""'"" + str47 + ""' != '"" + ""[ option: 4  ::  ]"" + ""'"", str47, ""[ option: 4  ::  ]"");"
271,184,4147,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0185"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option6.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken(""[ option: 4  :: null ::  ]"", true);
        org.apache.commons.cli.Option option43 = new org.apache.commons.cli.Option(""arg"", ""[ option: 4  :: null ]"", true, ""4"");
        java.lang.String str44 = option43.getLongOpt();
        org.apache.commons.cli.OptionBuilder optionBuilder45 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) option43);
        java.util.ListIterator listIterator46 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option43, listIterator46);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue(""'"" + char7 + ""' != '"" + '\000' + ""'"", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertEquals(""'"" + str44 + ""' != '"" + ""[ option: 4  :: null ]"" + ""'"", str44, ""[ option: 4  :: null ]"");
        org.junit.Assert.assertNotNull(optionBuilder45);"
272,353,4225,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0354"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        java.util.Collection collection22 = options6.getOptionGroups();
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create('4');
        option25.setDescription("""");
        org.apache.commons.cli.Options options28 = options23.addOption(option25);
        java.util.Collection collection29 = options23.getOptionGroups();
        org.apache.commons.cli.Options options33 = options23.addOption("""", false, ""arg"");
        java.util.Collection collection34 = options23.getOptionGroups();
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option37 = org.apache.commons.cli.OptionBuilder.create('4');
        option37.setDescription("""");
        org.apache.commons.cli.Options options40 = options35.addOption(option37);
        option37.setValueSeparator(' ');
        org.apache.commons.cli.OptionGroup optionGroup43 = options23.getOptionGroup(option37);
        option37.setRequired(false);
        org.apache.commons.cli.CommandLine commandLine46 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray48 = commandLine46.getOptionValues(""hi!"");
        java.lang.String[] strArray49 = commandLine46.getArgs();
        boolean boolean50 = option37.equals((java.lang.Object) strArray49);
        org.apache.commons.cli.OptionGroup optionGroup51 = options6.getOptionGroup(option37);
        java.lang.String str52 = option37.getArgName();
        option37.setRequired(false);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(collection22);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(collection29);
        org.junit.Assert.assertNotNull(options33);
        org.junit.Assert.assertNotNull(collection34);
        org.junit.Assert.assertNotNull(option37);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNull(strArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue(""'"" + boolean50 + ""' != '"" + false + ""'"", boolean50 == false);
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertEquals(""'"" + str52 + ""' != '"" + ""arg"" + ""'"", str52, ""arg"");"
273,73,3614,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0074"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.CommandLine commandLine5 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray7 = commandLine5.getOptionValues(""hi!"");
        java.lang.String str10 = commandLine5.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str12 = commandLine5.getOptionValue(""arg"");
        java.lang.String[] strArray13 = commandLine5.getArgs();
        java.lang.String[] strArray15 = posixParser0.flatten(options1, strArray13, true);
        org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = org.apache.commons.cli.OptionBuilder.create('4');
        option18.setDescription("""");
        org.apache.commons.cli.Options options21 = options16.addOption(option18);
        java.util.Collection collection22 = options16.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.util.Properties properties32 = null;
        org.apache.commons.cli.CommandLine commandLine34 = posixParser0.parse(options16, strArray31, properties32, false);
        org.apache.commons.cli.Option option35 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.OptionGroup optionGroup36 = options16.getOptionGroup(option35);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNull(strArray7);
        org.junit.Assert.assertEquals(""'"" + str10 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str10, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(option18);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNotNull(collection22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(commandLine34);"
274,266,4045,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0267"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option6.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken(""[ option: 4  :: null ::  ]"", true);
        posixParser0.burstToken(""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"", false);
        org.apache.commons.cli.OptionBuilder optionBuilder42 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) posixParser0);
        org.apache.commons.cli.Options options43 = null;
        java.lang.String[] strArray44 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray46 = posixParser0.flatten(options43, strArray44, false);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue(""'"" + char7 + ""' != '"" + '\000' + ""'"", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(optionBuilder42);"
275,112,3778,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0113"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String[] strArray10 = commandLine7.getArgs();
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser0.parse(options1, strArray10, properties11);
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option15 = org.apache.commons.cli.OptionBuilder.create('4');
        option15.setDescription("""");
        org.apache.commons.cli.Options options18 = options13.addOption(option15);
        java.lang.String str19 = options13.toString();
        org.apache.commons.cli.CommandLine commandLine20 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray22 = commandLine20.getOptionValues(""hi!"");
        java.lang.String str25 = commandLine20.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str27 = commandLine20.getOptionValue(""arg"");
        java.lang.String[] strArray28 = commandLine20.getArgs();
        java.util.Properties properties29 = null;
        org.apache.commons.cli.CommandLine commandLine31 = posixParser0.parse(options13, strArray28, properties29, false);
        org.apache.commons.cli.Options options32 = null;
        java.lang.String[] strArray37 = new java.lang.String[] { ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"", ""[ option:    :: null ]"", ""[ option: 4  :: null :: [ option:   [ option: 4  ::  ]  :: null ] ]"", ""org.apache.commons.cli.MissingOptionException: "" };
        java.util.Properties properties38 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options32, strArray37, properties38);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertNotNull(option15);
        org.junit.Assert.assertNotNull(options18);
        org.junit.Assert.assertEquals(""'"" + str19 + ""' != '"" + ""[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str19, ""[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(strArray22);
        org.junit.Assert.assertEquals(""'"" + str25 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str25, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(strArray37);"
276,404,3077,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0405"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.Object obj4 = commandLine0.getOptionObject('a');
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        option6.setDescription("""");
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option11 = org.apache.commons.cli.OptionBuilder.create('4');
        option11.setDescription("""");
        org.apache.commons.cli.Options options14 = options9.addOption(option11);
        boolean boolean15 = option11.hasOptionalArg();
        option6.setType((java.lang.Object) boolean15);
        java.lang.String str17 = option6.getArgName();
        java.lang.Object obj18 = option6.getType();
        java.lang.String[] strArray19 = option6.getValues();
        commandLine0.addOption(option6);
        java.util.Iterator iterator21 = commandLine0.iterator();
        boolean boolean23 = commandLine0.hasOption('=');
        java.lang.String str25 = commandLine0.getOptionValue('=');
        boolean boolean27 = commandLine0.hasOption(""[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine0.getOptionValue(""org.apache.commons.cli.MissingOptionException: hi!"", ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"");
        java.util.List list31 = commandLine0.getArgList();
        java.util.List list32 = commandLine0.getArgList();
        java.util.List list33 = commandLine0.getArgList();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertNotNull(option11);
        org.junit.Assert.assertNotNull(options14);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertEquals(""'"" + str17 + ""' != '"" + ""arg"" + ""'"", str17, ""arg"");
        org.junit.Assert.assertEquals(""'"" + obj18 + ""' != '"" + false + ""'"", obj18, false);
        org.junit.Assert.assertNull(strArray19);
        org.junit.Assert.assertNotNull(iterator21);
        org.junit.Assert.assertTrue(""'"" + boolean23 + ""' != '"" + false + ""'"", boolean23 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue(""'"" + boolean27 + ""' != '"" + false + ""'"", boolean27 == false);
        org.junit.Assert.assertEquals(""'"" + str30 + ""' != '"" + ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"" + ""'"", str30, ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"");
        org.junit.Assert.assertNotNull(list31);
        org.junit.Assert.assertNotNull(list32);
        org.junit.Assert.assertNotNull(list33);"
277,409,4188,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0410"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("""");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("""");
        option26.setLongOpt(""hi!"");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues(""hi!"");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        java.lang.String[] strArray41 = commandLine39.getOptionValues("""");
        java.lang.String[] strArray43 = commandLine39.getOptionValues('a');
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('a');
        boolean boolean46 = option45.hasArgName();
        boolean boolean47 = option45.hasArgs();
        java.lang.String str48 = option45.getLongOpt();
        option45.setLongOpt(""hi!"");
        commandLine39.addOption(option45);
        org.apache.commons.cli.Option[] optionArray52 = commandLine39.getOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue(""'"" + boolean31 + ""' != '"" + true + ""'"", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertNull(strArray43);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertTrue(""'"" + boolean46 + ""' != '"" + true + ""'"", boolean46 == true);
        org.junit.Assert.assertTrue(""'"" + boolean47 + ""' != '"" + false + ""'"", boolean47 == false);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(optionArray52);"
278,400,3081,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0401"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.Object obj4 = commandLine0.getOptionObject('a');
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        option6.setDescription("""");
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option11 = org.apache.commons.cli.OptionBuilder.create('4');
        option11.setDescription("""");
        org.apache.commons.cli.Options options14 = options9.addOption(option11);
        boolean boolean15 = option11.hasOptionalArg();
        option6.setType((java.lang.Object) boolean15);
        java.lang.String str17 = option6.getArgName();
        java.lang.Object obj18 = option6.getType();
        java.lang.String[] strArray19 = option6.getValues();
        commandLine0.addOption(option6);
        java.util.Iterator iterator21 = commandLine0.iterator();
        boolean boolean23 = commandLine0.hasOption('=');
        java.lang.String str25 = commandLine0.getOptionValue('=');
        boolean boolean27 = commandLine0.hasOption(""[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine0.getOptionValue(""org.apache.commons.cli.MissingOptionException: hi!"", ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"");
        java.util.List list31 = commandLine0.getArgList();
        java.util.List list32 = commandLine0.getArgList();
        java.lang.String str34 = commandLine0.getOptionValue('a');
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertNotNull(option11);
        org.junit.Assert.assertNotNull(options14);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertEquals(""'"" + str17 + ""' != '"" + ""arg"" + ""'"", str17, ""arg"");
        org.junit.Assert.assertEquals(""'"" + obj18 + ""' != '"" + false + ""'"", obj18, false);
        org.junit.Assert.assertNull(strArray19);
        org.junit.Assert.assertNotNull(iterator21);
        org.junit.Assert.assertTrue(""'"" + boolean23 + ""' != '"" + false + ""'"", boolean23 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue(""'"" + boolean27 + ""' != '"" + false + ""'"", boolean27 == false);
        org.junit.Assert.assertEquals(""'"" + str30 + ""' != '"" + ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"" + ""'"", str30, ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"");
        org.junit.Assert.assertNotNull(list31);
        org.junit.Assert.assertNotNull(list32);
        org.junit.Assert.assertNull(str34);"
279,171,3951,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0172"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option6.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken(""[ option: 4  :: null ::  ]"", true);
        posixParser0.burstToken(""[ Options: [ short {} ] [ long {} ]"", true);
        org.apache.commons.cli.Options options42 = null;
        java.lang.String[] strArray43 = new java.lang.String[] {};
        java.util.Properties properties44 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.CommandLine commandLine46 = posixParser0.parse(options42, strArray43, properties44, false);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue(""'"" + char7 + ""' != '"" + '\000' + ""'"", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(strArray43);"
280,288,4468,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0289"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("""");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues(""hi!"");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        posixParser0.burstToken(""4"", true);
        posixParser0.burstToken("""", true);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue(""'"" + boolean36 + ""' != '"" + false + ""'"", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);"
281,88,4201,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0089"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("""");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("""");
        option26.setLongOpt(""hi!"");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues(""hi!"");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("""");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        java.lang.String[] strArray47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options40, strArray47);
        java.lang.String str50 = commandLine48.getOptionValue(""[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]"");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue(""'"" + boolean31 + ""' != '"" + true + ""'"", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNull(str50);"
282,237,3909,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0238"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option6.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        java.util.List list36 = commandLine35.getArgList();
        java.lang.String[] strArray37 = commandLine35.getArgs();
        java.lang.String[] strArray38 = commandLine35.getArgs();
        commandLine35.addArg("""");
        java.lang.Object obj42 = commandLine35.getOptionObject("" "");
        boolean boolean44 = commandLine35.hasOption('=');
        java.lang.Object obj46 = commandLine35.getOptionObject('a');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue(""'"" + char7 + ""' != '"" + '\000' + ""'"", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(list36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertTrue(""'"" + boolean44 + ""' != '"" + false + ""'"", boolean44 == false);
        org.junit.Assert.assertNull(obj46);"
283,80,3880,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0081"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken(""hi!"", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup24 = options21.getOptionGroup(option23);
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        char char27 = option26.getValueSeparator();
        org.apache.commons.cli.Option option29 = org.apache.commons.cli.OptionBuilder.create('4');
        option29.setDescription("""");
        option26.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup33 = options21.getOptionGroup(option26);
        java.lang.String[] strArray34 = null;
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser0.parse(options21, strArray34, properties35);
        org.apache.commons.cli.Option option38 = options21.getOption(""[ option:    :: null ]"");
        java.util.Collection collection39 = options21.getOptions();
        java.lang.String str40 = options21.toString();
        org.apache.commons.cli.OptionGroup optionGroup41 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options42 = options21.addOptionGroup(optionGroup41);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNull(optionGroup24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue(""'"" + char27 + ""' != '"" + '\000' + ""'"", char27 == '\000');
        org.junit.Assert.assertNotNull(option29);
        org.junit.Assert.assertNull(optionGroup33);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNull(option38);
        org.junit.Assert.assertNotNull(collection39);
        org.junit.Assert.assertEquals(""'"" + str40 + ""' != '"" + ""[ Options: [ short {} ] [ long {} ]"" + ""'"", str40, ""[ Options: [ short {} ] [ long {} ]"");"
284,275,4087,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0276"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("""");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("""");
        option26.setLongOpt(""hi!"");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues(""hi!"");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        java.util.List list40 = commandLine39.getArgList();
        java.util.List list41 = commandLine39.getArgList();
        org.apache.commons.cli.Option[] optionArray42 = commandLine39.getOptions();
        java.util.Iterator iterator43 = commandLine39.iterator();
        java.lang.String str46 = commandLine39.getOptionValue('\000', ""org.apache.commons.cli.UnrecognizedOptionException: hi!"");
        java.lang.String str48 = commandLine39.getOptionValue('=');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue(""'"" + boolean31 + ""' != '"" + true + ""'"", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(list40);
        org.junit.Assert.assertNotNull(list41);
        org.junit.Assert.assertNotNull(optionArray42);
        org.junit.Assert.assertNotNull(iterator43);
        org.junit.Assert.assertEquals(""'"" + str46 + ""' != '"" + ""org.apache.commons.cli.UnrecognizedOptionException: hi!"" + ""'"", str46, ""org.apache.commons.cli.UnrecognizedOptionException: hi!"");
        org.junit.Assert.assertNull(str48);"
285,466,2770,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0467"");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option2 = org.apache.commons.cli.OptionBuilder.create('4');
        option2.setDescription("""");
        org.apache.commons.cli.Options options5 = options0.addOption(option2);
        java.util.List list6 = options0.helpOptions();
        org.apache.commons.cli.Options options11 = options0.addOption(""arg"", ""org.apache.commons.cli.UnrecognizedOptionException: hi!"", false, """");
        org.apache.commons.cli.CommandLine commandLine12 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray14 = commandLine12.getOptionValues(""hi!"");
        java.lang.String[] strArray15 = commandLine12.getArgs();
        java.util.Iterator iterator16 = commandLine12.iterator();
        java.lang.String str18 = commandLine12.getOptionValue(""[ option:    :: null ]"");
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        java.lang.String str22 = option20.getValue(""arg"");
        org.apache.commons.cli.MissingOptionException missingOptionException24 = new org.apache.commons.cli.MissingOptionException(""hi!"");
        boolean boolean25 = option20.equals((java.lang.Object) ""hi!"");
        option20.setValueSeparator('=');
        boolean boolean28 = option20.hasValueSeparator();
        java.lang.String str29 = option20.getArgName();
        commandLine12.addOption(option20);
        org.apache.commons.cli.OptionGroup optionGroup31 = options11.getOptionGroup(option20);
        java.util.List list32 = options11.helpOptions();
        org.apache.commons.cli.Option option34 = options11.getOption(""[ option: 4  ::  :: false ]"");
        org.junit.Assert.assertNotNull(option2);
        org.junit.Assert.assertNotNull(options5);
        org.junit.Assert.assertNotNull(list6);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertEquals(""'"" + str22 + ""' != '"" + ""arg"" + ""'"", str22, ""arg"");
        org.junit.Assert.assertTrue(""'"" + boolean25 + ""' != '"" + false + ""'"", boolean25 == false);
        org.junit.Assert.assertTrue(""'"" + boolean28 + ""' != '"" + true + ""'"", boolean28 == true);
        org.junit.Assert.assertEquals(""'"" + str29 + ""' != '"" + ""arg"" + ""'"", str29, ""arg"");
        org.junit.Assert.assertNull(optionGroup31);
        org.junit.Assert.assertNotNull(list32);
        org.junit.Assert.assertNull(option34);"
286,323,3851,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0324"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option6.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        java.util.List list36 = commandLine35.getArgList();
        java.lang.String[] strArray37 = commandLine35.getArgs();
        java.lang.String[] strArray38 = commandLine35.getArgs();
        commandLine35.addArg("""");
        boolean boolean42 = commandLine35.hasOption("""");
        java.lang.String str45 = commandLine35.getOptionValue('\000', ""hi!"");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue(""'"" + char7 + ""' != '"" + '\000' + ""'"", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(list36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue(""'"" + boolean42 + ""' != '"" + false + ""'"", boolean42 == false);
        org.junit.Assert.assertEquals(""'"" + str45 + ""' != '"" + ""hi!"" + ""'"", str45, ""hi!"");"
287,485,4072,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0486"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("""");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("""");
        option26.setLongOpt(""hi!"");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues(""hi!"");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        java.util.List list40 = commandLine39.getArgList();
        java.util.List list41 = commandLine39.getArgList();
        java.lang.String[] strArray43 = commandLine39.getOptionValues('=');
        boolean boolean45 = commandLine39.hasOption(' ');
        boolean boolean47 = commandLine39.hasOption(""[ option: 4 [ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ]  :: null ]"");
        boolean boolean49 = commandLine39.hasOption('4');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue(""'"" + boolean31 + ""' != '"" + true + ""'"", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(list40);
        org.junit.Assert.assertNotNull(list41);
        org.junit.Assert.assertNull(strArray43);
        org.junit.Assert.assertTrue(""'"" + boolean45 + ""' != '"" + false + ""'"", boolean45 == false);
        org.junit.Assert.assertTrue(""'"" + boolean47 + ""' != '"" + false + ""'"", boolean47 == false);
        org.junit.Assert.assertTrue(""'"" + boolean49 + ""' != '"" + false + ""'"", boolean49 == false);"
288,239,4042,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0240"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("""");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("""");
        option26.setLongOpt(""hi!"");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues(""hi!"");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Option[] optionArray40 = commandLine39.getOptions();
        java.util.Iterator iterator41 = commandLine39.iterator();
        java.lang.String[] strArray42 = commandLine39.getArgs();
        boolean boolean44 = commandLine39.hasOption(""org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!"");
        java.lang.Object obj46 = commandLine39.getOptionObject('\000');
        java.lang.String[] strArray47 = commandLine39.getArgs();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue(""'"" + boolean31 + ""' != '"" + true + ""'"", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(optionArray40);
        org.junit.Assert.assertNotNull(iterator41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue(""'"" + boolean44 + ""' != '"" + false + ""'"", boolean44 == false);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNotNull(strArray47);"
289,204,3451,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0205"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine8 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine8.getOptionValues(""hi!"");
        java.lang.String str13 = commandLine8.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str15 = commandLine8.getOptionValue(""arg"");
        java.lang.String[] strArray16 = commandLine8.getArgs();
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser0.parse(options1, strArray16, properties17);
        posixParser0.burstToken(""[ Options: [ short {4=[ option: 4  :: null ::  ]} ] [ long {} ]"", false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create('4');
        option24.setDescription("""");
        org.apache.commons.cli.Options options27 = options22.addOption(option24);
        java.util.Collection collection28 = options22.getOptionGroups();
        org.apache.commons.cli.Options options32 = options22.addOption("""", false, ""arg"");
        org.apache.commons.cli.Option option36 = new org.apache.commons.cli.Option("""", true, """");
        boolean boolean37 = option36.hasOptionalArg();
        option36.setOptionalArg(false);
        org.apache.commons.cli.OptionGroup optionGroup40 = options32.getOptionGroup(option36);
        option36.setOptionalArg(false);
        java.util.ListIterator listIterator43 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option36, listIterator43);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertEquals(""'"" + str13 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str13, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNotNull(options27);
        org.junit.Assert.assertNotNull(collection28);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertTrue(""'"" + boolean37 + ""' != '"" + false + ""'"", boolean37 == false);
        org.junit.Assert.assertNull(optionGroup40);"
290,104,4005,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0105"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("""");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("""");
        option26.setLongOpt(""hi!"");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues(""hi!"");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        java.util.Collection collection40 = options18.getOptionGroups();
        java.util.List list41 = options18.getRequiredOptions();
        java.util.Collection collection42 = options18.getOptionGroups();
        org.apache.commons.cli.OptionGroup optionGroup43 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options44 = options18.addOptionGroup(optionGroup43);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue(""'"" + boolean31 + ""' != '"" + true + ""'"", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(collection40);
        org.junit.Assert.assertNotNull(list41);
        org.junit.Assert.assertNotNull(collection42);"
291,125,3776,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0126"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option6.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken(""4"", false);
        org.apache.commons.cli.Options options39 = null;
        java.lang.String[] strArray40 = null;
        java.util.Properties properties41 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.CommandLine commandLine43 = posixParser0.parse(options39, strArray40, properties41, false);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue(""'"" + char7 + ""' != '"" + '\000' + ""'"", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);"
292,255,3757,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0256"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option6.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        java.util.List list36 = commandLine35.getArgList();
        java.lang.String[] strArray37 = commandLine35.getArgs();
        org.apache.commons.cli.Option[] optionArray38 = commandLine35.getOptions();
        java.util.Iterator iterator39 = commandLine35.iterator();
        java.lang.String[] strArray41 = commandLine35.getOptionValues('4');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue(""'"" + char7 + ""' != '"" + '\000' + ""'"", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(list36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(optionArray38);
        org.junit.Assert.assertNotNull(iterator39);
        org.junit.Assert.assertNull(strArray41);"
293,29,4043,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0030"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("""");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("""");
        option26.setLongOpt(""hi!"");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues(""hi!"");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("""");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        java.lang.String[] strArray47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options40, strArray47);
        java.lang.Class<?> wildcardClass49 = commandLine48.getClass();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue(""'"" + boolean31 + ""' != '"" + true + ""'"", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(wildcardClass49);"
294,98,4027,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0099"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("""");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("""");
        option26.setLongOpt(""hi!"");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues(""hi!"");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("""");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        java.lang.String[] strArray47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options40, strArray47);
        java.lang.String str50 = commandLine48.getOptionValue(' ');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue(""'"" + boolean31 + ""' != '"" + true + ""'"", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNull(str50);"
295,124,3208,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0125"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.CommandLine commandLine5 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray7 = commandLine5.getOptionValues(""hi!"");
        java.lang.String str10 = commandLine5.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str12 = commandLine5.getOptionValue(""arg"");
        java.lang.String[] strArray13 = commandLine5.getArgs();
        java.lang.String[] strArray15 = posixParser0.flatten(options1, strArray13, true);
        org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = org.apache.commons.cli.OptionBuilder.create('4');
        option18.setDescription("""");
        org.apache.commons.cli.Options options21 = options16.addOption(option18);
        java.util.Collection collection22 = options16.getOptionGroups();
        org.apache.commons.cli.Options options26 = options16.addOption("""", false, ""arg"");
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.Option option29 = org.apache.commons.cli.OptionBuilder.create(""arg"");
        org.apache.commons.cli.Options options30 = options26.addOption(option29);
        boolean boolean32 = options26.hasOption("""");
        java.lang.String[] strArray33 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray35 = posixParser0.flatten(options26, strArray33, true);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNull(strArray7);
        org.junit.Assert.assertEquals(""'"" + str10 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str10, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(option18);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNotNull(collection22);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(option29);
        org.junit.Assert.assertNotNull(options30);
        org.junit.Assert.assertTrue(""'"" + boolean32 + ""' != '"" + true + ""'"", boolean32 == true);"
296,257,3736,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0258"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option6.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken(""[ option: 4  :: null ::  ]"", true);
        posixParser0.burstToken("""", true);
        org.apache.commons.cli.Option option42 = null;
        java.util.ListIterator listIterator43 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option42, listIterator43);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue(""'"" + char7 + ""' != '"" + '\000' + ""'"", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);"
297,267,3736,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0268"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        java.util.Collection collection22 = options6.getOptions();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create('4');
        char char25 = option24.getValueSeparator();
        org.apache.commons.cli.Options options26 = options6.addOption(option24);
        org.apache.commons.cli.Option option28 = org.apache.commons.cli.OptionBuilder.create('4');
        option28.setArgs((int) (short) 100);
        option28.setArgName(""[ option: 4  :: null ]"");
        java.lang.String str33 = option28.getLongOpt();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option36 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup37 = options34.getOptionGroup(option36);
        org.apache.commons.cli.Option option39 = org.apache.commons.cli.OptionBuilder.create('4');
        org.apache.commons.cli.OptionGroup optionGroup40 = options34.getOptionGroup(option39);
        option28.setType((java.lang.Object) options34);
        org.apache.commons.cli.Options options42 = options6.addOption(option28);
        org.apache.commons.cli.Option option44 = options42.getOption(""[ Options: [ short {} ] [ long {} ]"");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(collection22);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertTrue(""'"" + char25 + ""' != '"" + '\000' + ""'"", char25 == '\000');
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(option28);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(option36);
        org.junit.Assert.assertNull(optionGroup37);
        org.junit.Assert.assertNotNull(option39);
        org.junit.Assert.assertNull(optionGroup40);
        org.junit.Assert.assertNotNull(options42);
        org.junit.Assert.assertNull(option44);"
298,99,3670,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0100"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken(""hi!"", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup24 = options21.getOptionGroup(option23);
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        char char27 = option26.getValueSeparator();
        org.apache.commons.cli.Option option29 = org.apache.commons.cli.OptionBuilder.create('4');
        option29.setDescription("""");
        option26.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup33 = options21.getOptionGroup(option26);
        java.lang.String[] strArray34 = null;
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser0.parse(options21, strArray34, properties35);
        org.apache.commons.cli.Option option38 = options21.getOption(""[ option:    :: null ]"");
        java.util.Collection collection39 = options21.getOptions();
        org.apache.commons.cli.OptionGroup optionGroup40 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options41 = options21.addOptionGroup(optionGroup40);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNull(optionGroup24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue(""'"" + char27 + ""' != '"" + '\000' + ""'"", char27 == '\000');
        org.junit.Assert.assertNotNull(option29);
        org.junit.Assert.assertNull(optionGroup33);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNull(option38);
        org.junit.Assert.assertNotNull(collection39);"
299,81,3896,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0082"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("""");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("""");
        option26.setLongOpt(""hi!"");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues(""hi!"");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Option[] optionArray40 = commandLine39.getOptions();
        java.util.Iterator iterator41 = commandLine39.iterator();
        java.lang.String str43 = commandLine39.getOptionValue('a');
        java.lang.String[] strArray45 = commandLine39.getOptionValues(""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"");
        java.lang.String[] strArray47 = commandLine39.getOptionValues("""");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue(""'"" + boolean31 + ""' != '"" + true + ""'"", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(optionArray40);
        org.junit.Assert.assertNotNull(iterator41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(strArray45);
        org.junit.Assert.assertNull(strArray47);"
300,14,3624,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0015"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken(""hi!"", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup24 = options21.getOptionGroup(option23);
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        char char27 = option26.getValueSeparator();
        org.apache.commons.cli.Option option29 = org.apache.commons.cli.OptionBuilder.create('4');
        option29.setDescription("""");
        option26.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup33 = options21.getOptionGroup(option26);
        java.lang.String[] strArray34 = null;
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser0.parse(options21, strArray34, properties35);
        org.apache.commons.cli.Option option38 = options21.getOption(""[ option:    :: null ]"");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options42 = options21.addOption(""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"", false, """");
            org.junit.Assert.fail(""Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '.'"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNull(optionGroup24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue(""'"" + char27 + ""' != '"" + '\000' + ""'"", char27 == '\000');
        org.junit.Assert.assertNotNull(option29);
        org.junit.Assert.assertNull(optionGroup33);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNull(option38);"
301,36,3720,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0037"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = null;
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create('4');
        option24.setArgs((int) (short) 100);
        option24.setArgName(""[ option: 4  :: null ]"");
        java.lang.String str29 = option24.getLongOpt();
        java.lang.String str31 = option24.getValue((int) (short) -1);
        org.apache.commons.cli.CommandLine commandLine32 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray34 = commandLine32.getOptionValues(""hi!"");
        java.lang.String str37 = commandLine32.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str39 = commandLine32.getOptionValue(""arg"");
        java.lang.String[] strArray40 = commandLine32.getArgs();
        option24.setType((java.lang.Object) strArray40);
        java.util.Properties properties42 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.CommandLine commandLine44 = posixParser0.parse(options22, strArray40, properties42, false);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(strArray34);
        org.junit.Assert.assertEquals(""'"" + str37 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str37, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(strArray40);"
302,190,2421,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0191"");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('4');
        char char2 = option1.getValueSeparator();
        boolean boolean3 = option1.hasArg();
        boolean boolean4 = option1.hasOptionalArg();
        java.lang.String str6 = option1.getValue(0);
        java.lang.String[] strArray7 = option1.getValues();
        int int8 = option1.getId();
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray11 = commandLine9.getOptionValues(""hi!"");
        java.lang.String[] strArray12 = commandLine9.getArgs();
        java.util.Iterator iterator13 = commandLine9.iterator();
        java.lang.String str16 = commandLine9.getOptionValue(""[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]"", ""arg"");
        java.lang.Object obj18 = commandLine9.getOptionObject(""[ option: 4  :: null ]"");
        option1.setType((java.lang.Object) ""[ option: 4  :: null ]"");
        boolean boolean20 = option1.isRequired();
        // The following exception was thrown during execution in test generation
        try {
            option1.addValue(""org.apache.commons.cli.MissingOptionException: [ option: 4  :: null ]"");
            org.junit.Assert.fail(""Expected exception of type java.lang.RuntimeException; message: NO_ARGS_ALLOWED"");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertTrue(""'"" + char2 + ""' != '"" + '\000' + ""'"", char2 == '\000');
        org.junit.Assert.assertTrue(""'"" + boolean3 + ""' != '"" + false + ""'"", boolean3 == false);
        org.junit.Assert.assertTrue(""'"" + boolean4 + ""' != '"" + false + ""'"", boolean4 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(strArray7);
        org.junit.Assert.assertTrue(""'"" + int8 + ""' != '"" + 52 + ""'"", int8 == 52);
        org.junit.Assert.assertNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(iterator13);
        org.junit.Assert.assertEquals(""'"" + str16 + ""' != '"" + ""arg"" + ""'"", str16, ""arg"");
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue(""'"" + boolean20 + ""' != '"" + false + ""'"", boolean20 == false);"
303,460,2643,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0461"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String str5 = commandLine0.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str7 = commandLine0.getOptionValue(""arg"");
        java.lang.String str9 = commandLine0.getOptionValue('a');
        java.lang.String str12 = commandLine0.getOptionValue(""[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]"", ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.Option option14 = org.apache.commons.cli.OptionBuilder.create('4');
        char char15 = option14.getValueSeparator();
        boolean boolean16 = option14.hasArg();
        boolean boolean17 = option14.hasOptionalArg();
        java.lang.Object obj18 = option14.getType();
        java.lang.String str20 = option14.getValue((int) (short) 100);
        int int21 = option14.getArgs();
        commandLine0.addOption(option14);
        java.lang.String[] strArray23 = commandLine0.getArgs();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertEquals(""'"" + str5 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str5, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"" + ""'"", str12, ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"");
        org.junit.Assert.assertNotNull(option14);
        org.junit.Assert.assertTrue(""'"" + char15 + ""' != '"" + '\000' + ""'"", char15 == '\000');
        org.junit.Assert.assertTrue(""'"" + boolean16 + ""' != '"" + false + ""'"", boolean16 == false);
        org.junit.Assert.assertTrue(""'"" + boolean17 + ""' != '"" + false + ""'"", boolean17 == false);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue(""'"" + int21 + ""' != '"" + (-1) + ""'"", int21 == (-1));
        org.junit.Assert.assertNotNull(strArray23);"
304,356,3815,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0357"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("""");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("""");
        option26.setLongOpt(""hi!"");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues(""hi!"");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Option[] optionArray40 = commandLine39.getOptions();
        java.util.Iterator iterator41 = commandLine39.iterator();
        java.lang.String str43 = commandLine39.getOptionValue('a');
        boolean boolean45 = commandLine39.hasOption('4');
        java.lang.String str47 = commandLine39.getOptionValue('4');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue(""'"" + boolean31 + ""' != '"" + true + ""'"", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(optionArray40);
        org.junit.Assert.assertNotNull(iterator41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue(""'"" + boolean45 + ""' != '"" + false + ""'"", boolean45 == false);
        org.junit.Assert.assertNull(str47);"
305,325,3799,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0326"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("""");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("""");
        option26.setLongOpt(""hi!"");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues(""hi!"");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        java.lang.String[] strArray41 = commandLine39.getOptionValues("""");
        java.lang.String[] strArray43 = commandLine39.getOptionValues('a');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass44 = strArray43.getClass();
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue(""'"" + boolean31 + ""' != '"" + true + ""'"", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertNull(strArray43);"
306,149,2343,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0150"");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option2 = org.apache.commons.cli.OptionBuilder.create('4');
        option2.setDescription("""");
        org.apache.commons.cli.Options options5 = options0.addOption(option2);
        java.util.Collection collection6 = options0.getOptionGroups();
        org.apache.commons.cli.Option option8 = org.apache.commons.cli.OptionBuilder.create('4');
        option8.setDescription("""");
        option8.setLongOpt(""hi!"");
        boolean boolean13 = option8.hasArgName();
        org.apache.commons.cli.Options options14 = options0.addOption(option8);
        org.apache.commons.cli.CommandLine commandLine15 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray17 = commandLine15.getOptionValues(""hi!"");
        java.lang.String[] strArray18 = commandLine15.getArgs();
        java.lang.String str20 = commandLine15.getOptionValue(""hi!"");
        boolean boolean22 = commandLine15.hasOption("""");
        java.lang.String str25 = commandLine15.getOptionValue(""[ option: 4  :: null ]"", ""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.Option[] optionArray26 = commandLine15.getOptions();
        java.lang.Object obj28 = commandLine15.getOptionObject('=');
        option8.setType((java.lang.Object) '=');
        org.junit.Assert.assertNotNull(option2);
        org.junit.Assert.assertNotNull(options5);
        org.junit.Assert.assertNotNull(collection6);
        org.junit.Assert.assertNotNull(option8);
        org.junit.Assert.assertTrue(""'"" + boolean13 + ""' != '"" + true + ""'"", boolean13 == true);
        org.junit.Assert.assertNotNull(options14);
        org.junit.Assert.assertNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue(""'"" + boolean22 + ""' != '"" + false + ""'"", boolean22 == false);
        org.junit.Assert.assertEquals(""'"" + str25 + ""' != '"" + ""org.apache.commons.cli.MissingOptionException: hi!"" + ""'"", str25, ""org.apache.commons.cli.MissingOptionException: hi!"");
        org.junit.Assert.assertNotNull(optionArray26);
        org.junit.Assert.assertNull(obj28);"
307,425,2345,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0426"");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('4');
        option1.setArgs((int) (short) 100);
        option1.setArgName(""[ option: 4  :: null ]"");
        option1.setArgs(10);
        org.apache.commons.cli.CommandLine commandLine8 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine8.getOptionValues(""hi!"");
        java.lang.String[] strArray11 = commandLine8.getArgs();
        java.lang.String str13 = commandLine8.getOptionValue(""hi!"");
        boolean boolean15 = commandLine8.hasOption("""");
        commandLine8.addArg(""org.apache.commons.cli.UnrecognizedOptionException: hi!"");
        boolean boolean19 = commandLine8.hasOption(""[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.apache.commons.cli.Option option21 = org.apache.commons.cli.OptionBuilder.create("""");
        java.lang.String str23 = option21.getValue("""");
        commandLine8.addOption(option21);
        java.util.List list25 = commandLine8.getArgList();
        java.lang.String[] strArray27 = commandLine8.getOptionValues(""[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]"");
        option1.setType((java.lang.Object) commandLine8);
        java.lang.String str30 = option1.getValue(""org.apache.commons.cli.MissingArgumentException:  "");
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertTrue(""'"" + boolean19 + ""' != '"" + false + ""'"", boolean19 == false);
        org.junit.Assert.assertNotNull(option21);
        org.junit.Assert.assertEquals(""'"" + str23 + ""' != '"" + """" + ""'"", str23, """");
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNull(strArray27);
        org.junit.Assert.assertEquals(""'"" + str30 + ""' != '"" + ""org.apache.commons.cli.MissingArgumentException:  "" + ""'"", str30, ""org.apache.commons.cli.MissingArgumentException:  "");"
308,446,2551,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0447"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.util.Iterator iterator4 = commandLine0.iterator();
        java.lang.String str7 = commandLine0.getOptionValue(""[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]"", ""arg"");
        boolean boolean9 = commandLine0.hasOption('#');
        java.lang.String str12 = commandLine0.getOptionValue('4', ""[ Options: [ short { =[ option:    :: hi! ], 4=[ option: 4  ::  ], arg=[ option: arg org.apache.commons.cli.UnrecognizedOptionException: hi!  :: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ]} ] [ long {org.apache.commons.cli.UnrecognizedOptionException: hi!=[ option: arg org.apache.commons.cli.UnrecognizedOptionException: hi!  :: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ]} ]"");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertEquals(""'"" + str7 + ""' != '"" + ""arg"" + ""'"", str7, ""arg"");
        org.junit.Assert.assertTrue(""'"" + boolean9 + ""' != '"" + false + ""'"", boolean9 == false);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short { =[ option:    :: hi! ], 4=[ option: 4  ::  ], arg=[ option: arg org.apache.commons.cli.UnrecognizedOptionException: hi!  :: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ]} ] [ long {org.apache.commons.cli.UnrecognizedOptionException: hi!=[ option: arg org.apache.commons.cli.UnrecognizedOptionException: hi!  :: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ]} ]"" + ""'"", str12, ""[ Options: [ short { =[ option:    :: hi! ], 4=[ option: 4  ::  ], arg=[ option: arg org.apache.commons.cli.UnrecognizedOptionException: hi!  :: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ]} ] [ long {org.apache.commons.cli.UnrecognizedOptionException: hi!=[ option: arg org.apache.commons.cli.UnrecognizedOptionException: hi!  :: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ]} ]"");"
309,201,3758,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0202"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("""");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("""");
        option26.setLongOpt(""hi!"");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues(""hi!"");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        java.util.List list40 = commandLine39.getArgList();
        java.util.List list41 = commandLine39.getArgList();
        org.apache.commons.cli.Option[] optionArray42 = commandLine39.getOptions();
        java.util.Iterator iterator43 = commandLine39.iterator();
        java.util.List list44 = commandLine39.getArgList();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue(""'"" + boolean31 + ""' != '"" + true + ""'"", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(list40);
        org.junit.Assert.assertNotNull(list41);
        org.junit.Assert.assertNotNull(optionArray42);
        org.junit.Assert.assertNotNull(iterator43);
        org.junit.Assert.assertNotNull(list44);"
310,453,2556,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0454"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String str5 = commandLine0.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str7 = commandLine0.getOptionValue(""arg"");
        java.lang.String str9 = commandLine0.getOptionValue('a');
        java.lang.String str12 = commandLine0.getOptionValue(""[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]"", ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.Option option14 = org.apache.commons.cli.OptionBuilder.create('4');
        char char15 = option14.getValueSeparator();
        boolean boolean16 = option14.hasArg();
        boolean boolean17 = option14.hasOptionalArg();
        java.lang.Object obj18 = option14.getType();
        java.lang.String str20 = option14.getValue((int) (short) 100);
        int int21 = option14.getArgs();
        commandLine0.addOption(option14);
        option14.setArgs(1);
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertEquals(""'"" + str5 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str5, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"" + ""'"", str12, ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"");
        org.junit.Assert.assertNotNull(option14);
        org.junit.Assert.assertTrue(""'"" + char15 + ""' != '"" + '\000' + ""'"", char15 == '\000');
        org.junit.Assert.assertTrue(""'"" + boolean16 + ""' != '"" + false + ""'"", boolean16 == false);
        org.junit.Assert.assertTrue(""'"" + boolean17 + ""' != '"" + false + ""'"", boolean17 == false);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue(""'"" + int21 + ""' != '"" + (-1) + ""'"", int21 == (-1));"
311,261,3064,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0262"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptions();
        boolean boolean9 = options1.hasOption(""arg"");
        java.lang.String[] strArray12 = new java.lang.String[] { ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"", ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"" };
        org.apache.commons.cli.CommandLine commandLine13 = posixParser0.parse(options1, strArray12);
        org.apache.commons.cli.Option option15 = org.apache.commons.cli.OptionBuilder.create('4');
        option15.setArgs((int) (short) 100);
        option15.setArgName(""[ option: 4  :: null ]"");
        java.lang.String str20 = option15.getLongOpt();
        java.lang.String str22 = option15.getValue((int) (short) -1);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        option15.setType((java.lang.Object) strArray31);
        java.lang.String str34 = option15.getValue((int) 'a');
        org.apache.commons.cli.OptionGroup optionGroup35 = options1.getOptionGroup(option15);
        org.apache.commons.cli.Option option37 = options1.getOption(""hi!"");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertTrue(""'"" + boolean9 + ""' != '"" + false + ""'"", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine13);
        org.junit.Assert.assertNotNull(option15);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(optionGroup35);
        org.junit.Assert.assertNull(option37);"
312,233,2308,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0234"");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('4');
        char char2 = option1.getValueSeparator();
        boolean boolean3 = option1.hasArg();
        boolean boolean4 = option1.hasOptionalArg();
        java.lang.String str6 = option1.getValue(0);
        java.lang.String[] strArray7 = option1.getValues();
        int int8 = option1.getId();
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray11 = commandLine9.getOptionValues(""hi!"");
        java.lang.String[] strArray12 = commandLine9.getArgs();
        java.util.Iterator iterator13 = commandLine9.iterator();
        java.lang.String str16 = commandLine9.getOptionValue(""[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]"", ""arg"");
        java.lang.Object obj18 = commandLine9.getOptionObject(""[ option: 4  :: null ]"");
        option1.setType((java.lang.Object) ""[ option: 4  :: null ]"");
        boolean boolean20 = option1.isRequired();
        boolean boolean21 = option1.hasLongOpt();
        boolean boolean22 = option1.hasArg();
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertTrue(""'"" + char2 + ""' != '"" + '\000' + ""'"", char2 == '\000');
        org.junit.Assert.assertTrue(""'"" + boolean3 + ""' != '"" + false + ""'"", boolean3 == false);
        org.junit.Assert.assertTrue(""'"" + boolean4 + ""' != '"" + false + ""'"", boolean4 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(strArray7);
        org.junit.Assert.assertTrue(""'"" + int8 + ""' != '"" + 52 + ""'"", int8 == 52);
        org.junit.Assert.assertNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(iterator13);
        org.junit.Assert.assertEquals(""'"" + str16 + ""' != '"" + ""arg"" + ""'"", str16, ""arg"");
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue(""'"" + boolean20 + ""' != '"" + false + ""'"", boolean20 == false);
        org.junit.Assert.assertTrue(""'"" + boolean21 + ""' != '"" + false + ""'"", boolean21 == false);
        org.junit.Assert.assertTrue(""'"" + boolean22 + ""' != '"" + false + ""'"", boolean22 == false);"
313,96,3446,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0097"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken(""hi!"", true);
        org.apache.commons.cli.Option option22 = org.apache.commons.cli.OptionBuilder.create('4');
        boolean boolean23 = option22.hasArgs();
        java.lang.Object obj24 = option22.getType();
        java.lang.String str25 = option22.getLongOpt();
        boolean boolean26 = option22.hasArg();
        org.apache.commons.cli.Option option30 = new org.apache.commons.cli.Option("""", true, """");
        boolean boolean31 = option30.hasOptionalArg();
        java.lang.String str33 = option30.getValue("""");
        java.lang.String str34 = option30.getValue();
        java.util.List list35 = option30.getValuesList();
        option22.setType((java.lang.Object) option30);
        int int37 = option30.getArgs();
        java.util.ListIterator listIterator38 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option30, listIterator38);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option22);
        org.junit.Assert.assertTrue(""'"" + boolean23 + ""' != '"" + false + ""'"", boolean23 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue(""'"" + boolean26 + ""' != '"" + false + ""'"", boolean26 == false);
        org.junit.Assert.assertTrue(""'"" + boolean31 + ""' != '"" + false + ""'"", boolean31 == false);
        org.junit.Assert.assertEquals(""'"" + str33 + ""' != '"" + """" + ""'"", str33, """");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(list35);
        org.junit.Assert.assertTrue(""'"" + int37 + ""' != '"" + 1 + ""'"", int37 == 1);"
314,195,3449,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0196"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option6.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        java.lang.String[] strArray37 = commandLine35.getOptionValues(""org.apache.commons.cli.MissingOptionException: hi!"");
        java.lang.String[] strArray39 = commandLine35.getOptionValues(""4"");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue(""'"" + char7 + ""' != '"" + '\000' + ""'"", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNull(strArray37);
        org.junit.Assert.assertNull(strArray39);"
315,289,3432,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0290"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option6.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        java.lang.String[] strArray37 = commandLine35.getOptionValues(""org.apache.commons.cli.MissingOptionException: hi!"");
        java.util.List list38 = commandLine35.getArgList();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue(""'"" + char7 + ""' != '"" + '\000' + ""'"", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNull(strArray37);
        org.junit.Assert.assertNotNull(list38);"
316,434,3421,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0435"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option6.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        boolean boolean37 = commandLine35.hasOption('4');
        java.lang.String str39 = commandLine35.getOptionValue(""arg"");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue(""'"" + char7 + ""' != '"" + '\000' + ""'"", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertTrue(""'"" + boolean37 + ""' != '"" + false + ""'"", boolean37 == false);
        org.junit.Assert.assertNull(str39);"
317,54,3417,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0055"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option6.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        boolean boolean37 = commandLine35.hasOption(""arg"");
        java.util.List list38 = commandLine35.getArgList();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue(""'"" + char7 + ""' != '"" + '\000' + ""'"", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertTrue(""'"" + boolean37 + ""' != '"" + false + ""'"", boolean37 == false);
        org.junit.Assert.assertNotNull(list38);"
318,18,3664,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0019"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("""");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("""");
        option26.setLongOpt(""hi!"");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues(""hi!"");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Option[] optionArray40 = commandLine39.getOptions();
        java.util.Iterator iterator41 = commandLine39.iterator();
        java.lang.String str43 = commandLine39.getOptionValue('a');
        java.util.Iterator iterator44 = commandLine39.iterator();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue(""'"" + boolean31 + ""' != '"" + true + ""'"", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(optionArray40);
        org.junit.Assert.assertNotNull(iterator41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(iterator44);"
319,8,3397,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0009"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option6.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        java.util.List list36 = commandLine35.getArgList();
        org.apache.commons.cli.Option[] optionArray37 = commandLine35.getOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue(""'"" + char7 + ""' != '"" + '\000' + ""'"", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(list36);
        org.junit.Assert.assertNotNull(optionArray37);"
320,55,3645,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0056"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("""");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("""");
        option26.setLongOpt(""hi!"");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues(""hi!"");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Option[] optionArray40 = commandLine39.getOptions();
        java.lang.Class<?> wildcardClass41 = commandLine39.getClass();
        org.apache.commons.cli.OptionBuilder optionBuilder42 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) commandLine39);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue(""'"" + boolean31 + ""' != '"" + true + ""'"", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(optionArray40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(optionBuilder42);"
321,196,2123,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0197"");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create(' ');
        boolean boolean2 = option1.hasArgName();
        boolean boolean3 = option1.hasArgName();
        boolean boolean4 = option1.hasOptionalArg();
        java.lang.Object obj5 = option1.getType();
        option1.setLongOpt(""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.apache.commons.cli.CommandLine commandLine8 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine8.getOptionValues(""hi!"");
        java.util.Iterator iterator11 = commandLine8.iterator();
        java.lang.String[] strArray13 = commandLine8.getOptionValues('a');
        java.util.Iterator iterator14 = commandLine8.iterator();
        boolean boolean16 = commandLine8.hasOption("""");
        boolean boolean17 = option1.equals((java.lang.Object) commandLine8);
        java.lang.String str18 = option1.toString();
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertTrue(""'"" + boolean2 + ""' != '"" + true + ""'"", boolean2 == true);
        org.junit.Assert.assertTrue(""'"" + boolean3 + ""' != '"" + true + ""'"", boolean3 == true);
        org.junit.Assert.assertTrue(""'"" + boolean4 + ""' != '"" + false + ""'"", boolean4 == false);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertNull(strArray13);
        org.junit.Assert.assertNotNull(iterator14);
        org.junit.Assert.assertTrue(""'"" + boolean16 + ""' != '"" + false + ""'"", boolean16 == false);
        org.junit.Assert.assertTrue(""'"" + boolean17 + ""' != '"" + false + ""'"", boolean17 == false);
        org.junit.Assert.assertEquals(""'"" + str18 + ""' != '"" + ""[ option:   [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]  :: null ]"" + ""'"", str18, ""[ option:   [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]  :: null ]"");"
322,440,2396,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0441"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue(""hi!"");
        boolean boolean7 = commandLine0.hasOption("""");
        java.lang.String str10 = commandLine0.getOptionValue(""[ option: 4  :: null ]"", ""org.apache.commons.cli.MissingOptionException: hi!"");
        java.lang.String[] strArray12 = commandLine0.getOptionValues('4');
        java.lang.String[] strArray14 = commandLine0.getOptionValues('a');
        org.apache.commons.cli.Option option16 = org.apache.commons.cli.OptionBuilder.create(' ');
        boolean boolean17 = option16.hasArgName();
        boolean boolean18 = option16.hasArgName();
        commandLine0.addOption(option16);
        java.lang.String str20 = option16.getLongOpt();
        boolean boolean21 = option16.hasArg();
        // The following exception was thrown during execution in test generation
        try {
            option16.addValue(""org.apache.commons.cli.MissingOptionException: [ option: 4  :: null ]"");
            org.junit.Assert.fail(""Expected exception of type java.lang.RuntimeException; message: NO_ARGS_ALLOWED"");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(""'"" + boolean7 + ""' != '"" + false + ""'"", boolean7 == false);
        org.junit.Assert.assertEquals(""'"" + str10 + ""' != '"" + ""org.apache.commons.cli.MissingOptionException: hi!"" + ""'"", str10, ""org.apache.commons.cli.MissingOptionException: hi!"");
        org.junit.Assert.assertNull(strArray12);
        org.junit.Assert.assertNull(strArray14);
        org.junit.Assert.assertNotNull(option16);
        org.junit.Assert.assertTrue(""'"" + boolean17 + ""' != '"" + true + ""'"", boolean17 == true);
        org.junit.Assert.assertTrue(""'"" + boolean18 + ""' != '"" + true + ""'"", boolean18 == true);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue(""'"" + boolean21 + ""' != '"" + false + ""'"", boolean21 == false);"
323,408,3376,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0409"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option6.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        java.util.List list36 = commandLine35.getArgList();
        java.util.Iterator iterator37 = commandLine35.iterator();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue(""'"" + char7 + ""' != '"" + '\000' + ""'"", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(list36);
        org.junit.Assert.assertNotNull(iterator37);"
324,27,3639,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0028"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("""");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("""");
        option26.setLongOpt(""hi!"");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues(""hi!"");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.OptionGroup optionGroup40 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options41 = options18.addOptionGroup(optionGroup40);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue(""'"" + boolean31 + ""' != '"" + true + ""'"", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);"
325,280,2372,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0281"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.util.Iterator iterator4 = commandLine0.iterator();
        java.lang.String str6 = commandLine0.getOptionValue(""[ option:    :: null ]"");
        org.apache.commons.cli.Option option8 = org.apache.commons.cli.OptionBuilder.create('4');
        java.lang.String str10 = option8.getValue(""arg"");
        org.apache.commons.cli.MissingOptionException missingOptionException12 = new org.apache.commons.cli.MissingOptionException(""hi!"");
        boolean boolean13 = option8.equals((java.lang.Object) ""hi!"");
        option8.setValueSeparator('=');
        boolean boolean16 = option8.hasValueSeparator();
        java.lang.String str17 = option8.getArgName();
        commandLine0.addOption(option8);
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setArgs((int) (short) 100);
        option20.setArgName(""[ option: 4  :: null ]"");
        java.lang.String str25 = option20.getLongOpt();
        option20.setDescription(""hi!"");
        option20.setArgName(""[ option: 4  :: null ]"");
        java.lang.String str31 = option20.getValue((int) (byte) 100);
        java.lang.String[] strArray32 = option20.getValues();
        option8.setType((java.lang.Object) strArray32);
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(option8);
        org.junit.Assert.assertEquals(""'"" + str10 + ""' != '"" + ""arg"" + ""'"", str10, ""arg"");
        org.junit.Assert.assertTrue(""'"" + boolean13 + ""' != '"" + false + ""'"", boolean13 == false);
        org.junit.Assert.assertTrue(""'"" + boolean16 + ""' != '"" + true + ""'"", boolean16 == true);
        org.junit.Assert.assertEquals(""'"" + str17 + ""' != '"" + ""arg"" + ""'"", str17, ""arg"");
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(strArray32);"
326,66,3602,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0067"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("""");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("""");
        option26.setLongOpt(""hi!"");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues(""hi!"");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Option[] optionArray40 = commandLine39.getOptions();
        java.util.Iterator iterator41 = commandLine39.iterator();
        java.lang.String str43 = commandLine39.getOptionValue('a');
        commandLine39.addArg(""[ option: 4  :: null ]"");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue(""'"" + boolean31 + ""' != '"" + true + ""'"", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(optionArray40);
        org.junit.Assert.assertNotNull(iterator41);
        org.junit.Assert.assertNull(str43);"
327,0,3278,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0001"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option6.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("""");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues(""hi!"");
        java.lang.String str28 = commandLine23.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str30 = commandLine23.getOptionValue(""arg"");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        java.lang.String[] strArray37 = commandLine35.getOptionValues('\000');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue(""'"" + char7 + ""' != '"" + '\000' + ""'"", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals(""'"" + str28 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str28, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNull(strArray37);"
328,43,3537,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0044"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("""");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("""");
        option26.setLongOpt(""hi!"");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues(""hi!"");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        java.util.Collection collection40 = options18.getOptionGroups();
        java.util.List list41 = options18.getRequiredOptions();
        java.lang.Class<?> wildcardClass42 = list41.getClass();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue(""'"" + boolean31 + ""' != '"" + true + ""'"", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(collection40);
        org.junit.Assert.assertNotNull(list41);
        org.junit.Assert.assertNotNull(wildcardClass42);"
329,360,2244,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0361"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        boolean boolean5 = commandLine0.hasOption(""hi!"");
        org.apache.commons.cli.Options options6 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option8 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup9 = options6.getOptionGroup(option8);
        org.apache.commons.cli.Option option11 = org.apache.commons.cli.OptionBuilder.create('4');
        char char12 = option11.getValueSeparator();
        org.apache.commons.cli.Option option14 = org.apache.commons.cli.OptionBuilder.create('4');
        option14.setDescription("""");
        option11.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup18 = options6.getOptionGroup(option11);
        int int19 = option11.getId();
        commandLine0.addOption(option11);
        java.util.Iterator iterator21 = commandLine0.iterator();
        java.lang.String str24 = commandLine0.getOptionValue("""", ""[ option: 4  :: null ]"");
        java.lang.String str26 = commandLine0.getOptionValue('\000');
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue(""'"" + boolean5 + ""' != '"" + false + ""'"", boolean5 == false);
        org.junit.Assert.assertNotNull(option8);
        org.junit.Assert.assertNull(optionGroup9);
        org.junit.Assert.assertNotNull(option11);
        org.junit.Assert.assertTrue(""'"" + char12 + ""' != '"" + '\000' + ""'"", char12 == '\000');
        org.junit.Assert.assertNotNull(option14);
        org.junit.Assert.assertNull(optionGroup18);
        org.junit.Assert.assertTrue(""'"" + int19 + ""' != '"" + 52 + ""'"", int19 == 52);
        org.junit.Assert.assertNotNull(iterator21);
        org.junit.Assert.assertEquals(""'"" + str24 + ""' != '"" + ""[ option: 4  :: null ]"" + ""'"", str24, ""[ option: 4  :: null ]"");
        org.junit.Assert.assertNull(str26);"
330,91,3486,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0092"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("""");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("""");
        option26.setLongOpt(""hi!"");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues(""hi!"");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        java.util.List list40 = commandLine39.getArgList();
        org.apache.commons.cli.OptionBuilder optionBuilder41 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) commandLine39);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue(""'"" + boolean31 + ""' != '"" + true + ""'"", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(list40);
        org.junit.Assert.assertNotNull(optionBuilder41);"
331,347,1903,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0348"");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('4');
        option1.setArgs((int) (short) 100);
        option1.setArgName(""[ option: 4  :: null ]"");
        java.lang.String str6 = option1.getLongOpt();
        java.lang.String str8 = option1.getValue((int) (short) -1);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray11 = commandLine9.getOptionValues(""hi!"");
        java.lang.String str14 = commandLine9.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str16 = commandLine9.getOptionValue(""arg"");
        java.lang.String[] strArray17 = commandLine9.getArgs();
        option1.setType((java.lang.Object) strArray17);
        java.lang.String str20 = option1.getValue((int) 'a');
        java.lang.String str22 = option1.getValue(""[ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ]"");
        option1.setOptionalArg(false);
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(strArray11);
        org.junit.Assert.assertEquals(""'"" + str14 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str14, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals(""'"" + str22 + ""' != '"" + ""[ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ]"" + ""'"", str22, ""[ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ]"");"
332,419,2799,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0420"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine8 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine8.getOptionValues(""hi!"");
        java.lang.String str13 = commandLine8.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str15 = commandLine8.getOptionValue(""arg"");
        java.lang.String[] strArray16 = commandLine8.getArgs();
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser0.parse(options1, strArray16, properties17);
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option21 = org.apache.commons.cli.OptionBuilder.create('4');
        option21.setDescription("""");
        org.apache.commons.cli.Options options24 = options19.addOption(option21);
        char char25 = option21.getValueSeparator();
        option21.setArgName(""[ option: 4 hi!  ::  ]"");
        java.util.ListIterator listIterator28 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option21, listIterator28);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertEquals(""'"" + str13 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str13, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(option21);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertTrue(""'"" + char25 + ""' != '"" + '\000' + ""'"", char25 == '\000');"
333,219,2004,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0220"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.Object obj4 = commandLine0.getOptionObject('a');
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        option6.setDescription("""");
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option11 = org.apache.commons.cli.OptionBuilder.create('4');
        option11.setDescription("""");
        org.apache.commons.cli.Options options14 = options9.addOption(option11);
        boolean boolean15 = option11.hasOptionalArg();
        option6.setType((java.lang.Object) boolean15);
        java.lang.String str17 = option6.getArgName();
        java.lang.Object obj18 = option6.getType();
        java.lang.String[] strArray19 = option6.getValues();
        commandLine0.addOption(option6);
        boolean boolean22 = commandLine0.hasOption('#');
        org.apache.commons.cli.OptionBuilder optionBuilder23 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) boolean22);
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertNotNull(option11);
        org.junit.Assert.assertNotNull(options14);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertEquals(""'"" + str17 + ""' != '"" + ""arg"" + ""'"", str17, ""arg"");
        org.junit.Assert.assertEquals(""'"" + obj18 + ""' != '"" + false + ""'"", obj18, false);
        org.junit.Assert.assertNull(strArray19);
        org.junit.Assert.assertTrue(""'"" + boolean22 + ""' != '"" + false + ""'"", boolean22 == false);
        org.junit.Assert.assertNotNull(optionBuilder23);"
334,417,2069,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0418"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String str5 = commandLine0.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str7 = commandLine0.getOptionValue(""arg"");
        java.lang.String str9 = commandLine0.getOptionValue('a');
        java.lang.String str12 = commandLine0.getOptionValue(""[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]"", ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"");
        java.lang.Object obj14 = commandLine0.getOptionObject(' ');
        org.apache.commons.cli.Option[] optionArray15 = commandLine0.getOptions();
        java.lang.Object obj17 = commandLine0.getOptionObject('\000');
        boolean boolean19 = commandLine0.hasOption('#');
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertEquals(""'"" + str5 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str5, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"" + ""'"", str12, ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"");
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(optionArray15);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue(""'"" + boolean19 + ""' != '"" + false + ""'"", boolean19 == false);"
335,263,2035,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0264"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.Object obj4 = commandLine0.getOptionObject('a');
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        option6.setDescription("""");
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option11 = org.apache.commons.cli.OptionBuilder.create('4');
        option11.setDescription("""");
        org.apache.commons.cli.Options options14 = options9.addOption(option11);
        boolean boolean15 = option11.hasOptionalArg();
        option6.setType((java.lang.Object) boolean15);
        java.lang.String str17 = option6.getArgName();
        java.lang.Object obj18 = option6.getType();
        java.lang.String[] strArray19 = option6.getValues();
        commandLine0.addOption(option6);
        java.util.Iterator iterator21 = commandLine0.iterator();
        boolean boolean23 = commandLine0.hasOption('=');
        java.lang.Object obj25 = commandLine0.getOptionObject("""");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertNotNull(option11);
        org.junit.Assert.assertNotNull(options14);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertEquals(""'"" + str17 + ""' != '"" + ""arg"" + ""'"", str17, ""arg"");
        org.junit.Assert.assertEquals(""'"" + obj18 + ""' != '"" + false + ""'"", obj18, false);
        org.junit.Assert.assertNull(strArray19);
        org.junit.Assert.assertNotNull(iterator21);
        org.junit.Assert.assertTrue(""'"" + boolean23 + ""' != '"" + false + ""'"", boolean23 == false);
        org.junit.Assert.assertNull(obj25);"
336,185,2006,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0186"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.util.Iterator iterator3 = commandLine0.iterator();
        java.lang.String[] strArray5 = commandLine0.getOptionValues('a');
        java.lang.Object obj7 = commandLine0.getOptionObject('a');
        java.lang.Object obj9 = commandLine0.getOptionObject(""org.apache.commons.cli.MissingOptionException: hi!"");
        java.lang.String str12 = commandLine0.getOptionValue(""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"", ""[ option: 4  :: null ]"");
        java.lang.String[] strArray14 = commandLine0.getOptionValues('=');
        java.lang.String[] strArray16 = commandLine0.getOptionValues(""[ option: 4  :: null ::  ]"");
        boolean boolean18 = commandLine0.hasOption('#');
        java.lang.Object obj20 = commandLine0.getOptionObject('#');
        java.lang.String str23 = commandLine0.getOptionValue('=', ""org.apache.commons.cli.MissingArgumentException: [ option: 4  ::  ]"");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(iterator3);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ option: 4  :: null ]"" + ""'"", str12, ""[ option: 4  :: null ]"");
        org.junit.Assert.assertNull(strArray14);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertTrue(""'"" + boolean18 + ""' != '"" + false + ""'"", boolean18 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertEquals(""'"" + str23 + ""' != '"" + ""org.apache.commons.cli.MissingArgumentException: [ option: 4  ::  ]"" + ""'"", str23, ""org.apache.commons.cli.MissingArgumentException: [ option: 4  ::  ]"");"
337,447,1988,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0448"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue(""hi!"");
        boolean boolean7 = commandLine0.hasOption("""");
        commandLine0.addArg(""org.apache.commons.cli.UnrecognizedOptionException: hi!"");
        boolean boolean11 = commandLine0.hasOption(""[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create('4');
        option13.setDescription("""");
        org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = org.apache.commons.cli.OptionBuilder.create('4');
        option18.setDescription("""");
        org.apache.commons.cli.Options options21 = options16.addOption(option18);
        boolean boolean22 = option13.equals((java.lang.Object) option18);
        option18.setDescription(""[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]"");
        commandLine0.addOption(option18);
        java.lang.String[] strArray26 = option18.getValues();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(""'"" + boolean7 + ""' != '"" + false + ""'"", boolean7 == false);
        org.junit.Assert.assertTrue(""'"" + boolean11 + ""' != '"" + false + ""'"", boolean11 == false);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertNotNull(option18);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertTrue(""'"" + boolean22 + ""' != '"" + true + ""'"", boolean22 == true);
        org.junit.Assert.assertNull(strArray26);"
338,448,1993,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0449"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.util.Iterator iterator4 = commandLine0.iterator();
        java.lang.String str7 = commandLine0.getOptionValue(""[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]"", ""arg"");
        boolean boolean9 = commandLine0.hasOption(""[ option: 4  :: null ]"");
        java.lang.String[] strArray11 = commandLine0.getOptionValues("""");
        java.lang.String str14 = commandLine0.getOptionValue(""[ option: 4  :: null ]"", ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"");
        java.util.Iterator iterator15 = commandLine0.iterator();
        java.lang.String str18 = commandLine0.getOptionValue(""[ option: 4  :: [ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ] ]"", """");
        java.lang.String[] strArray19 = commandLine0.getArgs();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertEquals(""'"" + str7 + ""' != '"" + ""arg"" + ""'"", str7, ""arg"");
        org.junit.Assert.assertTrue(""'"" + boolean9 + ""' != '"" + false + ""'"", boolean9 == false);
        org.junit.Assert.assertNull(strArray11);
        org.junit.Assert.assertEquals(""'"" + str14 + ""' != '"" + ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"" + ""'"", str14, ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"");
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertEquals(""'"" + str18 + ""' != '"" + """" + ""'"", str18, """");
        org.junit.Assert.assertNotNull(strArray19);"
339,291,1690,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0292"");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('4');
        option1.setArgs((int) (short) 100);
        option1.setArgName(""[ option: 4  :: null ]"");
        java.lang.String str6 = option1.getLongOpt();
        java.lang.String str8 = option1.getValue((int) (short) -1);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray11 = commandLine9.getOptionValues(""hi!"");
        java.lang.String str14 = commandLine9.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str16 = commandLine9.getOptionValue(""arg"");
        java.lang.String[] strArray17 = commandLine9.getArgs();
        option1.setType((java.lang.Object) strArray17);
        java.lang.String str20 = option1.getValue((int) 'a');
        boolean boolean21 = option1.hasLongOpt();
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(strArray11);
        org.junit.Assert.assertEquals(""'"" + str14 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str14, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue(""'"" + boolean21 + ""' != '"" + false + ""'"", boolean21 == false);"
340,251,1943,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0252"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.util.Iterator iterator3 = commandLine0.iterator();
        java.lang.String[] strArray5 = commandLine0.getOptionValues('a');
        java.lang.Object obj7 = commandLine0.getOptionObject('a');
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option9.setLongOpt(""hi!"");
        commandLine0.addOption(option9);
        java.lang.Object obj15 = option9.getType();
        org.apache.commons.cli.Option option17 = org.apache.commons.cli.OptionBuilder.create('4');
        char char18 = option17.getValueSeparator();
        boolean boolean19 = option17.hasArg();
        java.lang.String str20 = option17.getValue();
        java.lang.String str22 = option17.getValue((int) ' ');
        boolean boolean23 = option9.equals((java.lang.Object) str22);
        int int24 = option9.getId();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(iterator3);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(option17);
        org.junit.Assert.assertTrue(""'"" + char18 + ""' != '"" + '\000' + ""'"", char18 == '\000');
        org.junit.Assert.assertTrue(""'"" + boolean19 + ""' != '"" + false + ""'"", boolean19 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue(""'"" + boolean23 + ""' != '"" + false + ""'"", boolean23 == false);
        org.junit.Assert.assertTrue(""'"" + int24 + ""' != '"" + 52 + ""'"", int24 == 52);"
341,328,2827,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0329"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String[] strArray10 = commandLine7.getArgs();
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser0.parse(options1, strArray10, properties11);
        org.apache.commons.cli.Option option14 = org.apache.commons.cli.OptionBuilder.create('4');
        option14.setDescription("""");
        boolean boolean17 = option14.isRequired();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        char char20 = option19.getValueSeparator();
        java.lang.String str21 = option19.getDescription();
        boolean boolean22 = option14.equals((java.lang.Object) option19);
        java.lang.String str23 = option14.toString();
        boolean boolean24 = option14.isRequired();
        option14.setRequired(false);
        java.util.ListIterator listIterator27 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option14, listIterator27);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertNotNull(option14);
        org.junit.Assert.assertTrue(""'"" + boolean17 + ""' != '"" + false + ""'"", boolean17 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertTrue(""'"" + char20 + ""' != '"" + '\000' + ""'"", char20 == '\000');
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue(""'"" + boolean22 + ""' != '"" + true + ""'"", boolean22 == true);
        org.junit.Assert.assertEquals(""'"" + str23 + ""' != '"" + ""[ option: 4  ::  ]"" + ""'"", str23, ""[ option: 4  ::  ]"");
        org.junit.Assert.assertTrue(""'"" + boolean24 + ""' != '"" + false + ""'"", boolean24 == false);"
342,429,1947,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0430"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.util.Iterator iterator4 = commandLine0.iterator();
        java.lang.String str6 = commandLine0.getOptionValue(""[ option:    :: null ]"");
        org.apache.commons.cli.Option option8 = org.apache.commons.cli.OptionBuilder.create('4');
        java.lang.String str10 = option8.getValue(""arg"");
        org.apache.commons.cli.MissingOptionException missingOptionException12 = new org.apache.commons.cli.MissingOptionException(""hi!"");
        boolean boolean13 = option8.equals((java.lang.Object) ""hi!"");
        option8.setValueSeparator('=');
        boolean boolean16 = option8.hasValueSeparator();
        java.lang.String str17 = option8.getArgName();
        commandLine0.addOption(option8);
        java.util.List list19 = option8.getValuesList();
        org.apache.commons.cli.OptionBuilder optionBuilder20 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) option8);
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(option8);
        org.junit.Assert.assertEquals(""'"" + str10 + ""' != '"" + ""arg"" + ""'"", str10, ""arg"");
        org.junit.Assert.assertTrue(""'"" + boolean13 + ""' != '"" + false + ""'"", boolean13 == false);
        org.junit.Assert.assertTrue(""'"" + boolean16 + ""' != '"" + true + ""'"", boolean16 == true);
        org.junit.Assert.assertEquals(""'"" + str17 + ""' != '"" + ""arg"" + ""'"", str17, ""arg"");
        org.junit.Assert.assertNotNull(list19);
        org.junit.Assert.assertNotNull(optionBuilder20);"
343,397,1636,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0398"");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('4');
        option1.setDescription("""");
        boolean boolean4 = option1.hasValueSeparator();
        java.util.List list5 = option1.getValuesList();
        int int6 = option1.getArgs();
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        option1.setType((java.lang.Object) commandLine7);
        char char11 = option1.getValueSeparator();
        option1.setArgName(""[ option: 4  :: null ::  ]"");
        java.lang.String str14 = option1.getOpt();
        java.lang.Object obj15 = null;
        option1.setType(obj15);
        option1.setRequired(true);
        org.apache.commons.cli.OptionBuilder optionBuilder20 = org.apache.commons.cli.OptionBuilder.withDescription(""[ option: 4  ::  :: [] ]"");
        option1.setType((java.lang.Object) optionBuilder20);
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertTrue(""'"" + boolean4 + ""' != '"" + false + ""'"", boolean4 == false);
        org.junit.Assert.assertNotNull(list5);
        org.junit.Assert.assertTrue(""'"" + int6 + ""' != '"" + (-1) + ""'"", int6 == (-1));
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertTrue(""'"" + char11 + ""' != '"" + '\000' + ""'"", char11 == '\000');
        org.junit.Assert.assertEquals(""'"" + str14 + ""' != '"" + ""4"" + ""'"", str14, ""4"");
        org.junit.Assert.assertNotNull(optionBuilder20);"
344,340,1913,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0341"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.util.Iterator iterator4 = commandLine0.iterator();
        java.lang.String str7 = commandLine0.getOptionValue(""[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]"", ""arg"");
        java.lang.String str9 = commandLine0.getOptionValue(""[ option:  +ARG ::  ]"");
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option12 = org.apache.commons.cli.OptionBuilder.create('4');
        option12.setDescription("""");
        org.apache.commons.cli.Options options15 = options10.addOption(option12);
        java.util.List list16 = option12.getValuesList();
        boolean boolean17 = option12.hasArgs();
        commandLine0.addOption(option12);
        option12.setArgs((int) (byte) 1);
        boolean boolean21 = option12.hasArg();
        boolean boolean22 = option12.hasArgs();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertEquals(""'"" + str7 + ""' != '"" + ""arg"" + ""'"", str7, ""arg"");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(option12);
        org.junit.Assert.assertNotNull(options15);
        org.junit.Assert.assertNotNull(list16);
        org.junit.Assert.assertTrue(""'"" + boolean17 + ""' != '"" + false + ""'"", boolean17 == false);
        org.junit.Assert.assertTrue(""'"" + boolean21 + ""' != '"" + true + ""'"", boolean21 == true);
        org.junit.Assert.assertTrue(""'"" + boolean22 + ""' != '"" + false + ""'"", boolean22 == false);"
345,382,3396,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0383"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("""");
        option27.setType((java.lang.Object) """");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        java.util.Collection collection35 = options22.getOptions();
        java.lang.String[] strArray36 = null;
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options22, strArray36, properties37, false);
        java.lang.Class<?> wildcardClass40 = options22.getClass();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue(""'"" + char28 + ""' != '"" + '\000' + ""'"", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertNotNull(collection35);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(wildcardClass40);"
346,413,1868,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0414"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue('\000');
        java.lang.Object obj7 = commandLine0.getOptionObject("""");
        java.lang.String[] strArray9 = commandLine0.getOptionValues(""org.apache.commons.cli.MissingOptionException: hi!"");
        java.lang.String str11 = commandLine0.getOptionValue('\000');
        java.lang.String[] strArray12 = commandLine0.getArgs();
        java.lang.String[] strArray14 = commandLine0.getOptionValues(""[ option: 4  :: org.apache.commons.cli.ParseException: arg ]"");
        java.lang.String str17 = commandLine0.getOptionValue(""[ option:    :: null :: arg ]"", ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNull(strArray14);
        org.junit.Assert.assertEquals(""'"" + str17 + ""' != '"" + ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"" + ""'"", str17, ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"");"
347,479,1517,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0480"");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create(' ');
        boolean boolean2 = option1.hasArgName();
        boolean boolean3 = option1.hasArgName();
        boolean boolean4 = option1.hasOptionalArg();
        java.lang.Object obj5 = option1.getType();
        option1.setLongOpt(""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.apache.commons.cli.CommandLine commandLine8 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine8.getOptionValues(""hi!"");
        java.lang.String[] strArray11 = commandLine8.getArgs();
        option1.setType((java.lang.Object) strArray11);
        java.util.List list13 = option1.getValuesList();
        java.lang.String str14 = option1.getArgName();
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertTrue(""'"" + boolean2 + ""' != '"" + true + ""'"", boolean2 == true);
        org.junit.Assert.assertTrue(""'"" + boolean3 + ""' != '"" + true + ""'"", boolean3 == true);
        org.junit.Assert.assertTrue(""'"" + boolean4 + ""' != '"" + false + ""'"", boolean4 == false);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertEquals(""'"" + str14 + ""' != '"" + ""arg"" + ""'"", str14, ""arg"");"
348,338,1934,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0339"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String str5 = commandLine0.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str7 = commandLine0.getOptionValue(""arg"");
        java.lang.Object obj9 = commandLine0.getOptionObject('a');
        java.lang.String[] strArray11 = commandLine0.getOptionValues('=');
        java.lang.String[] strArray12 = commandLine0.getArgs();
        java.lang.String[] strArray13 = commandLine0.getArgs();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("""", ""[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]"", false, ""hi!"");
        commandLine0.addOption(option18);
        java.lang.String str21 = option18.getValue(""[ Options: [ short {4=[ option: 4  ::  :: [ option: arg [ option: 4  :: null ] +ARG :: 4 ] ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertEquals(""'"" + str5 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str5, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertEquals(""'"" + str21 + ""' != '"" + ""[ Options: [ short {4=[ option: 4  ::  :: [ option: arg [ option: 4  :: null ] +ARG :: 4 ] ]} ] [ long {} ]"" + ""'"", str21, ""[ Options: [ short {4=[ option: 4  ::  :: [ option: arg [ option: 4  :: null ] +ARG :: 4 ] ]} ] [ long {} ]"");"
349,283,2627,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0284"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine8 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine8.getOptionValues(""hi!"");
        java.lang.String str13 = commandLine8.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str15 = commandLine8.getOptionValue(""arg"");
        java.lang.String[] strArray16 = commandLine8.getArgs();
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser0.parse(options1, strArray16, properties17);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options22 = options1.addOption(""[ option: 4  :: null :: [ option: arg [ option: 4  :: null ] +ARG :: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ] ]"", true, ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"");
            org.junit.Assert.fail(""Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertEquals(""'"" + str13 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str13, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);"
350,238,1532,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0239"");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('4');
        option1.setArgs((int) (short) 100);
        option1.setArgName(""[ option: 4  :: null ]"");
        java.lang.String str6 = option1.getLongOpt();
        java.lang.String str8 = option1.getValue((int) (short) -1);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray11 = commandLine9.getOptionValues(""hi!"");
        java.lang.String str14 = commandLine9.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str16 = commandLine9.getOptionValue(""arg"");
        java.lang.String[] strArray17 = commandLine9.getArgs();
        option1.setType((java.lang.Object) strArray17);
        java.lang.String str19 = option1.getValue();
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(strArray11);
        org.junit.Assert.assertEquals(""'"" + str14 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str14, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNull(str19);"
351,142,1545,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0143"");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('4');
        option1.setArgs((int) (short) 100);
        option1.setArgName(""[ option: 4  :: null ]"");
        java.lang.String str6 = option1.getLongOpt();
        java.lang.String str8 = option1.getValue((int) (short) -1);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray11 = commandLine9.getOptionValues(""hi!"");
        java.lang.String str14 = commandLine9.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str16 = commandLine9.getOptionValue(""arg"");
        java.lang.String[] strArray17 = commandLine9.getArgs();
        option1.setType((java.lang.Object) strArray17);
        java.lang.String[] strArray19 = option1.getValues();
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(strArray11);
        org.junit.Assert.assertEquals(""'"" + str14 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str14, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNull(strArray19);"
352,70,3116,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0071"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        java.util.Collection collection22 = options6.getOptions();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create('4');
        option24.setArgs((int) (short) 100);
        option24.setArgName(""[ option: 4  :: null ]"");
        java.lang.String str29 = option24.getLongOpt();
        java.lang.String str31 = option24.getValue((int) (short) -1);
        org.apache.commons.cli.Options options32 = options6.addOption(option24);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options37 = options32.addOption(""org.apache.commons.cli.MissingArgumentException: [ option:    :: null ]"", ""[ option: 4  :: null ::  ]"", false, ""org.apache.commons.cli.MissingOptionException: hi!"");
            org.junit.Assert.fail(""Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '.'"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(collection22);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(options32);"
353,411,3290,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0412"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("""");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("""");
        option26.setLongOpt(""hi!"");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues(""hi!"");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        java.lang.Object obj41 = commandLine39.getOptionObject(' ');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue(""'"" + boolean31 + ""' != '"" + true + ""'"", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNull(obj41);"
354,410,1866,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0411"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue(""hi!"");
        boolean boolean7 = commandLine0.hasOption("""");
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        boolean boolean14 = option10.hasValueSeparator();
        boolean boolean15 = option10.hasOptionalArg();
        java.lang.String str16 = option10.getOpt();
        commandLine0.addOption(option10);
        java.lang.String str19 = commandLine0.getOptionValue(""org.apache.commons.cli.MissingArgumentException: [ option:    :: null ]"");
        java.util.List list20 = commandLine0.getArgList();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(""'"" + boolean7 + ""' != '"" + false + ""'"", boolean7 == false);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertTrue(""'"" + boolean14 + ""' != '"" + false + ""'"", boolean14 == false);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);
        org.junit.Assert.assertEquals(""'"" + str16 + ""' != '"" + ""4"" + ""'"", str16, ""4"");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(list20);"
355,357,1890,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0358"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue(""hi!"");
        boolean boolean7 = commandLine0.hasOption("""");
        java.lang.String str10 = commandLine0.getOptionValue(""[ option: 4  :: null ]"", ""org.apache.commons.cli.MissingOptionException: hi!"");
        java.lang.String[] strArray12 = commandLine0.getOptionValues('4');
        java.lang.String[] strArray14 = commandLine0.getOptionValues('a');
        org.apache.commons.cli.Option option16 = org.apache.commons.cli.OptionBuilder.create(' ');
        boolean boolean17 = option16.hasArgName();
        boolean boolean18 = option16.hasArgName();
        commandLine0.addOption(option16);
        java.lang.String str21 = option16.getValue((int) 'a');
        option16.setValueSeparator('a');
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(""'"" + boolean7 + ""' != '"" + false + ""'"", boolean7 == false);
        org.junit.Assert.assertEquals(""'"" + str10 + ""' != '"" + ""org.apache.commons.cli.MissingOptionException: hi!"" + ""'"", str10, ""org.apache.commons.cli.MissingOptionException: hi!"");
        org.junit.Assert.assertNull(strArray12);
        org.junit.Assert.assertNull(strArray14);
        org.junit.Assert.assertNotNull(option16);
        org.junit.Assert.assertTrue(""'"" + boolean17 + ""' != '"" + true + ""'"", boolean17 == true);
        org.junit.Assert.assertTrue(""'"" + boolean18 + ""' != '"" + true + ""'"", boolean18 == true);
        org.junit.Assert.assertNull(str21);"
356,369,1513,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0370"");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('4');
        option1.setDescription("""");
        boolean boolean4 = option1.hasValueSeparator();
        java.lang.String str5 = option1.getValue();
        option1.setArgs((int) '\000');
        boolean boolean8 = option1.hasValueSeparator();
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray11 = commandLine9.getOptionValues(""hi!"");
        java.util.Iterator iterator12 = commandLine9.iterator();
        java.lang.String[] strArray14 = commandLine9.getOptionValues('a');
        org.apache.commons.cli.Option[] optionArray15 = commandLine9.getOptions();
        option1.setType((java.lang.Object) optionArray15);
        option1.setRequired(true);
        java.lang.String str20 = option1.getValue((int) (short) 1);
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertTrue(""'"" + boolean4 + ""' != '"" + false + ""'"", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(""'"" + boolean8 + ""' != '"" + false + ""'"", boolean8 == false);
        org.junit.Assert.assertNull(strArray11);
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertNull(strArray14);
        org.junit.Assert.assertNotNull(optionArray15);
        org.junit.Assert.assertNull(str20);"
357,403,1829,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0404"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.util.Iterator iterator3 = commandLine0.iterator();
        java.lang.String[] strArray5 = commandLine0.getOptionValues('a');
        java.lang.Object obj7 = commandLine0.getOptionObject('a');
        java.lang.Object obj9 = commandLine0.getOptionObject(""org.apache.commons.cli.MissingOptionException: hi!"");
        java.lang.String str12 = commandLine0.getOptionValue(""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"", ""[ option: 4  :: null ]"");
        java.lang.String[] strArray14 = commandLine0.getOptionValues('=');
        java.lang.String[] strArray16 = commandLine0.getOptionValues("""");
        java.util.Iterator iterator17 = commandLine0.iterator();
        java.lang.String str20 = commandLine0.getOptionValue('a', ""4"");
        org.apache.commons.cli.Option[] optionArray21 = commandLine0.getOptions();
        commandLine0.addArg(""[ option:  +ARG ::  :: [] ]"");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(iterator3);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ option: 4  :: null ]"" + ""'"", str12, ""[ option: 4  :: null ]"");
        org.junit.Assert.assertNull(strArray14);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(iterator17);
        org.junit.Assert.assertEquals(""'"" + str20 + ""' != '"" + ""4"" + ""'"", str20, ""4"");
        org.junit.Assert.assertNotNull(optionArray21);"
358,216,1456,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0217"");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('4');
        option1.setDescription("""");
        boolean boolean4 = option1.hasValueSeparator();
        java.util.List list5 = option1.getValuesList();
        int int6 = option1.getArgs();
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        option1.setType((java.lang.Object) commandLine7);
        char char11 = option1.getValueSeparator();
        option1.setArgName(""[ option: 4  :: null ::  ]"");
        java.lang.String str14 = option1.getOpt();
        java.lang.Object obj15 = null;
        boolean boolean16 = option1.equals(obj15);
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertTrue(""'"" + boolean4 + ""' != '"" + false + ""'"", boolean4 == false);
        org.junit.Assert.assertNotNull(list5);
        org.junit.Assert.assertTrue(""'"" + int6 + ""' != '"" + (-1) + ""'"", int6 == (-1));
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertTrue(""'"" + char11 + ""' != '"" + '\000' + ""'"", char11 == '\000');
        org.junit.Assert.assertEquals(""'"" + str14 + ""' != '"" + ""4"" + ""'"", str14, ""4"");
        org.junit.Assert.assertTrue(""'"" + boolean16 + ""' != '"" + false + ""'"", boolean16 == false);"
359,249,1781,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0250"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.Object obj4 = commandLine0.getOptionObject('a');
        java.lang.String str7 = commandLine0.getOptionValue('\000', """");
        org.apache.commons.cli.Option[] optionArray8 = commandLine0.getOptions();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        boolean boolean11 = option10.hasOptionalArg();
        java.lang.String str13 = option10.getValue(""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        option10.setLongOpt(""[ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ]"");
        boolean boolean16 = option10.isRequired();
        commandLine0.addOption(option10);
        java.lang.Object obj19 = commandLine0.getOptionObject('=');
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertEquals(""'"" + str7 + ""' != '"" + """" + ""'"", str7, """");
        org.junit.Assert.assertNotNull(optionArray8);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertTrue(""'"" + boolean11 + ""' != '"" + false + ""'"", boolean11 == false);
        org.junit.Assert.assertEquals(""'"" + str13 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str13, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertTrue(""'"" + boolean16 + ""' != '"" + false + ""'"", boolean16 == false);
        org.junit.Assert.assertNull(obj19);"
360,455,1502,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0456"");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('4');
        option1.setDescription("""");
        boolean boolean4 = option1.hasValueSeparator();
        java.util.List list5 = option1.getValuesList();
        int int6 = option1.getArgs();
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        option1.setType((java.lang.Object) commandLine7);
        java.util.List list11 = commandLine7.getArgList();
        java.lang.String str14 = commandLine7.getOptionValue(""[ option: 4  :: null ::  ]"", ""org.apache.commons.cli.UnrecognizedOptionException: hi!"");
        java.lang.String[] strArray16 = commandLine7.getOptionValues('a');
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertTrue(""'"" + boolean4 + ""' != '"" + false + ""'"", boolean4 == false);
        org.junit.Assert.assertNotNull(list5);
        org.junit.Assert.assertTrue(""'"" + int6 + ""' != '"" + (-1) + ""'"", int6 == (-1));
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertEquals(""'"" + str14 + ""' != '"" + ""org.apache.commons.cli.UnrecognizedOptionException: hi!"" + ""'"", str14, ""org.apache.commons.cli.UnrecognizedOptionException: hi!"");
        org.junit.Assert.assertNull(strArray16);"
361,256,1766,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0257"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue(""hi!"");
        java.util.List list6 = commandLine0.getArgList();
        java.lang.Object obj8 = commandLine0.getOptionObject(""[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]"");
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray11 = commandLine9.getOptionValues(""hi!"");
        java.lang.String[] strArray12 = commandLine9.getArgs();
        java.lang.String str14 = commandLine9.getOptionValue(""hi!"");
        org.apache.commons.cli.Option option16 = org.apache.commons.cli.OptionBuilder.create(' ');
        commandLine9.addOption(option16);
        commandLine0.addOption(option16);
        java.lang.Object obj20 = commandLine0.getOptionObject(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(list6);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(option16);
        org.junit.Assert.assertNull(obj20);"
362,464,1395,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0465"");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('4');
        option1.setDescription("""");
        boolean boolean4 = option1.hasValueSeparator();
        java.util.List list5 = option1.getValuesList();
        int int6 = option1.getArgs();
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        option1.setType((java.lang.Object) commandLine7);
        commandLine7.addArg(""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.util.List list13 = commandLine7.getArgList();
        java.lang.Object obj15 = commandLine7.getOptionObject('a');
        commandLine7.addArg(""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!"");
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertTrue(""'"" + boolean4 + ""' != '"" + false + ""'"", boolean4 == false);
        org.junit.Assert.assertNotNull(list5);
        org.junit.Assert.assertTrue(""'"" + int6 + ""' != '"" + (-1) + ""'"", int6 == (-1));
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNull(obj15);"
363,178,1722,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0179"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue(""hi!"");
        boolean boolean7 = commandLine0.hasOption("""");
        commandLine0.addArg(""org.apache.commons.cli.UnrecognizedOptionException: hi!"");
        boolean boolean11 = commandLine0.hasOption(""[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("""");
        java.lang.String str15 = option13.getValue("""");
        commandLine0.addOption(option13);
        java.util.List list17 = commandLine0.getArgList();
        java.lang.String str19 = commandLine0.getOptionValue(""org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(""'"" + boolean7 + ""' != '"" + false + ""'"", boolean7 == false);
        org.junit.Assert.assertTrue(""'"" + boolean11 + ""' != '"" + false + ""'"", boolean11 == false);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals(""'"" + str15 + ""' != '"" + """" + ""'"", str15, """");
        org.junit.Assert.assertNotNull(list17);
        org.junit.Assert.assertNull(str19);"
364,376,1729,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0377"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue(""hi!"");
        java.util.List list6 = commandLine0.getArgList();
        java.lang.Object obj8 = commandLine0.getOptionObject(""[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]"");
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray11 = commandLine9.getOptionValues(""hi!"");
        java.lang.String[] strArray12 = commandLine9.getArgs();
        java.lang.String str14 = commandLine9.getOptionValue(""hi!"");
        org.apache.commons.cli.Option option16 = org.apache.commons.cli.OptionBuilder.create(' ');
        commandLine9.addOption(option16);
        commandLine0.addOption(option16);
        java.lang.String[] strArray20 = commandLine0.getOptionValues('a');
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(list6);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(option16);
        org.junit.Assert.assertNull(strArray20);"
365,79,2929,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0080"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup21 = options18.getOptionGroup(option20);
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        org.apache.commons.cli.OptionGroup optionGroup24 = options18.getOptionGroup(option23);
        java.util.List list25 = options18.getRequiredOptions();
        java.util.Collection collection26 = options18.getOptionGroups();
        java.lang.String[] strArray27 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray29 = posixParser0.flatten(options18, strArray27, true);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNull(optionGroup21);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNull(optionGroup24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNotNull(collection26);"
366,351,1321,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0352"");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('4');
        option1.setDescription("""");
        boolean boolean4 = option1.hasValueSeparator();
        java.util.List list5 = option1.getValuesList();
        int int6 = option1.getArgs();
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        option1.setType((java.lang.Object) commandLine7);
        char char11 = option1.getValueSeparator();
        option1.setArgName(""[ option: 4  :: null ::  ]"");
        boolean boolean14 = option1.hasValueSeparator();
        option1.setArgs((int) '4');
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertTrue(""'"" + boolean4 + ""' != '"" + false + ""'"", boolean4 == false);
        org.junit.Assert.assertNotNull(list5);
        org.junit.Assert.assertTrue(""'"" + int6 + ""' != '"" + (-1) + ""'"", int6 == (-1));
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertTrue(""'"" + char11 + ""' != '"" + '\000' + ""'"", char11 == '\000');
        org.junit.Assert.assertTrue(""'"" + boolean14 + ""' != '"" + false + ""'"", boolean14 == false);"
367,301,1549,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0302"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        boolean boolean2 = commandLine0.hasOption('4');
        org.apache.commons.cli.Option option4 = org.apache.commons.cli.OptionBuilder.create('4');
        char char5 = option4.getValueSeparator();
        boolean boolean6 = option4.hasArg();
        boolean boolean7 = option4.hasOptionalArg();
        java.lang.String str9 = option4.getValue(0);
        java.lang.String[] strArray10 = option4.getValues();
        int int11 = option4.getId();
        commandLine0.addOption(option4);
        int int13 = option4.getArgs();
        java.lang.String str14 = option4.getKey();
        org.junit.Assert.assertTrue(""'"" + boolean2 + ""' != '"" + false + ""'"", boolean2 == false);
        org.junit.Assert.assertNotNull(option4);
        org.junit.Assert.assertTrue(""'"" + char5 + ""' != '"" + '\000' + ""'"", char5 == '\000');
        org.junit.Assert.assertTrue(""'"" + boolean6 + ""' != '"" + false + ""'"", boolean6 == false);
        org.junit.Assert.assertTrue(""'"" + boolean7 + ""' != '"" + false + ""'"", boolean7 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertTrue(""'"" + int11 + ""' != '"" + 52 + ""'"", int11 == 52);
        org.junit.Assert.assertTrue(""'"" + int13 + ""' != '"" + (-1) + ""'"", int13 == (-1));
        org.junit.Assert.assertEquals(""'"" + str14 + ""' != '"" + ""4"" + ""'"", str14, ""4"");"
368,329,1718,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0330"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String str5 = commandLine0.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str7 = commandLine0.getOptionValue(""arg"");
        java.lang.Object obj9 = commandLine0.getOptionObject('a');
        java.lang.String[] strArray11 = commandLine0.getOptionValues('=');
        java.lang.String[] strArray12 = commandLine0.getArgs();
        java.lang.String[] strArray13 = commandLine0.getArgs();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("""", ""[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]"", false, ""hi!"");
        commandLine0.addOption(option18);
        java.lang.String str21 = option18.getValue(""[ Options: [ short {} ] [ long {} ]"");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertEquals(""'"" + str5 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str5, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertEquals(""'"" + str21 + ""' != '"" + ""[ Options: [ short {} ] [ long {} ]"" + ""'"", str21, ""[ Options: [ short {} ] [ long {} ]"");"
369,287,1664,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0288"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.util.Iterator iterator4 = commandLine0.iterator();
        java.lang.String str7 = commandLine0.getOptionValue(""[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]"", ""arg"");
        boolean boolean9 = commandLine0.hasOption('#');
        java.lang.String str11 = commandLine0.getOptionValue('a');
        org.apache.commons.cli.Option[] optionArray12 = commandLine0.getOptions();
        java.util.Iterator iterator13 = commandLine0.iterator();
        java.lang.Object obj15 = commandLine0.getOptionObject(""[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]"");
        java.lang.String str17 = commandLine0.getOptionValue(' ');
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertEquals(""'"" + str7 + ""' != '"" + ""arg"" + ""'"", str7, ""arg"");
        org.junit.Assert.assertTrue(""'"" + boolean9 + ""' != '"" + false + ""'"", boolean9 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(optionArray12);
        org.junit.Assert.assertNotNull(iterator13);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(str17);"
370,326,1677,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0327"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.util.Iterator iterator3 = commandLine0.iterator();
        java.lang.String[] strArray5 = commandLine0.getOptionValues('a');
        java.lang.Object obj7 = commandLine0.getOptionObject('a');
        java.lang.Object obj9 = commandLine0.getOptionObject(""org.apache.commons.cli.MissingOptionException: hi!"");
        java.lang.String str12 = commandLine0.getOptionValue(""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"", ""[ option: 4  :: null ]"");
        java.lang.String[] strArray14 = commandLine0.getOptionValues('=');
        java.lang.String[] strArray16 = commandLine0.getOptionValues(""[ option: 4  :: null ::  ]"");
        boolean boolean18 = commandLine0.hasOption('#');
        commandLine0.addArg(""[ Options: [ short {4=[ option: 4  ::  :: [ option: arg [ option: 4  :: null ] +ARG :: 4 ] ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(iterator3);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ option: 4  :: null ]"" + ""'"", str12, ""[ option: 4  :: null ]"");
        org.junit.Assert.assertNull(strArray14);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertTrue(""'"" + boolean18 + ""' != '"" + false + ""'"", boolean18 == false);"
371,388,2969,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0389"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        java.util.Collection collection22 = options6.getOptions();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create('4');
        option24.setArgs((int) (short) 100);
        option24.setArgName(""[ option: 4  :: null ]"");
        java.lang.String str29 = option24.getLongOpt();
        java.lang.String str31 = option24.getValue((int) (short) -1);
        org.apache.commons.cli.Options options32 = options6.addOption(option24);
        java.util.List list33 = option24.getValuesList();
        java.lang.String str35 = option24.getValue(""[ option:    :: null ]"");
        int int36 = option24.getArgs();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(collection22);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNotNull(list33);
        org.junit.Assert.assertEquals(""'"" + str35 + ""' != '"" + ""[ option:    :: null ]"" + ""'"", str35, ""[ option:    :: null ]"");
        org.junit.Assert.assertTrue(""'"" + int36 + ""' != '"" + 100 + ""'"", int36 == 100);"
372,56,2460,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0057"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine8 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine8.getOptionValues(""hi!"");
        java.lang.String str13 = commandLine8.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str15 = commandLine8.getOptionValue(""arg"");
        java.lang.String[] strArray16 = commandLine8.getArgs();
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser0.parse(options1, strArray16, properties17);
        org.apache.commons.cli.Options options23 = options1.addOption("" "", """", true, ""org.apache.commons.cli.UnrecognizedOptionException: hi!"");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options27 = options1.addOption(""[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]"", false, """");
            org.junit.Assert.fail(""Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertEquals(""'"" + str13 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str13, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(options23);"
373,271,1660,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0272"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.util.Iterator iterator4 = commandLine0.iterator();
        java.lang.String str7 = commandLine0.getOptionValue(""[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]"", ""arg"");
        boolean boolean9 = commandLine0.hasOption('#');
        java.lang.String str11 = commandLine0.getOptionValue('a');
        org.apache.commons.cli.Option[] optionArray12 = commandLine0.getOptions();
        java.util.Iterator iterator13 = commandLine0.iterator();
        java.lang.Object obj15 = commandLine0.getOptionObject(""[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]"");
        java.util.List list16 = commandLine0.getArgList();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertEquals(""'"" + str7 + ""' != '"" + ""arg"" + ""'"", str7, ""arg"");
        org.junit.Assert.assertTrue(""'"" + boolean9 + ""' != '"" + false + ""'"", boolean9 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(optionArray12);
        org.junit.Assert.assertNotNull(iterator13);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(list16);"
374,152,1081,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0153"");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('4');
        option1.setDescription("""");
        boolean boolean4 = option1.hasValueSeparator();
        java.util.List list5 = option1.getValuesList();
        int int6 = option1.getArgs();
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        option1.setType((java.lang.Object) commandLine7);
        java.lang.String str13 = commandLine7.getOptionValue('a', """");
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertTrue(""'"" + boolean4 + ""' != '"" + false + ""'"", boolean4 == false);
        org.junit.Assert.assertNotNull(list5);
        org.junit.Assert.assertTrue(""'"" + int6 + ""' != '"" + (-1) + ""'"", int6 == (-1));
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str13 + ""' != '"" + """" + ""'"", str13, """");"
375,343,1625,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0344"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.util.Iterator iterator3 = commandLine0.iterator();
        java.lang.String[] strArray5 = commandLine0.getOptionValues('a');
        java.lang.Object obj7 = commandLine0.getOptionObject('a');
        java.lang.Object obj9 = commandLine0.getOptionObject(""org.apache.commons.cli.MissingOptionException: hi!"");
        java.lang.String str12 = commandLine0.getOptionValue(""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"", ""[ option: 4  :: null ]"");
        java.lang.String[] strArray14 = commandLine0.getOptionValues('=');
        java.lang.String[] strArray16 = commandLine0.getOptionValues("""");
        java.lang.String str18 = commandLine0.getOptionValue('4');
        boolean boolean20 = commandLine0.hasOption('\000');
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(iterator3);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ option: 4  :: null ]"" + ""'"", str12, ""[ option: 4  :: null ]"");
        org.junit.Assert.assertNull(strArray14);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue(""'"" + boolean20 + ""' != '"" + false + ""'"", boolean20 == false);"
376,242,1462,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0243"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        boolean boolean2 = commandLine0.hasOption('4');
        org.apache.commons.cli.Option option4 = org.apache.commons.cli.OptionBuilder.create('4');
        char char5 = option4.getValueSeparator();
        boolean boolean6 = option4.hasArg();
        boolean boolean7 = option4.hasOptionalArg();
        java.lang.String str9 = option4.getValue(0);
        java.lang.String[] strArray10 = option4.getValues();
        int int11 = option4.getId();
        commandLine0.addOption(option4);
        commandLine0.addArg(""[ option: 4  :: null ]"");
        java.lang.String[] strArray16 = commandLine0.getOptionValues(' ');
        org.junit.Assert.assertTrue(""'"" + boolean2 + ""' != '"" + false + ""'"", boolean2 == false);
        org.junit.Assert.assertNotNull(option4);
        org.junit.Assert.assertTrue(""'"" + char5 + ""' != '"" + '\000' + ""'"", char5 == '\000');
        org.junit.Assert.assertTrue(""'"" + boolean6 + ""' != '"" + false + ""'"", boolean6 == false);
        org.junit.Assert.assertTrue(""'"" + boolean7 + ""' != '"" + false + ""'"", boolean7 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertTrue(""'"" + int11 + ""' != '"" + 52 + ""'"", int11 == 52);
        org.junit.Assert.assertNull(strArray16);"
377,366,1493,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0367"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        boolean boolean2 = commandLine0.hasOption('4');
        org.apache.commons.cli.Option option4 = org.apache.commons.cli.OptionBuilder.create('4');
        char char5 = option4.getValueSeparator();
        boolean boolean6 = option4.hasArg();
        boolean boolean7 = option4.hasOptionalArg();
        java.lang.String str9 = option4.getValue(0);
        java.lang.String[] strArray10 = option4.getValues();
        int int11 = option4.getId();
        commandLine0.addOption(option4);
        commandLine0.addArg(""[ option: 4  :: null ]"");
        boolean boolean16 = commandLine0.hasOption("""");
        org.junit.Assert.assertTrue(""'"" + boolean2 + ""' != '"" + false + ""'"", boolean2 == false);
        org.junit.Assert.assertNotNull(option4);
        org.junit.Assert.assertTrue(""'"" + char5 + ""' != '"" + '\000' + ""'"", char5 == '\000');
        org.junit.Assert.assertTrue(""'"" + boolean6 + ""' != '"" + false + ""'"", boolean6 == false);
        org.junit.Assert.assertTrue(""'"" + boolean7 + ""' != '"" + false + ""'"", boolean7 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertTrue(""'"" + int11 + ""' != '"" + 52 + ""'"", int11 == 52);
        org.junit.Assert.assertTrue(""'"" + boolean16 + ""' != '"" + false + ""'"", boolean16 == false);"
378,451,1637,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0452"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue(""hi!"");
        boolean boolean7 = commandLine0.hasOption("""");
        java.lang.String str10 = commandLine0.getOptionValue(""[ option: 4  :: null ]"", ""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.Option[] optionArray11 = commandLine0.getOptions();
        java.lang.Object obj13 = commandLine0.getOptionObject('=');
        java.lang.String str16 = commandLine0.getOptionValue(' ', """");
        java.lang.Object obj18 = commandLine0.getOptionObject('4');
        java.lang.Object obj20 = commandLine0.getOptionObject('a');
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(""'"" + boolean7 + ""' != '"" + false + ""'"", boolean7 == false);
        org.junit.Assert.assertEquals(""'"" + str10 + ""' != '"" + ""org.apache.commons.cli.MissingOptionException: hi!"" + ""'"", str10, ""org.apache.commons.cli.MissingOptionException: hi!"");
        org.junit.Assert.assertNotNull(optionArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertEquals(""'"" + str16 + ""' != '"" + """" + ""'"", str16, """");
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj20);"
379,35,2427,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0036"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine8 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine8.getOptionValues(""hi!"");
        java.lang.String str13 = commandLine8.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str15 = commandLine8.getOptionValue(""arg"");
        java.lang.String[] strArray16 = commandLine8.getArgs();
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser0.parse(options1, strArray16, properties17);
        org.apache.commons.cli.Options options23 = options1.addOption("" "", """", true, ""org.apache.commons.cli.UnrecognizedOptionException: hi!"");
        org.apache.commons.cli.OptionGroup optionGroup24 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options25 = options1.addOptionGroup(optionGroup24);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertEquals(""'"" + str13 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str13, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(options23);"
380,179,1421,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0180"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        boolean boolean2 = commandLine0.hasOption('4');
        org.apache.commons.cli.Option option4 = org.apache.commons.cli.OptionBuilder.create('4');
        char char5 = option4.getValueSeparator();
        boolean boolean6 = option4.hasArg();
        boolean boolean7 = option4.hasOptionalArg();
        java.lang.String str9 = option4.getValue(0);
        java.lang.String[] strArray10 = option4.getValues();
        int int11 = option4.getId();
        commandLine0.addOption(option4);
        java.lang.String str13 = option4.getOpt();
        org.junit.Assert.assertTrue(""'"" + boolean2 + ""' != '"" + false + ""'"", boolean2 == false);
        org.junit.Assert.assertNotNull(option4);
        org.junit.Assert.assertTrue(""'"" + char5 + ""' != '"" + '\000' + ""'"", char5 == '\000');
        org.junit.Assert.assertTrue(""'"" + boolean6 + ""' != '"" + false + ""'"", boolean6 == false);
        org.junit.Assert.assertTrue(""'"" + boolean7 + ""' != '"" + false + ""'"", boolean7 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertTrue(""'"" + int11 + ""' != '"" + 52 + ""'"", int11 == 52);
        org.junit.Assert.assertEquals(""'"" + str13 + ""' != '"" + ""4"" + ""'"", str13, ""4"");"
381,215,2426,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0216"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine8 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine8.getOptionValues(""hi!"");
        java.lang.String str13 = commandLine8.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str15 = commandLine8.getOptionValue(""arg"");
        java.lang.String[] strArray16 = commandLine8.getArgs();
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser0.parse(options1, strArray16, properties17);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options22 = options1.addOption(""[ option: 4  :: null :: [ option:   [ option: 4  ::  ]  :: null ] ]"", false, ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"");
            org.junit.Assert.fail(""Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertEquals(""'"" + str13 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str13, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);"
382,349,1599,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0350"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String str5 = commandLine0.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str7 = commandLine0.getOptionValue(""arg"");
        java.lang.Object obj9 = commandLine0.getOptionObject('a');
        java.lang.String[] strArray11 = commandLine0.getOptionValues('=');
        java.lang.String[] strArray12 = commandLine0.getArgs();
        java.lang.String[] strArray13 = commandLine0.getArgs();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("""", ""[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]"", false, ""hi!"");
        commandLine0.addOption(option18);
        java.lang.Class<?> wildcardClass20 = commandLine0.getClass();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertEquals(""'"" + str5 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str5, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(wildcardClass20);"
383,379,1526,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0380"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String str5 = commandLine0.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str7 = commandLine0.getOptionValue(""arg"");
        java.lang.Object obj9 = commandLine0.getOptionObject('a');
        java.lang.String[] strArray11 = commandLine0.getOptionValues('=');
        java.lang.String[] strArray12 = commandLine0.getArgs();
        java.lang.String[] strArray13 = commandLine0.getArgs();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("""", ""[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]"", false, ""hi!"");
        commandLine0.addOption(option18);
        option18.setArgName(""[ option: 4  :: hi! ]"");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertEquals(""'"" + str5 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str5, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);"
384,44,1462,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0045"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue(""hi!"");
        boolean boolean7 = commandLine0.hasOption("""");
        java.lang.String str10 = commandLine0.getOptionValue(""[ option: 4  :: null ]"", ""org.apache.commons.cli.MissingOptionException: hi!"");
        java.lang.String str13 = commandLine0.getOptionValue(""[ option:    :: null ]"", ""[ option: 4  :: null ]"");
        org.apache.commons.cli.OptionBuilder optionBuilder14 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) ""[ option: 4  :: null ]"");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(""'"" + boolean7 + ""' != '"" + false + ""'"", boolean7 == false);
        org.junit.Assert.assertEquals(""'"" + str10 + ""' != '"" + ""org.apache.commons.cli.MissingOptionException: hi!"" + ""'"", str10, ""org.apache.commons.cli.MissingOptionException: hi!"");
        org.junit.Assert.assertEquals(""'"" + str13 + ""' != '"" + ""[ option: 4  :: null ]"" + ""'"", str13, ""[ option: 4  :: null ]"");
        org.junit.Assert.assertNotNull(optionBuilder14);"
385,469,335,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0470"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        boolean boolean2 = commandLine0.hasOption('\000');
        org.junit.Assert.assertTrue(""'"" + boolean2 + ""' != '"" + false + ""'"", boolean2 == false);"
386,1,2387,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0002"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine8 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine8.getOptionValues(""hi!"");
        java.lang.String str13 = commandLine8.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str15 = commandLine8.getOptionValue(""arg"");
        java.lang.String[] strArray16 = commandLine8.getArgs();
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser0.parse(options1, strArray16, properties17);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options23 = options1.addOption(""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"", false, ""[ option: 4  :: null ]"");
            org.junit.Assert.fail(""Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertEquals(""'"" + str13 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str13, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);"
387,180,1521,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0181"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.util.Iterator iterator4 = commandLine0.iterator();
        java.lang.String str7 = commandLine0.getOptionValue(""[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]"", ""arg"");
        boolean boolean9 = commandLine0.hasOption(""[ option: 4  :: null ]"");
        java.lang.String[] strArray11 = commandLine0.getOptionValues("""");
        java.lang.String str14 = commandLine0.getOptionValue('=', ""[ option: 4  :: null ::  ]"");
        java.util.Iterator iterator15 = commandLine0.iterator();
        java.lang.Class<?> wildcardClass16 = iterator15.getClass();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertEquals(""'"" + str7 + ""' != '"" + ""arg"" + ""'"", str7, ""arg"");
        org.junit.Assert.assertTrue(""'"" + boolean9 + ""' != '"" + false + ""'"", boolean9 == false);
        org.junit.Assert.assertNull(strArray11);
        org.junit.Assert.assertEquals(""'"" + str14 + ""' != '"" + ""[ option: 4  :: null ::  ]"" + ""'"", str14, ""[ option: 4  :: null ::  ]"");
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNotNull(wildcardClass16);"
388,462,1537,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0463"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue(""hi!"");
        org.apache.commons.cli.Option option7 = org.apache.commons.cli.OptionBuilder.create(' ');
        commandLine0.addOption(option7);
        java.lang.String[] strArray10 = commandLine0.getOptionValues(""[ option: 4  :: null ]"");
        java.lang.String str13 = commandLine0.getOptionValue(""org.apache.commons.cli.MissingArgumentException: [ option:    :: null ]"", ""[ option:    :: null ]"");
        java.lang.String[] strArray15 = commandLine0.getOptionValues(""org.apache.commons.cli.MissingOptionException: hi!"");
        commandLine0.addArg(""[ option: 4  :: null :: [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ] ]"");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(option7);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertEquals(""'"" + str13 + ""' != '"" + ""[ option:    :: null ]"" + ""'"", str13, ""[ option:    :: null ]"");
        org.junit.Assert.assertNull(strArray15);"
389,422,1494,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0423"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue(""hi!"");
        org.apache.commons.cli.Option option7 = org.apache.commons.cli.OptionBuilder.create(' ');
        commandLine0.addOption(option7);
        java.lang.String[] strArray10 = commandLine0.getOptionValues(""[ option: 4  :: null ]"");
        java.lang.Object obj12 = commandLine0.getOptionObject(""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.Object obj14 = commandLine0.getOptionObject(""[ Options: [ short {4=[ option: 4  :: null ::  ]} ] [ long {} ]"");
        java.lang.String[] strArray16 = commandLine0.getOptionValues(""org.apache.commons.cli.ParseException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ], arg=[ option: arg  :: null ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(option7);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(strArray16);"
390,384,1433,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0385"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.util.Iterator iterator4 = commandLine0.iterator();
        java.lang.String str7 = commandLine0.getOptionValue(""[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]"", ""arg"");
        boolean boolean9 = commandLine0.hasOption('#');
        java.lang.String str11 = commandLine0.getOptionValue('a');
        org.apache.commons.cli.Option[] optionArray12 = commandLine0.getOptions();
        java.lang.String[] strArray13 = commandLine0.getArgs();
        commandLine0.addArg(""org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertEquals(""'"" + str7 + ""' != '"" + ""arg"" + ""'"", str7, ""arg"");
        org.junit.Assert.assertTrue(""'"" + boolean9 + ""' != '"" + false + ""'"", boolean9 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(optionArray12);
        org.junit.Assert.assertNotNull(strArray13);"
391,463,1171,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0464"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.Object obj2 = commandLine0.getOptionObject(""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4 org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!  ::  ]} ] [ long {org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!=[ option: 4 org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!  ::  ]} ]"");
        java.util.Iterator iterator3 = commandLine0.iterator();
        java.lang.String[] strArray5 = commandLine0.getOptionValues(""[ option:   [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]  :: null ]"");
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNotNull(iterator3);
        org.junit.Assert.assertNull(strArray5);"
392,438,502,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0439"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String str3 = commandLine0.getOptionValue('#', """");
        java.lang.Object obj5 = commandLine0.getOptionObject(""org.apache.commons.cli.ParseException: [ option: 4  :: null ]"");
        org.junit.Assert.assertEquals(""'"" + str3 + ""' != '"" + """" + ""'"", str3, """");
        org.junit.Assert.assertNull(obj5);"
393,494,586,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0495"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String str3 = commandLine0.getOptionValue('#', """");
        boolean boolean5 = commandLine0.hasOption(""org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!"");
        org.junit.Assert.assertEquals(""'"" + str3 + ""' != '"" + """" + ""'"", str3, """");
        org.junit.Assert.assertTrue(""'"" + boolean5 + ""' != '"" + false + ""'"", boolean5 == false);"
394,173,1425,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0174"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String str5 = commandLine0.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str7 = commandLine0.getOptionValue(""arg"");
        java.lang.Object obj9 = commandLine0.getOptionObject('a');
        boolean boolean11 = commandLine0.hasOption(' ');
        java.util.Iterator iterator12 = commandLine0.iterator();
        boolean boolean14 = commandLine0.hasOption(""[ option: 4 [ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ]  :: null ]"");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertEquals(""'"" + str5 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str5, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue(""'"" + boolean11 + ""' != '"" + false + ""'"", boolean11 == false);
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertTrue(""'"" + boolean14 + ""' != '"" + false + ""'"", boolean14 == false);"
395,264,1387,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0265"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue(""hi!"");
        boolean boolean7 = commandLine0.hasOption("""");
        commandLine0.addArg(""org.apache.commons.cli.UnrecognizedOptionException: hi!"");
        boolean boolean11 = commandLine0.hasOption(""[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str13 = commandLine0.getOptionValue(""[ option: 4  :: null ::  ]"");
        java.util.Iterator iterator14 = commandLine0.iterator();
        boolean boolean16 = commandLine0.hasOption('=');
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(""'"" + boolean7 + ""' != '"" + false + ""'"", boolean7 == false);
        org.junit.Assert.assertTrue(""'"" + boolean11 + ""' != '"" + false + ""'"", boolean11 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(iterator14);
        org.junit.Assert.assertTrue(""'"" + boolean16 + ""' != '"" + false + ""'"", boolean16 == false);"
396,407,1336,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0408"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String str5 = commandLine0.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        commandLine0.addArg(""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"");
        java.lang.String[] strArray9 = commandLine0.getOptionValues('4');
        boolean boolean11 = commandLine0.hasOption(' ');
        java.lang.String str13 = commandLine0.getOptionValue(""org.apache.commons.cli.ParseException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertEquals(""'"" + str5 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str5, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertTrue(""'"" + boolean11 + ""' != '"" + false + ""'"", boolean11 == false);
        org.junit.Assert.assertNull(str13);"
397,47,691,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0048"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        boolean boolean2 = commandLine0.hasOption('4');
        org.apache.commons.cli.Option[] optionArray3 = commandLine0.getOptions();
        java.util.List list4 = commandLine0.getArgList();
        java.lang.Class<?> wildcardClass5 = list4.getClass();
        org.junit.Assert.assertTrue(""'"" + boolean2 + ""' != '"" + false + ""'"", boolean2 == false);
        org.junit.Assert.assertNotNull(optionArray3);
        org.junit.Assert.assertNotNull(list4);
        org.junit.Assert.assertNotNull(wildcardClass5);"
398,396,406,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0397"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.util.Iterator iterator1 = commandLine0.iterator();
        java.lang.String str3 = commandLine0.getOptionValue('\000');
        org.junit.Assert.assertNotNull(iterator1);
        org.junit.Assert.assertNull(str3);"
399,243,404,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0244"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.util.Iterator iterator1 = commandLine0.iterator();
        java.lang.Object obj3 = commandLine0.getOptionObject("" "");
        org.junit.Assert.assertNotNull(iterator1);
        org.junit.Assert.assertNull(obj3);"
400,441,2858,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0442"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.OptionBuilder optionBuilder22 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options6);
        java.util.Collection collection23 = options6.getOptionGroups();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options28 = options6.addOption(""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ::  ]} ] [ long {} ]"", ""[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]"", true, ""[ option: 4  ::  :: [] ]"");
            org.junit.Assert.fail(""Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(optionBuilder22);
        org.junit.Assert.assertNotNull(collection23);"
401,427,1312,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0428"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.Object obj4 = commandLine0.getOptionObject('a');
        java.lang.String str7 = commandLine0.getOptionValue('\000', """");
        org.apache.commons.cli.Option[] optionArray8 = commandLine0.getOptions();
        commandLine0.addArg(""[ option: 4  :: null ::  ]"");
        java.lang.String str12 = commandLine0.getOptionValue('#');
        java.lang.String[] strArray13 = commandLine0.getArgs();
        java.lang.String str16 = commandLine0.getOptionValue('a', ""org.apache.commons.cli.UnrecognizedOptionException: arg"");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertEquals(""'"" + str7 + ""' != '"" + """" + ""'"", str7, """");
        org.junit.Assert.assertNotNull(optionArray8);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertEquals(""'"" + str16 + ""' != '"" + ""org.apache.commons.cli.UnrecognizedOptionException: arg"" + ""'"", str16, ""org.apache.commons.cli.UnrecognizedOptionException: arg"");"
402,465,2255,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0466"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptions();
        boolean boolean9 = options1.hasOption(""arg"");
        java.lang.String[] strArray12 = new java.lang.String[] { ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"", ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"" };
        org.apache.commons.cli.CommandLine commandLine13 = posixParser0.parse(options1, strArray12);
        commandLine13.addArg(""[ option: 4  :: null ::  ]"");
        java.util.Iterator iterator16 = commandLine13.iterator();
        java.lang.Object obj18 = commandLine13.getOptionObject(""[ Options: [ short {4=[ option: 4  ::  :: [ option: arg [ option: 4  :: null ] +ARG :: 4 ] ]} ] [ long {} ]"");
        java.lang.String str21 = commandLine13.getOptionValue(' ', ""org.apache.commons.cli.MissingOptionException: [ option: 4  :: null ]"");
        java.lang.String str23 = commandLine13.getOptionValue(""[ option: 4  :: null :: [ option:   [ option: 4  ::  ]  :: null ] ]"");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertTrue(""'"" + boolean9 + ""' != '"" + false + ""'"", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine13);
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertEquals(""'"" + str21 + ""' != '"" + ""org.apache.commons.cli.MissingOptionException: [ option: 4  :: null ]"" + ""'"", str21, ""org.apache.commons.cli.MissingOptionException: [ option: 4  :: null ]"");
        org.junit.Assert.assertNull(str23);"
403,50,1301,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0051"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String str5 = commandLine0.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        commandLine0.addArg(""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"");
        java.lang.String[] strArray9 = commandLine0.getOptionValues('4');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass10 = strArray9.getClass();
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertEquals(""'"" + str5 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str5, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(strArray9);"
404,348,1369,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0349"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue(""hi!"");
        org.apache.commons.cli.Option option7 = org.apache.commons.cli.OptionBuilder.create(' ');
        commandLine0.addOption(option7);
        java.lang.String[] strArray10 = commandLine0.getOptionValues(""[ option: 4  :: null ]"");
        java.lang.Object obj12 = commandLine0.getOptionObject(""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.Object obj14 = commandLine0.getOptionObject(""[ Options: [ short {4=[ option: 4  :: null ::  ]} ] [ long {} ]"");
        java.lang.String[] strArray16 = commandLine0.getOptionValues(""[ option: 4  :: null ]"");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(option7);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(strArray16);"
405,309,1324,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0310"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue(""hi!"");
        boolean boolean7 = commandLine0.hasOption("""");
        commandLine0.addArg(""org.apache.commons.cli.UnrecognizedOptionException: hi!"");
        boolean boolean11 = commandLine0.hasOption(""[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String[] strArray13 = commandLine0.getOptionValues(""[ option: 4 arg  :: null ]"");
        java.lang.Object obj15 = commandLine0.getOptionObject(""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(""'"" + boolean7 + ""' != '"" + false + ""'"", boolean7 == false);
        org.junit.Assert.assertTrue(""'"" + boolean11 + ""' != '"" + false + ""'"", boolean11 == false);
        org.junit.Assert.assertNull(strArray13);
        org.junit.Assert.assertNull(obj15);"
406,197,1344,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0198"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue(""hi!"");
        org.apache.commons.cli.Option option7 = org.apache.commons.cli.OptionBuilder.create(' ');
        commandLine0.addOption(option7);
        java.lang.String[] strArray10 = commandLine0.getOptionValues(""[ option: 4  :: null ]"");
        java.lang.Object obj12 = commandLine0.getOptionObject(""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.apache.commons.cli.Option[] optionArray13 = commandLine0.getOptions();
        java.lang.String str16 = commandLine0.getOptionValue('4', """");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(option7);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(optionArray13);
        org.junit.Assert.assertEquals(""'"" + str16 + ""' != '"" + """" + ""'"", str16, """");"
407,260,1267,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0261"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.util.Iterator iterator3 = commandLine0.iterator();
        java.lang.String[] strArray5 = commandLine0.getOptionValues('a');
        java.lang.Object obj7 = commandLine0.getOptionObject('a');
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option9.setLongOpt(""hi!"");
        option9.setArgName(""arg"");
        java.lang.String str16 = option9.toString();
        commandLine0.addOption(option9);
        commandLine0.addArg(""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ], arg=[ option: arg  :: null ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(iterator3);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertEquals(""'"" + str16 + ""' != '"" + ""[ option: 4 hi!  ::  ]"" + ""'"", str16, ""[ option: 4 hi!  ::  ]"");"
408,361,856,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0362"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        boolean boolean2 = commandLine0.hasOption('4');
        org.apache.commons.cli.Option[] optionArray3 = commandLine0.getOptions();
        boolean boolean5 = commandLine0.hasOption('\000');
        java.lang.String[] strArray7 = commandLine0.getOptionValues(' ');
        java.lang.Object obj9 = commandLine0.getOptionObject('a');
        org.junit.Assert.assertTrue(""'"" + boolean2 + ""' != '"" + false + ""'"", boolean2 == false);
        org.junit.Assert.assertNotNull(optionArray3);
        org.junit.Assert.assertTrue(""'"" + boolean5 + ""' != '"" + false + ""'"", boolean5 == false);
        org.junit.Assert.assertNull(strArray7);
        org.junit.Assert.assertNull(obj9);"
409,220,636,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0221"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.util.Iterator iterator1 = commandLine0.iterator();
        boolean boolean3 = commandLine0.hasOption(""[ option: 4  :: [ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ] ::  ]"");
        java.lang.String str5 = commandLine0.getOptionValue('#');
        org.junit.Assert.assertNotNull(iterator1);
        org.junit.Assert.assertTrue(""'"" + boolean3 + ""' != '"" + false + ""'"", boolean3 == false);
        org.junit.Assert.assertNull(str5);"
410,279,1317,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0280"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.util.Iterator iterator4 = commandLine0.iterator();
        java.lang.String str6 = commandLine0.getOptionValue(""[ option:    :: null ]"");
        java.lang.Object obj8 = commandLine0.getOptionObject(""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4 org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!  ::  ]} ] [ long {org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!=[ option: 4 org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!  ::  ]} ]"");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(obj8);"
411,225,562,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0226"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.util.Iterator iterator1 = commandLine0.iterator();
        boolean boolean3 = commandLine0.hasOption('=');
        java.util.Iterator iterator4 = commandLine0.iterator();
        org.junit.Assert.assertNotNull(iterator1);
        org.junit.Assert.assertTrue(""'"" + boolean3 + ""' != '"" + false + ""'"", boolean3 == false);
        org.junit.Assert.assertNotNull(iterator4);"
412,339,1305,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0340"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.util.Iterator iterator4 = commandLine0.iterator();
        boolean boolean6 = commandLine0.hasOption(""[ option: 4  :: null ]"");
        boolean boolean8 = commandLine0.hasOption('=');
        java.util.List list9 = commandLine0.getArgList();
        java.lang.String str12 = commandLine0.getOptionValue(""[ option: 4  :: hi! ]"", ""org.apache.commons.cli.UnrecognizedOptionException: hi!"");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertTrue(""'"" + boolean6 + ""' != '"" + false + ""'"", boolean6 == false);
        org.junit.Assert.assertTrue(""'"" + boolean8 + ""' != '"" + false + ""'"", boolean8 == false);
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""org.apache.commons.cli.UnrecognizedOptionException: hi!"" + ""'"", str12, ""org.apache.commons.cli.UnrecognizedOptionException: hi!"");"
413,314,1307,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0315"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.util.Iterator iterator4 = commandLine0.iterator();
        boolean boolean6 = commandLine0.hasOption(""[ option: 4  :: null ]"");
        java.lang.String[] strArray8 = commandLine0.getOptionValues(""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str11 = commandLine0.getOptionValue('a', ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertTrue(""'"" + boolean6 + ""' != '"" + false + ""'"", boolean6 == false);
        org.junit.Assert.assertNull(strArray8);
        org.junit.Assert.assertEquals(""'"" + str11 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"" + ""'"", str11, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"");"
414,53,1262,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0054"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String str5 = commandLine0.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str7 = commandLine0.getOptionValue(""arg"");
        java.lang.Object obj9 = commandLine0.getOptionObject('a');
        boolean boolean11 = commandLine0.hasOption(' ');
        java.lang.Object obj13 = commandLine0.getOptionObject(""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertEquals(""'"" + str5 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str5, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue(""'"" + boolean11 + ""' != '"" + false + ""'"", boolean11 == false);
        org.junit.Assert.assertNull(obj13);"
415,217,1265,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0218"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.util.Iterator iterator3 = commandLine0.iterator();
        java.lang.String[] strArray5 = commandLine0.getOptionValues('a');
        java.lang.Object obj7 = commandLine0.getOptionObject('a');
        java.lang.Object obj9 = commandLine0.getOptionObject(""org.apache.commons.cli.MissingOptionException: hi!"");
        java.lang.String str12 = commandLine0.getOptionValue(""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"", ""[ option: 4  :: null ]"");
        java.lang.String[] strArray14 = commandLine0.getOptionValues('=');
        commandLine0.addArg("""");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(iterator3);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ option: 4  :: null ]"" + ""'"", str12, ""[ option: 4  :: null ]"");
        org.junit.Assert.assertNull(strArray14);"
416,285,1250,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0286"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.util.Iterator iterator3 = commandLine0.iterator();
        java.lang.String[] strArray5 = commandLine0.getOptionValues('a');
        java.lang.Object obj7 = commandLine0.getOptionObject('a');
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option9.setLongOpt(""hi!"");
        option9.setArgName(""arg"");
        java.lang.String str16 = option9.toString();
        commandLine0.addOption(option9);
        java.lang.String[] strArray19 = commandLine0.getOptionValues(' ');
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(iterator3);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertEquals(""'"" + str16 + ""' != '"" + ""[ option: 4 hi!  ::  ]"" + ""'"", str16, ""[ option: 4 hi!  ::  ]"");
        org.junit.Assert.assertNull(strArray19);"
417,177,819,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0178"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        boolean boolean2 = commandLine0.hasOption('4');
        java.lang.Object obj4 = commandLine0.getOptionObject('4');
        java.lang.String str7 = commandLine0.getOptionValue('#', ""[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]"");
        commandLine0.addArg(""[ option: 4 arg  :: null ]"");
        org.junit.Assert.assertTrue(""'"" + boolean2 + ""' != '"" + false + ""'"", boolean2 == false);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertEquals(""'"" + str7 + ""' != '"" + ""[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str7, ""[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]"");"
418,428,1190,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0429"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        boolean boolean5 = commandLine0.hasOption(""hi!"");
        java.util.List list6 = commandLine0.getArgList();
        java.lang.Object obj8 = commandLine0.getOptionObject(""[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]"");
        java.lang.Object obj10 = commandLine0.getOptionObject(' ');
        java.util.Iterator iterator11 = commandLine0.iterator();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue(""'"" + boolean5 + ""' != '"" + false + ""'"", boolean5 == false);
        org.junit.Assert.assertNotNull(list6);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNotNull(iterator11);"
419,473,1311,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0474"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.util.Iterator iterator3 = commandLine0.iterator();
        java.lang.String[] strArray5 = commandLine0.getOptionValues('a');
        java.lang.Object obj7 = commandLine0.getOptionObject('a');
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option9.setLongOpt(""hi!"");
        commandLine0.addOption(option9);
        commandLine0.addArg(""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str19 = commandLine0.getOptionValue(""[ option: 4  :: null :: [ option:   [ option: 4  ::  ]  :: null ] ]"", ""[ option: 4   :: null ]"");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(iterator3);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertEquals(""'"" + str19 + ""' != '"" + ""[ option: 4   :: null ]"" + ""'"", str19, ""[ option: 4   :: null ]"");"
420,241,935,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0242"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        boolean boolean2 = commandLine0.hasOption('4');
        java.lang.Object obj4 = commandLine0.getOptionObject('4');
        java.lang.String str7 = commandLine0.getOptionValue('#', ""[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str9 = commandLine0.getOptionValue(""org.apache.commons.cli.MissingArgumentException: [ option: 4  ::  ]"");
        org.junit.Assert.assertTrue(""'"" + boolean2 + ""' != '"" + false + ""'"", boolean2 == false);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertEquals(""'"" + str7 + ""' != '"" + ""[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str7, ""[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str9);"
421,151,1233,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0152"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue(""hi!"");
        boolean boolean7 = commandLine0.hasOption("""");
        java.lang.String str10 = commandLine0.getOptionValue(""[ option: 4  :: null ]"", ""org.apache.commons.cli.MissingOptionException: hi!"");
        java.lang.String[] strArray12 = commandLine0.getOptionValues('4');
        commandLine0.addArg(""org.apache.commons.cli.MissingOptionException: [ option: 4  :: null ]"");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(""'"" + boolean7 + ""' != '"" + false + ""'"", boolean7 == false);
        org.junit.Assert.assertEquals(""'"" + str10 + ""' != '"" + ""org.apache.commons.cli.MissingOptionException: hi!"" + ""'"", str10, ""org.apache.commons.cli.MissingOptionException: hi!"");
        org.junit.Assert.assertNull(strArray12);"
422,253,1199,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0254"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue(""hi!"");
        boolean boolean7 = commandLine0.hasOption("""");
        java.lang.String str10 = commandLine0.getOptionValue(""[ option: 4  :: null ]"", ""org.apache.commons.cli.MissingOptionException: hi!"");
        commandLine0.addArg(""org.apache.commons.cli.MissingArgumentException: [ option:    :: null ]"");
        commandLine0.addArg(""org.apache.commons.cli.UnrecognizedOptionException: arg"");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(""'"" + boolean7 + ""' != '"" + false + ""'"", boolean7 == false);
        org.junit.Assert.assertEquals(""'"" + str10 + ""' != '"" + ""org.apache.commons.cli.MissingOptionException: hi!"" + ""'"", str10, ""org.apache.commons.cli.MissingOptionException: hi!"");"
423,107,2240,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0108"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine8 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine8.getOptionValues(""hi!"");
        java.lang.String str13 = commandLine8.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str15 = commandLine8.getOptionValue(""arg"");
        java.lang.String[] strArray16 = commandLine8.getArgs();
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser0.parse(options1, strArray16, properties17);
        org.apache.commons.cli.Options options23 = options1.addOption("" "", """", true, ""org.apache.commons.cli.UnrecognizedOptionException: hi!"");
        org.apache.commons.cli.Option option25 = options1.getOption(""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertEquals(""'"" + str13 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str13, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNull(option25);"
424,214,759,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0215"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.util.Iterator iterator1 = commandLine0.iterator();
        boolean boolean3 = commandLine0.hasOption('=');
        org.apache.commons.cli.Option[] optionArray4 = commandLine0.getOptions();
        boolean boolean6 = commandLine0.hasOption(""[ option: 4  ::  :: [] ]"");
        org.junit.Assert.assertNotNull(iterator1);
        org.junit.Assert.assertTrue(""'"" + boolean3 + ""' != '"" + false + ""'"", boolean3 == false);
        org.junit.Assert.assertNotNull(optionArray4);
        org.junit.Assert.assertTrue(""'"" + boolean6 + ""' != '"" + false + ""'"", boolean6 == false);"
425,300,1324,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0301"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.util.Iterator iterator4 = commandLine0.iterator();
        boolean boolean6 = commandLine0.hasOption(""[ option: 4  :: null ]"");
        boolean boolean8 = commandLine0.hasOption('=');
        java.util.List list9 = commandLine0.getArgList();
        java.lang.String str12 = commandLine0.getOptionValue(' ', ""[ option:    :: null :: arg ]"");
        java.util.Iterator iterator13 = commandLine0.iterator();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertTrue(""'"" + boolean6 + ""' != '"" + false + ""'"", boolean6 == false);
        org.junit.Assert.assertTrue(""'"" + boolean8 + ""' != '"" + false + ""'"", boolean8 == false);
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ option:    :: null :: arg ]"" + ""'"", str12, ""[ option:    :: null :: arg ]"");
        org.junit.Assert.assertNotNull(iterator13);"
426,424,1188,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0425"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.util.Iterator iterator4 = commandLine0.iterator();
        boolean boolean6 = commandLine0.hasOption(""[ option: 4  :: null ]"");
        boolean boolean8 = commandLine0.hasOption('=');
        java.util.List list9 = commandLine0.getArgList();
        java.util.List list10 = commandLine0.getArgList();
        java.util.Iterator iterator11 = commandLine0.iterator();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertTrue(""'"" + boolean6 + ""' != '"" + false + ""'"", boolean6 == false);
        org.junit.Assert.assertTrue(""'"" + boolean8 + ""' != '"" + false + ""'"", boolean8 == false);
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertNotNull(iterator11);"
427,6,543,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0007"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.util.Iterator iterator3 = commandLine0.iterator();
        java.lang.Class<?> wildcardClass4 = commandLine0.getClass();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(iterator3);
        org.junit.Assert.assertNotNull(wildcardClass4);"
428,395,1118,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0396"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.Object obj4 = commandLine0.getOptionObject('a');
        java.lang.String str7 = commandLine0.getOptionValue('\000', """");
        org.apache.commons.cli.Option[] optionArray8 = commandLine0.getOptions();
        commandLine0.addArg(""[ option: 4  :: null ::  ]"");
        java.lang.String str12 = commandLine0.getOptionValue('#');
        java.lang.String[] strArray13 = commandLine0.getArgs();
        java.lang.Class<?> wildcardClass14 = commandLine0.getClass();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertEquals(""'"" + str7 + ""' != '"" + """" + ""'"", str7, """");
        org.junit.Assert.assertNotNull(optionArray8);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(wildcardClass14);"
429,293,1118,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0294"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue(""hi!"");
        boolean boolean7 = commandLine0.hasOption("""");
        java.lang.String str10 = commandLine0.getOptionValue(""[ option: 4  :: null ]"", ""org.apache.commons.cli.MissingOptionException: hi!"");
        java.lang.Object obj12 = commandLine0.getOptionObject("""");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(""'"" + boolean7 + ""' != '"" + false + ""'"", boolean7 == false);
        org.junit.Assert.assertEquals(""'"" + str10 + ""' != '"" + ""org.apache.commons.cli.MissingOptionException: hi!"" + ""'"", str10, ""org.apache.commons.cli.MissingOptionException: hi!"");
        org.junit.Assert.assertNull(obj12);"
430,186,1062,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0187"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.util.Iterator iterator3 = commandLine0.iterator();
        java.lang.String[] strArray5 = commandLine0.getOptionValues('a');
        java.lang.Object obj7 = commandLine0.getOptionObject('a');
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("""");
        option9.setLongOpt(""hi!"");
        commandLine0.addOption(option9);
        boolean boolean15 = option9.hasOptionalArg();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(iterator3);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertTrue(""'"" + boolean15 + ""' != '"" + false + ""'"", boolean15 == false);"
431,3,458,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0004"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        boolean boolean4 = commandLine0.hasOption(""hi!"");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertTrue(""'"" + boolean4 + ""' != '"" + false + ""'"", boolean4 == false);"
432,146,1228,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0147"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String str5 = commandLine0.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str7 = commandLine0.getOptionValue(""arg"");
        org.apache.commons.cli.Option[] optionArray8 = commandLine0.getOptions();
        boolean boolean10 = commandLine0.hasOption(""org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertEquals(""'"" + str5 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str5, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(optionArray8);
        org.junit.Assert.assertTrue(""'"" + boolean10 + ""' != '"" + false + ""'"", boolean10 == false);"
433,206,594,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0207"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.util.Iterator iterator3 = commandLine0.iterator();
        java.lang.String[] strArray5 = commandLine0.getOptionValues('a');
        commandLine0.addArg(""[ option: 4  :: hi! ]"");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(iterator3);
        org.junit.Assert.assertNull(strArray5);"
434,141,1088,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0142"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        boolean boolean5 = commandLine0.hasOption(""hi!"");
        java.util.List list6 = commandLine0.getArgList();
        java.lang.Object obj8 = commandLine0.getOptionObject(""[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]"");
        java.lang.String[] strArray10 = commandLine0.getOptionValues('\000');
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue(""'"" + boolean5 + ""' != '"" + false + ""'"", boolean5 == false);
        org.junit.Assert.assertNotNull(list6);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(strArray10);"
435,377,705,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0378"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.Object obj4 = commandLine0.getOptionObject('a');
        java.lang.String[] strArray6 = commandLine0.getOptionValues('\000');
        commandLine0.addArg(""[ option:    :: null ]"");
        java.lang.Object obj10 = commandLine0.getOptionObject('=');
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(strArray6);
        org.junit.Assert.assertNull(obj10);"
436,482,539,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0483"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.Class<?> wildcardClass4 = strArray3.getClass();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);"
437,199,1016,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0200"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.Object obj4 = commandLine0.getOptionObject('a');
        java.lang.String str7 = commandLine0.getOptionValue('\000', """");
        org.apache.commons.cli.Option[] optionArray8 = commandLine0.getOptions();
        java.lang.String str10 = commandLine0.getOptionValue(""org.apache.commons.cli.ParseException: arg"");
        boolean boolean12 = commandLine0.hasOption('\000');
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertEquals(""'"" + str7 + ""' != '"" + """" + ""'"", str7, """");
        org.junit.Assert.assertNotNull(optionArray8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue(""'"" + boolean12 + ""' != '"" + false + ""'"", boolean12 == false);"
438,57,881,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0058"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.util.Iterator iterator3 = commandLine0.iterator();
        java.lang.String[] strArray5 = commandLine0.getOptionValues('a');
        java.lang.String str8 = commandLine0.getOptionValue("""", ""[ Options: [ short {4=[ option: 4  :: null ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(iterator3);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertEquals(""'"" + str8 + ""' != '"" + ""[ Options: [ short {4=[ option: 4  :: null ::  ]} ] [ long {} ]"" + ""'"", str8, ""[ Options: [ short {4=[ option: 4  :: null ::  ]} ] [ long {} ]"");"
439,373,1033,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0374"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.util.Iterator iterator3 = commandLine0.iterator();
        java.lang.String[] strArray5 = commandLine0.getOptionValues('a');
        org.apache.commons.cli.Option[] optionArray6 = commandLine0.getOptions();
        java.lang.String str9 = commandLine0.getOptionValue('a', ""[ option: 4 hi!  ::  ]"");
        org.apache.commons.cli.Option[] optionArray10 = commandLine0.getOptions();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(iterator3);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNotNull(optionArray6);
        org.junit.Assert.assertEquals(""'"" + str9 + ""' != '"" + ""[ option: 4 hi!  ::  ]"" + ""'"", str9, ""[ option: 4 hi!  ::  ]"");
        org.junit.Assert.assertNotNull(optionArray10);"
440,459,869,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0460"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.util.Iterator iterator3 = commandLine0.iterator();
        java.lang.Object obj5 = commandLine0.getOptionObject('\000');
        java.lang.String[] strArray7 = commandLine0.getOptionValues('a');
        java.util.List list8 = commandLine0.getArgList();
        java.lang.String str10 = commandLine0.getOptionValue(' ');
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(iterator3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(strArray7);
        org.junit.Assert.assertNotNull(list8);
        org.junit.Assert.assertNull(str10);"
441,188,1057,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0189"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        boolean boolean5 = commandLine0.hasOption(""hi!"");
        java.util.List list6 = commandLine0.getArgList();
        boolean boolean8 = commandLine0.hasOption('#');
        java.lang.String[] strArray10 = commandLine0.getOptionValues(""org.apache.commons.cli.MissingArgumentException: [ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue(""'"" + boolean5 + ""' != '"" + false + ""'"", boolean5 == false);
        org.junit.Assert.assertNotNull(list6);
        org.junit.Assert.assertTrue(""'"" + boolean8 + ""' != '"" + false + ""'"", boolean8 == false);
        org.junit.Assert.assertNull(strArray10);"
442,76,977,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0077"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.util.Iterator iterator3 = commandLine0.iterator();
        java.lang.String[] strArray5 = commandLine0.getOptionValues('a');
        org.apache.commons.cli.Option[] optionArray6 = commandLine0.getOptions();
        java.lang.String[] strArray8 = commandLine0.getOptionValues(""[ option:    :: null ]"");
        boolean boolean10 = commandLine0.hasOption(""arg"");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(iterator3);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNotNull(optionArray6);
        org.junit.Assert.assertNull(strArray8);
        org.junit.Assert.assertTrue(""'"" + boolean10 + ""' != '"" + false + ""'"", boolean10 == false);"
443,198,1021,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0199"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.util.Iterator iterator3 = commandLine0.iterator();
        java.lang.String[] strArray5 = commandLine0.getOptionValues('a');
        java.util.Iterator iterator6 = commandLine0.iterator();
        java.lang.Object obj8 = commandLine0.getOptionObject(""[ option:    :: null ]"");
        java.lang.String str10 = commandLine0.getOptionValue(' ');
        java.lang.String[] strArray12 = commandLine0.getOptionValues('=');
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(iterator3);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(strArray12);"
444,491,785,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0492"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.util.Iterator iterator3 = commandLine0.iterator();
        java.lang.String[] strArray5 = commandLine0.getOptionValues('a');
        java.lang.String str7 = commandLine0.getOptionValue('a');
        org.apache.commons.cli.Option[] optionArray8 = commandLine0.getOptions();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(iterator3);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(optionArray8);"
445,72,1050,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0073"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue('\000');
        java.lang.Object obj7 = commandLine0.getOptionObject("""");
        java.lang.String[] strArray9 = commandLine0.getOptionValues(""org.apache.commons.cli.MissingOptionException: hi!"");
        java.lang.String str11 = commandLine0.getOptionValue('\000');
        java.lang.Class<?> wildcardClass12 = commandLine0.getClass();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(wildcardClass12);"
446,181,1073,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0182"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue(""hi!"");
        java.util.List list6 = commandLine0.getArgList();
        java.lang.Object obj8 = commandLine0.getOptionObject(""[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]"");
        boolean boolean10 = commandLine0.hasOption('#');
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(list6);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue(""'"" + boolean10 + ""' != '"" + false + ""'"", boolean10 == false);"
447,454,950,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0455"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.util.Iterator iterator4 = commandLine0.iterator();
        java.lang.String str7 = commandLine0.getOptionValue('4', ""org.apache.commons.cli.MissingArgumentException: arg"");
        java.lang.String str9 = commandLine0.getOptionValue('#');
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertEquals(""'"" + str7 + ""' != '"" + ""org.apache.commons.cli.MissingArgumentException: arg"" + ""'"", str7, ""org.apache.commons.cli.MissingArgumentException: arg"");
        org.junit.Assert.assertNull(str9);"
448,230,832,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0231"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.util.Iterator iterator3 = commandLine0.iterator();
        java.lang.String[] strArray5 = commandLine0.getOptionValues('a');
        org.apache.commons.cli.Option[] optionArray6 = commandLine0.getOptions();
        java.lang.String str9 = commandLine0.getOptionValue('\000', """");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(iterator3);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNotNull(optionArray6);
        org.junit.Assert.assertEquals(""'"" + str9 + ""' != '"" + """" + ""'"", str9, """");"
449,208,804,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0209"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue('\000');
        boolean boolean7 = commandLine0.hasOption('#');
        java.lang.String[] strArray9 = commandLine0.getOptionValues(' ');
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(""'"" + boolean7 + ""' != '"" + false + ""'"", boolean7 == false);
        org.junit.Assert.assertNull(strArray9);"
450,252,801,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0253"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String str5 = commandLine0.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str7 = commandLine0.getOptionValue('a');
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertEquals(""'"" + str5 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str5, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str7);"
451,48,947,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0049"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.util.Iterator iterator3 = commandLine0.iterator();
        java.lang.String[] strArray5 = commandLine0.getOptionValues('a');
        java.lang.Object obj7 = commandLine0.getOptionObject('a');
        java.lang.Object obj9 = commandLine0.getOptionObject(""org.apache.commons.cli.MissingOptionException: hi!"");
        org.apache.commons.cli.Option[] optionArray10 = commandLine0.getOptions();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(iterator3);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(optionArray10);"
452,69,1069,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0070"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.util.Iterator iterator4 = commandLine0.iterator();
        boolean boolean6 = commandLine0.hasOption(""[ option: 4  :: null ]"");
        boolean boolean8 = commandLine0.hasOption('=');
        java.lang.String str11 = commandLine0.getOptionValue('4', ""[ option: 4  ::  ]"");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertTrue(""'"" + boolean6 + ""' != '"" + false + ""'"", boolean6 == false);
        org.junit.Assert.assertTrue(""'"" + boolean8 + ""' != '"" + false + ""'"", boolean8 == false);
        org.junit.Assert.assertEquals(""'"" + str11 + ""' != '"" + ""[ option: 4  ::  ]"" + ""'"", str11, ""[ option: 4  ::  ]"");"
453,367,797,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0368"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String str5 = commandLine0.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.util.List list6 = commandLine0.getArgList();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertEquals(""'"" + str5 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str5, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNotNull(list6);"
454,202,786,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0203"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        boolean boolean5 = commandLine0.hasOption(""hi!"");
        java.util.List list6 = commandLine0.getArgList();
        java.lang.Object obj8 = commandLine0.getOptionObject("""");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue(""'"" + boolean5 + ""' != '"" + false + ""'"", boolean5 == false);
        org.junit.Assert.assertNotNull(list6);
        org.junit.Assert.assertNull(obj8);"
455,64,822,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0065"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.util.Iterator iterator3 = commandLine0.iterator();
        java.lang.String[] strArray5 = commandLine0.getOptionValues('a');
        java.util.Iterator iterator6 = commandLine0.iterator();
        commandLine0.addArg(""org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(iterator3);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNotNull(iterator6);"
456,12,841,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0013"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        boolean boolean5 = commandLine0.hasOption(""hi!"");
        java.util.List list6 = commandLine0.getArgList();
        java.lang.Object obj8 = commandLine0.getOptionObject(""[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue(""'"" + boolean5 + ""' != '"" + false + ""'"", boolean5 == false);
        org.junit.Assert.assertNotNull(list6);
        org.junit.Assert.assertNull(obj8);"
457,312,910,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0313"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.util.Iterator iterator4 = commandLine0.iterator();
        java.lang.Object obj6 = commandLine0.getOptionObject('#');
        java.lang.String str8 = commandLine0.getOptionValue(""4"");
        java.lang.String str11 = commandLine0.getOptionValue('\000', """");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals(""'"" + str11 + ""' != '"" + """" + ""'"", str11, """");"
458,389,1033,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0390"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.util.Iterator iterator4 = commandLine0.iterator();
        java.lang.String str7 = commandLine0.getOptionValue(""[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]"", ""arg"");
        java.lang.String str9 = commandLine0.getOptionValue(""[ option:  +ARG ::  ]"");
        boolean boolean11 = commandLine0.hasOption('=');
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertEquals(""'"" + str7 + ""' != '"" + ""arg"" + ""'"", str7, ""arg"");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue(""'"" + boolean11 + ""' != '"" + false + ""'"", boolean11 == false);"
459,77,875,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0078"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue(""hi!"");
        boolean boolean7 = commandLine0.hasOption("""");
        commandLine0.addArg(""org.apache.commons.cli.UnrecognizedOptionException: hi!"");
        java.util.List list10 = commandLine0.getArgList();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(""'"" + boolean7 + ""' != '"" + false + ""'"", boolean7 == false);
        org.junit.Assert.assertNotNull(list10);"
460,147,967,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0148"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String str5 = commandLine0.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str7 = commandLine0.getOptionValue(""arg"");
        java.lang.String str9 = commandLine0.getOptionValue('a');
        commandLine0.addArg(""[ option:    :: null ]"");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertEquals(""'"" + str5 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str5, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);"
461,456,791,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0457"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.util.Iterator iterator3 = commandLine0.iterator();
        java.lang.String[] strArray5 = commandLine0.getOptionValues('a');
        java.util.Iterator iterator6 = commandLine0.iterator();
        org.apache.commons.cli.Option[] optionArray7 = commandLine0.getOptions();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(iterator3);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertNotNull(optionArray7);"
462,183,932,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0184"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        boolean boolean5 = commandLine0.hasOption(""hi!"");
        java.util.List list6 = commandLine0.getArgList();
        commandLine0.addArg("""");
        java.lang.String str11 = commandLine0.getOptionValue('a', ""[ option: 4  :: null ]"");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue(""'"" + boolean5 + ""' != '"" + false + ""'"", boolean5 == false);
        org.junit.Assert.assertNotNull(list6);
        org.junit.Assert.assertEquals(""'"" + str11 + ""' != '"" + ""[ option: 4  :: null ]"" + ""'"", str11, ""[ option: 4  :: null ]"");"
463,22,1043,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0023"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String str5 = commandLine0.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str7 = commandLine0.getOptionValue(""arg"");
        java.util.Iterator iterator8 = commandLine0.iterator();
        java.lang.Class<?> wildcardClass9 = commandLine0.getClass();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertEquals(""'"" + str5 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str5, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(wildcardClass9);"
464,457,923,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0458"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue('\000');
        java.lang.Object obj7 = commandLine0.getOptionObject("""");
        java.lang.Object obj9 = commandLine0.getOptionObject(""[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]"");
        java.util.Iterator iterator10 = commandLine0.iterator();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(iterator10);"
465,11,808,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0012"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue('\000');
        boolean boolean7 = commandLine0.hasOption('#');
        java.lang.String str9 = commandLine0.getOptionValue(""[ option: 4  ::  ]"");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(""'"" + boolean7 + ""' != '"" + false + ""'"", boolean7 == false);
        org.junit.Assert.assertNull(str9);"
466,200,968,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0201"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.util.Iterator iterator3 = commandLine0.iterator();
        java.lang.String[] strArray5 = commandLine0.getOptionValues('a');
        java.lang.Object obj7 = commandLine0.getOptionObject('a');
        java.lang.String str9 = commandLine0.getOptionValue("" "");
        java.lang.String[] strArray11 = commandLine0.getOptionValues(""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(iterator3);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strArray11);"
467,445,901,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0446"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue(""hi!"");
        java.lang.String[] strArray7 = commandLine0.getOptionValues('a');
        java.lang.Object obj9 = commandLine0.getOptionObject('\000');
        org.apache.commons.cli.Option[] optionArray10 = commandLine0.getOptions();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(strArray7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(optionArray10);"
468,205,1081,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0206"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.util.Iterator iterator4 = commandLine0.iterator();
        boolean boolean6 = commandLine0.hasOption(""[ option: 4  :: null ]"");
        boolean boolean8 = commandLine0.hasOption('=');
        java.util.List list9 = commandLine0.getArgList();
        java.util.Iterator iterator10 = commandLine0.iterator();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertTrue(""'"" + boolean6 + ""' != '"" + false + ""'"", boolean6 == false);
        org.junit.Assert.assertTrue(""'"" + boolean8 + ""' != '"" + false + ""'"", boolean8 == false);
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNotNull(iterator10);"
469,16,713,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0017"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str6 = commandLine0.getOptionValue(""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"", ""[ option:    :: null ]"");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertEquals(""'"" + str6 + ""' != '"" + ""[ option:    :: null ]"" + ""'"", str6, ""[ option:    :: null ]"");"
470,94,851,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0095"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue(""hi!"");
        java.util.List list6 = commandLine0.getArgList();
        java.lang.String str9 = commandLine0.getOptionValue("""", ""[ option: 4 hi!  ::  ]"");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(list6);
        org.junit.Assert.assertEquals(""'"" + str9 + ""' != '"" + ""[ option: 4 hi!  ::  ]"" + ""'"", str9, ""[ option: 4 hi!  ::  ]"");"
471,164,817,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0165"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue(""hi!"");
        org.apache.commons.cli.Option option7 = org.apache.commons.cli.OptionBuilder.create(' ');
        commandLine0.addOption(option7);
        java.lang.String str9 = option7.getDescription();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(option7);
        org.junit.Assert.assertNull(str9);"
472,33,876,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0034"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.util.Iterator iterator4 = commandLine0.iterator();
        java.lang.Object obj6 = commandLine0.getOptionObject('#');
        boolean boolean8 = commandLine0.hasOption(""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue(""'"" + boolean8 + ""' != '"" + false + ""'"", boolean8 == false);"
473,401,921,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0402"");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues(""hi!"");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        org.apache.commons.cli.Option[] optionArray4 = commandLine0.getOptions();
        java.lang.Object obj6 = commandLine0.getOptionObject(""org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"");
        java.lang.Object obj8 = commandLine0.getOptionObject(' ');
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(optionArray4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj8);"
474,7,2686,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0008"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("""");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Options options28 = options18.addOption("""", false, ""arg"");
        java.lang.String[] strArray29 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray31 = posixParser0.flatten(options28, strArray29, false);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(options28);"
475,334,2257,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0335"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String[] strArray10 = commandLine7.getArgs();
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser0.parse(options1, strArray10, properties11);
        java.lang.String[] strArray13 = commandLine12.getArgs();
        java.lang.String str15 = commandLine12.getOptionValue('4');
        java.lang.String str18 = commandLine12.getOptionValue(""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"", ""[ option:   [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]  :: null ]"");
        java.lang.String str21 = commandLine12.getOptionValue(""org.apache.commons.cli.UnrecognizedOptionException: arg"", ""arg"");
        java.lang.Class<?> wildcardClass22 = commandLine12.getClass();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals(""'"" + str18 + ""' != '"" + ""[ option:   [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]  :: null ]"" + ""'"", str18, ""[ option:   [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]  :: null ]"");
        org.junit.Assert.assertEquals(""'"" + str21 + ""' != '"" + ""arg"" + ""'"", str21, ""arg"");
        org.junit.Assert.assertNotNull(wildcardClass22);"
476,24,2484,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0025"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        boolean boolean19 = options6.hasOption(""arg"");
        java.util.Collection collection20 = options6.getOptions();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options24 = options6.addOption(""org.apache.commons.cli.UnrecognizedOptionException: hi!"", false, ""[ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]"");
            org.junit.Assert.fail(""Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '.'"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue(""'"" + boolean19 + ""' != '"" + false + ""'"", boolean19 == false);
        org.junit.Assert.assertNotNull(collection20);"
477,245,1994,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0246"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine8 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine8.getOptionValues(""hi!"");
        java.lang.String str13 = commandLine8.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str15 = commandLine8.getOptionValue(""arg"");
        java.lang.String[] strArray16 = commandLine8.getArgs();
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser0.parse(options1, strArray16, properties17);
        java.lang.String str20 = commandLine18.getOptionValue('#');
        java.lang.Object obj22 = commandLine18.getOptionObject("""");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertEquals(""'"" + str13 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str13, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(obj22);"
478,67,2565,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0068"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setArgs((int) (short) 100);
        java.lang.String str26 = option23.getKey();
        java.util.ListIterator listIterator27 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option23, listIterator27);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertEquals(""'"" + str26 + ""' != '"" + ""4"" + ""'"", str26, ""4"");"
479,336,1927,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0337"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine8 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine8.getOptionValues(""hi!"");
        java.lang.String str13 = commandLine8.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str15 = commandLine8.getOptionValue(""arg"");
        java.lang.String[] strArray16 = commandLine8.getArgs();
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser0.parse(options1, strArray16, properties17);
        boolean boolean20 = commandLine18.hasOption(' ');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertEquals(""'"" + str13 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str13, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertTrue(""'"" + boolean20 + ""' != '"" + false + ""'"", boolean20 == false);"
480,476,2079,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0477"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String[] strArray10 = commandLine7.getArgs();
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser0.parse(options1, strArray10, properties11);
        boolean boolean14 = options1.hasOption("" "");
        java.util.Collection collection15 = options1.getOptionGroups();
        boolean boolean17 = options1.hasOption(""org.apache.commons.cli.MissingArgumentException:  "");
        org.apache.commons.cli.OptionGroup optionGroup18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options19 = options1.addOptionGroup(optionGroup18);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertTrue(""'"" + boolean14 + ""' != '"" + false + ""'"", boolean14 == false);
        org.junit.Assert.assertNotNull(collection15);
        org.junit.Assert.assertTrue(""'"" + boolean17 + ""' != '"" + false + ""'"", boolean17 == false);"
481,383,2509,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0384"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        java.util.Collection collection22 = options6.getOptions();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create('4');
        char char25 = option24.getValueSeparator();
        org.apache.commons.cli.Options options26 = options6.addOption(option24);
        boolean boolean27 = option24.hasArgs();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(collection22);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertTrue(""'"" + char25 + ""' != '"" + '\000' + ""'"", char25 == '\000');
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertTrue(""'"" + boolean27 + ""' != '"" + false + ""'"", boolean27 == false);"
482,490,1790,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0491"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptions();
        boolean boolean9 = options1.hasOption(""arg"");
        java.lang.String[] strArray12 = new java.lang.String[] { ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"", ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"" };
        org.apache.commons.cli.CommandLine commandLine13 = posixParser0.parse(options1, strArray12);
        org.apache.commons.cli.Option option14 = null;
        java.util.ListIterator listIterator15 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option14, listIterator15);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertTrue(""'"" + boolean9 + ""' != '"" + false + ""'"", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine13);"
483,327,2006,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0328"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String[] strArray10 = commandLine7.getArgs();
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser0.parse(options1, strArray10, properties11);
        boolean boolean14 = commandLine12.hasOption("""");
        boolean boolean16 = commandLine12.hasOption(""[ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]"");
        org.apache.commons.cli.Option option17 = null;
        // The following exception was thrown during execution in test generation
        try {
            commandLine12.addOption(option17);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertTrue(""'"" + boolean14 + ""' != '"" + false + ""'"", boolean14 == false);
        org.junit.Assert.assertTrue(""'"" + boolean16 + ""' != '"" + false + ""'"", boolean16 == false);"
484,316,2296,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0317"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        boolean boolean19 = options6.hasOption(""arg"");
        java.util.Collection collection20 = options6.getOptions();
        org.apache.commons.cli.Option option21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.OptionGroup optionGroup22 = options6.getOptionGroup(option21);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue(""'"" + boolean19 + ""' != '"" + false + ""'"", boolean19 == false);
        org.junit.Assert.assertNotNull(collection20);"
485,32,2470,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0033"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.OptionBuilder optionBuilder22 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options6);
        org.apache.commons.cli.OptionGroup optionGroup23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options24 = options6.addOptionGroup(optionGroup23);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(optionBuilder22);"
486,426,1708,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0427"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptions();
        boolean boolean9 = options1.hasOption(""arg"");
        java.lang.String[] strArray12 = new java.lang.String[] { ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"", ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"" };
        org.apache.commons.cli.CommandLine commandLine13 = posixParser0.parse(options1, strArray12);
        commandLine13.addArg(""[ option: 4  :: null ::  ]"");
        java.lang.String str17 = commandLine13.getOptionValue(""[ option: 4 arg  :: null ]"");
        java.lang.String[] strArray19 = commandLine13.getOptionValues(""org.apache.commons.cli.MissingArgumentException: [ option:    :: null ]"");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertTrue(""'"" + boolean9 + ""' != '"" + false + ""'"", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine13);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(strArray19);"
487,194,2245,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0195"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        boolean boolean19 = options6.hasOption(""arg"");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options23 = options6.addOption(""org.apache.commons.cli.MissingOptionException: [ option: 4  :: null ]"", true, ""[ option:  +ARG ::  ]"");
            org.junit.Assert.fail(""Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '.'"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue(""'"" + boolean19 + ""' != '"" + false + ""'"", boolean19 == false);"
488,97,2395,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0098"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        java.util.Collection collection22 = options6.getOptions();
        org.apache.commons.cli.OptionGroup optionGroup23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options24 = options6.addOptionGroup(optionGroup23);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(collection22);"
489,247,2182,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0248"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        boolean boolean19 = options6.hasOption(""arg"");
        org.apache.commons.cli.OptionGroup optionGroup20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options21 = options6.addOptionGroup(optionGroup20);
            org.junit.Assert.fail(""Expected exception of type java.lang.NullPointerException; message: null"");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue(""'"" + boolean19 + ""' != '"" + false + ""'"", boolean19 == false);"
490,102,1439,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0103"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptions();
        boolean boolean9 = options1.hasOption(""arg"");
        java.lang.String[] strArray12 = new java.lang.String[] { ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]"", ""org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!"" };
        org.apache.commons.cli.CommandLine commandLine13 = posixParser0.parse(options1, strArray12);
        java.lang.Class<?> wildcardClass14 = options1.getClass();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertTrue(""'"" + boolean9 + ""' != '"" + false + ""'"", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine13);
        org.junit.Assert.assertNotNull(wildcardClass14);"
491,40,2091,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0041"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        boolean boolean19 = options6.hasOption(""arg"");
        java.util.Collection collection20 = options6.getOptions();
        java.lang.String str21 = options6.toString();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue(""'"" + boolean19 + ""' != '"" + false + ""'"", boolean19 == false);
        org.junit.Assert.assertNotNull(collection20);
        org.junit.Assert.assertEquals(""'"" + str21 + ""' != '"" + ""[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str21, ""[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]"");"
492,211,1917,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0212"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String str12 = commandLine7.getOptionValue(""hi!"", ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        java.lang.String str14 = commandLine7.getOptionValue(""arg"");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        boolean boolean19 = options6.hasOption(""arg"");
        org.apache.commons.cli.OptionBuilder optionBuilder20 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options6);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals(""'"" + str12 + ""' != '"" + ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"" + ""'"", str12, ""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]"");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue(""'"" + boolean19 + ""' != '"" + false + ""'"", boolean19 == false);
        org.junit.Assert.assertNotNull(optionBuilder20);"
493,191,2164,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0192"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        java.util.Collection collection22 = options6.getOptions();
        java.util.Collection collection23 = options6.getOptionGroups();
        java.util.List list24 = options6.helpOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(collection22);
        org.junit.Assert.assertNotNull(collection23);
        org.junit.Assert.assertNotNull(list24);"
494,443,2131,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0444"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        java.util.List list22 = commandLine21.getArgList();
        java.lang.String[] strArray24 = commandLine21.getOptionValues(""[ Options: [ short {4=[ option: 4  ::  :: [ option: 4  ::  :: false ] ]} ] [ long {} ]"");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNull(strArray24);"
495,345,2139,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0346"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.OptionBuilder optionBuilder22 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options6);
        java.lang.Class<?> wildcardClass23 = optionBuilder22.getClass();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(optionBuilder22);
        org.junit.Assert.assertNotNull(wildcardClass23);"
496,358,1402,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0359"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String[] strArray10 = commandLine7.getArgs();
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser0.parse(options1, strArray10, properties11);
        boolean boolean14 = options1.hasOption("" "");
        java.util.List list15 = options1.getRequiredOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertTrue(""'"" + boolean14 + ""' != '"" + false + ""'"", boolean14 == false);
        org.junit.Assert.assertNotNull(list15);"
497,49,1386,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0050"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues(""hi!"");
        java.lang.String[] strArray10 = commandLine7.getArgs();
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser0.parse(options1, strArray10, properties11);
        org.apache.commons.cli.Option[] optionArray13 = commandLine12.getOptions();
        java.util.List list14 = commandLine12.getArgList();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertNotNull(optionArray13);
        org.junit.Assert.assertNotNull(list14);"
498,437,2009,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0438"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        posixParser0.burstToken("""", false);
        posixParser0.burstToken(""[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ], arg=[ option: arg  :: null ]} ] [ long {} ]"", false);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);"
499,299,1984,"if (debug)
            System.out.format(""%n%s%n"", ""RegressionTest0.test0300"");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("""");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("""");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues(""hi!"");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        posixParser0.burstToken("""", false);
        java.lang.Class<?> wildcardClass25 = posixParser0.getClass();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(wildcardClass25);"
